<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shell编程</title>
      <link href="2021/09/28/shell-bian-cheng/"/>
      <url>2021/09/28/shell-bian-cheng/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
            <tag> zsh </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习笔记</title>
      <link href="2021/09/28/linux-xue-xi-bi-ji/"/>
      <url>2021/09/28/linux-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>2021-10-08</code>虽然使用ubuntu已经两年多了，但对Linux的认识依旧停留在很浅的一个层次，因此决定找个时间系统地、较为全面地对Linux基础知识进行学习。但作为算法工程师，也没必要对Linux进行太过深入的研究，因此本文的主要参考是一篇小而精的<a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/index.html">Linux文档</a></p></blockquote><h1 id="1-Linux帮助命令"><a href="#1-Linux帮助命令" class="headerlink" title="1. Linux帮助命令"></a>1. Linux帮助命令</h1><ul><li>Linux系统内置了详细的帮助文档，当需要了解某些命令的用法或者忘记相关命令的具体拼写时，可以使用Linux帮助命令。</li><li><code>whatis command</code>，显示<code>command</code>命令的简要说明，若忘记命令的完整拼写，可用正则匹配进行搜索<code>whatis -w "comm*"</code><br><img src="/2021/09/28/linux-xue-xi-bi-ji/fig1-1.jpg"></li><li><code>man command</code>，显示<code>command</code>命令的说明文档，文档一共分为9类，某些关键词可能对应多个类别，<code>1</code>类最为常见。<br><img src="/2021/09/28/linux-xue-xi-bi-ji/fig1-2.jpg"></li><li>若某个关键词对应多个类别，如<code>printf</code>，则需指定查看某类别时用<code>man N printf</code>命令，<code>N</code>代表类别，取值为1~9。</li><li>根据部分关键字来查询命令：<code>man -k keyword</code><br><img src="/2021/09/28/linux-xue-xi-bi-ji/fig1-3.jpg"></li><li>查看程序的二进制文件路径：<code>which command</code>；查看程序的搜素路径，显示所有版本：    <code>whereis command</code><br><img src="/2021/09/28/linux-xue-xi-bi-ji/fig1-4.jpg"></li></ul><h1 id="2-文件及目录管理"><a href="#2-文件及目录管理" class="headerlink" title="2. 文件及目录管理"></a>2. 文件及目录管理</h1><ul><li>新建目录<code>mkdir xxx</code>，新建文件<code>touch xxx</code>，删除文件<code>rm xxx</code>，删除目录<code>rm -r xxx</code>，强行删除目录<code>rm -rf xxx</code>。</li><li>移动文件或目录<code>mv a b</code>，可用于重命名，复制文件<code>cp a b</code>，复制目录<code>cp -r a b</code>。</li><li>切换路径<code>cd path</code>，切换到home<code>cd ~</code>，切换到父路径<code>cd ..</code>， 显示当前路径<code>pwd</code>。</li><li>显示当前目录下的文件<code>ls</code>，以长列表形式显示<code>ls -l</code>，显示所有文件（包括隐藏文件）<code>ls -a</code>，按文件修改时间排序显示<code>la -t</code>，这些参数可组合使用。</li><li>文件和目录查找<code>find</code><ul><li>基本语法：<code>find path option action</code></li><li>根据名称查找：<code>find path -name filename</code>，可以是具体的文件名，也可以用通配符匹配。若需要查找目录，则在命令最后加<code>-type d</code>。<code>-type f</code>表示一般文件，<code>-type l</code>表示链接文件，忽略大小写则将<code>-name</code>改为<code>-iname</code>。<br><img src="/2021/09/28/linux-xue-xi-bi-ji/fig2-1.jpg"></li><li>根据权限查找：<code>find path -perm 664 -type f</code>查找路径下权限为<code>-rw-rw-r--</code>的文件。查找空文件或空目录加上<code>-empty</code>参数即可。</li><li>根据所有者或组查找：<code>find path -user xxx</code>查找路径下所有者为<code>xxx</code>的所有文件和目录，<code>find path -group xxx</code>查找路径下所有组为<code>xxx</code>的所有文件和目录。</li><li>根据时间查找：<code>find path -atime 7 -type f</code>查找第7天被访问过的所有文件，将<code>7</code>改为<code>-7</code>则表示7天内，改为<code>+7</code>则表示7天前。将<code>-atime</code>改为<code>-mtime</code>则表示内容被修改的文件，改为<code>-ctime</code>则表示元数据或权限发生改变的文件。将<code>time</code>字段替换为<code>min</code>则时间单位由<code>天</code>变为<code>分钟</code>。</li><li>根据大小查找：<code>find path -size +50M -size -100M -type f</code>查找大小在50M到100M的所有文件。单位可替换为<code>k或G</code>。</li><li>执行动作<code>find-command -exec command \;</code>，可跟在查找命令之后，作用于找到的文件。等价于<code>find-command | xargs command</code>。<br><img src="/2021/09/28/linux-xue-xi-bi-ji/fig2-2.jpg"></li></ul></li><li>查看文件内容<code>cat</code><ul><li><code>cat xxx</code>，若要显示行号，则加上<code>-n</code>选项，即<code>cat -n xxx</code>。</li><li>使用重定向符：<ul><li><code>cat xxx1 &gt; xxx2</code>，<code>xxx2</code>的内容将被<code>xxx1</code>的内容所替代。</li><li><code>cat xxx1 &gt;&gt; xxx2</code>，将<code>xxx1</code>的内容附加在<code>xxx2</code>的末尾。</li></ul></li></ul></li><li>文件与目录权限修改<ul><li><code>ll</code>命令可查看文件的详细信息，有7个字段。<br><img src="/2021/09/28/linux-xue-xi-bi-ji/fig2-3.jpg"></li><li>第一个字段为文件的属性，由十位组成，第一位表示文件类别，<code>d</code>表示目录，<code>l</code>表示链接文件，<code>-</code>表示一般文件，后九位中每三位分别代表所有者、所属组、其他用户的读<code>r</code>（4），写<code>w</code>（2）和执行<code>x</code>（1）权限。</li><li>第二个字段表示文件硬链接数或目录子目录数。</li><li>第三个字段表示该文件或目录的所有者。</li><li>第四个字段表示改文件或目录的所属组。</li><li>第五个字段表示文件的大小。</li><li>第六个字段表示最后修改的时间。</li><li>第七个字段表示文件名。</li><li>修改文件的权限：<code>chmod 764 file</code>表示将<code>file</code>的权限修改为：所有者的权限为7（4+2+1，读、写、执行），所属组的权限为6（4+2，读、写），其他用户的权限为4（4，读），若要修改整个目录的权限，则加上<code>-R</code>选项。</li><li>修改文件的所有者或所属组：<code>chown user:group file</code>表示将<code>file</code>的所有者改为<code>user</code>，所属组改为<code>group</code>，若修改对象是目录，则加上<code>-R</code>选项。</li></ul></li><li>创建文件的硬链接/软链接<ul><li><code>硬链接</code>：<code>ln f1 f2</code>表示创建<code>f1</code>的一个硬链接文件<code>f2</code>，这两个文件名指向同一个文件（索引节点），删除任意一个文件都不会影响其他文件的访问，只有所有的硬链接文件都被删除，对应文件的数据块才会被释放。</li><li><code>软链接</code>：<code>ln -s f1 f3</code>表示创建<code>f1</code>的一个软链接文件<code>f3</code>，这类似windows中的快捷方式，可以通过<code>f3</code>来访问<code>f1</code>，若<code>f1</code>被删除，<code>f3</code>仍旧存在，但指向的是一个无效的链接，而删除<code>f3</code>对<code>f1</code>无影响。</li></ul></li><li>管道符号、重定向符号与连接符号<ul><li>管道符号<code>|</code>：<code>command A | command B</code>表示将命令A的输出作为命令B的输入。</li><li>输出重定向符<code>&gt;</code>：<code>command A &gt; file B</code>表示将命令A的输出写入B文件，覆盖原文件内容。</li><li>输出重定向符<code>&gt;&gt;</code>：<code>command A &gt;&gt; file B</code>表示将命令A的输出追加写入B文件，不覆盖原文件内容。</li><li>输入重定向符<code>&lt;</code>：<code>command A &lt; file B</code>表示将文件B的内容作为命令A的输入。</li><li>连接符号<code>;</code>：<code>command A ; command B</code>不论命令A是否执行成功，B命令都会继续执行。</li><li>后台执行符号<code>&amp;</code>：<code>command A &amp;</code>命令A会进入后台执行。</li><li>逻辑与符号<code>&amp;&amp;</code>：<code>command A &amp;&amp; command B</code>若命令A执行成功，则执行命令B，否则不执行命令B。</li><li>逻辑或符号<code>||</code>：<code>command A || command B</code>若命令A执行失败，则执行命令B，否则不执行命令B。</li></ul></li></ul><h1 id="3-文本处理"><a href="#3-文本处理" class="headerlink" title="3. 文本处理"></a>3. 文本处理</h1><ul><li><code>grep</code>文本搜索<ul><li>基本用法：<code>grep str path</code>在路径<code>path</code>对应的文件中查找<code>str</code>字符串，若<code>path</code>对应的是目录，则需加上<code>-r</code>选项。</li><li><code>grep</code>是大小写敏感的，若需要忽略大小写进行查找，则需加上<code>-i</code>选项。</li><li>加上<code>-v</code>选项可以进行反向搜索，即输出不含有<code>str</code>字符串的内容。</li><li>加上<code>-A n</code>选项可以在<code>str</code>字符串所在行后打印<code>n</code>行，加上<code>-B n</code>选项可以在<code>str</code>字符串所在行前打印<code>n</code>行，加上<code>-C n</code>选项可以在<code>str</code>字符串所在行前后打印<code>n</code>行，</li><li>加上<code>-c</code>选项可以输出匹配项的数目，加上<code>-n</code>选项可以输出匹配项所在的行号。</li><li>加上<code>-w</code>选项可以进行精确匹配搜索而不是通配，例如搜<code>RUN</code>不会返回<code>RUNNING</code>的搜索结果。</li><li>加上<code>-e</code>选项可以进行多个模式匹配（or逻辑），例如<code>-e str1 -e str2</code>将输出匹配<code>str1</code>或<code>str2</code>的结果。</li></ul></li><li><code>xargs</code>命令<ul><li><code>xargs</code>命令的作用是将标准输入转为命令行参数，大多数命令（比如<code>rm</code>、<code>mkdir</code>、<code>ls</code>）与管道一起使用时，都需要<code>xargs</code>将标准输入转为命令行参数。</li><li>有些命令可以接受标准输入作为参数，因此在使用管道命令时不需要<code>xargs</code>，比如<code>grep</code>命令。</li><li>默认情况下，<code>xargs</code>将换行符和空格作为分隔符，把标准输入分解成一个个命令行参数。<code>-d "\t"</code>可以将分隔符改为<code>\t</code>。</li><li><code>-p</code>参数会先打印出要执行的命令，用户输入<code>y</code>以后才会正真实行。</li><li><code>xargs</code>默认只用一个进程执行命令。如果命令要执行多次，必须等上一次执行完，才能执行下一次。<code>--max-procs n</code>指定同时用<code>n</code>个进程并行执行命令，<code>n=0</code>时表示不限制进程数。</li></ul></li><li><code>wc</code>命令<ul><li><code>wc</code>命令用来统计文件的行数、单词数、字节数。</li><li><code>wc file</code>会输出<code>file</code>文件的行数、单词数及字节数（字符数）。</li><li><code>wc -l file</code>输出行数，<code>wc -w file</code>输出单词数，<code>wc -c file</code>输出字节数（字符数）。</li></ul></li><li><code>awk</code>命令<ul><li><code>awk</code>是处理文本文件的一个应用程序，它依次处理文件的每一行，并读取里面的每一个字段。</li><li>基本用法：<code>awk '动作' 文件名</code>，如<code>awk '{print $0}' demo.txt</code>表示将<code>demo.txt</code>文件的每一行打印出来，<code>$0</code>代表当前行。</li><li><code>awk</code>默认根据空格和制表符，将每一行分为若干字段，依次用<code>$1</code>、<code>$2</code>、<code>$3</code>表示第一个、第二个和第三个字段。若需要修改默认分隔符，可使用<code>-F</code>选项，例如<code>-F ':'</code>表示指定分隔符为冒号。</li><li><code>NF</code>变量表示当前行有多少个字段，<code>$NF</code>代表最后一个字段，<code>$(NF-1)</code>代表倒数第二个字段。<br><img src="/2021/09/28/linux-xue-xi-bi-ji/fig3-1.jpg"></li><li><code>NR</code>变量表示当前处理的是第几行，<code>FILENAME</code>变量表示当前文件名。</li><li><code>awk</code>允许指定输出条件，只输出符合条件的行，<code>awk '条件 动作' 文件名</code>。<code>awk 'NR % 2 = 1 {print $0}' demo.txt</code>表示只输出<code>demo.txt</code>文件的奇数行。<code>awk '/^test/ {print $0}' demo.txt</code>表示只输出<code>demo.txt</code>文件中以<code>test</code>开头的行，<code>/test$/</code>则匹配以<code>test</code>结尾的行。</li></ul></li></ul><h1 id="4-磁盘管理"><a href="#4-磁盘管理" class="headerlink" title="4. 磁盘管理"></a>4. 磁盘管理</h1><ul><li>查看磁盘空间<ul><li><code>df -h</code>命令查看文件系统磁盘占用情况。</li><li><code>du -sh d</code>命令查看目录<code>d</code>所占空间的大小。</li></ul></li><li>压缩/解压缩<ul><li><code>tar -cvf test.tar /path/to/test</code>将<code>test</code>目录打包到<code>test.tar</code>文件，无压缩，<code>-c</code>表示创建，要创建文件时不能缺少这个选项，<code>-v</code>表示显示具体过程，<code>-f</code>表示创建一个归档文件。</li><li><code>tar -czvf test.tar.gz /path/to/test</code>将<code>test</code>目录打包并用<code>gzip</code>压缩到<code>test.tar.gz</code>文件，<code>-z</code>表示压缩的归档文件是gzip格式。</li><li><code>tar -xzvf test.tar.gz -C /path/to/test</code>将<code>test.tar.gz</code>文件解压至<code>/path/to/test</code>，<code>-x</code>表示提取。<code>-C</code>指定解压路径。</li></ul></li><li>查询进程<ul><li><code>ps -ef</code>查询正在运行的进程信息。<code>top</code>显示进程信息，并实时更新，推荐使用<code>htop</code>，功能更多。</li><li><code>ps -lu username</code>或<code>ps -ef | grep username</code>查询用户<code>username</code>的进程信息。</li><li>杀死指定PID的进程：<code>kill -9 PID</code>。</li></ul></li><li><code>lsof</code>命令<ul><li>在Linux系统中，万物皆文件，<code>lsof (list open files)</code>是一个列出当前系统已打开文件的工具。</li><li>直接输入<code>lsof</code>命令会输出所有系统已打开的文件信息(需要root权限)。</li><li><code>lsof file</code>显示所有开启文件<code>file</code>的进程信息。</li><li><code>lsof -i:xxxx</code>显示占用端口<code>xxxx</code>的进程信息。</li><li><code>lsof -u username</code>显示用户<code>username</code>当前打开的文件信息。</li><li><code>lsof -p PID</code>显示进程号为<code>PID</code>的进程打开的文件信息。</li></ul></li></ul><h1 id="5-其他常用命令"><a href="#5-其他常用命令" class="headerlink" title="5. 其他常用命令"></a>5. 其他常用命令</h1><ul><li>Linux杀死多进程：<code>ps -ef | grep 'command' | awk '{print $2}' | xargs kill -9</code></li><li><code>git status</code>中文显示为数字串解决方法：<code>git config --global core.quotepath false</code></li><li>查看Linux系统版本：<code>uname -a</code></li><li>查看CPU信息：<code>cat /proc/cpuinfo</code></li><li>查看内存信息：<code>cat /proc/meminfo</code></li><li>查看系统可用内存：<code>free</code></li></ul><p><img src="/2021/09/28/linux-xue-xi-bi-ji/fig1.jpg"></p><h1 id="6-References"><a href="#6-References" class="headerlink" title="6. References"></a>6. References</h1><ul><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/index.html">Linux Tools Quick Tutorial</a></li><li><a href="https://zhuanlan.zhihu.com/p/223681357">管道与连接符号</a></li><li><a href="https://linux.cn/article-2250-1.html">Linux中grep命令的12个实践例子</a></li><li><a href="https://www.ruanyifeng.com/blog/2019/08/xargs-tutorial.html">xargs命令教程</a></li><li><a href="https://www.ruanyifeng.com/blog/2018/11/awk.html">awk入门教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题笔记</title>
      <link href="2021/04/20/leetcode-note/"/>
      <url>2021/04/20/leetcode-note/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>2021-04-20</code>虽然已经拿到了<span class="github-emoji"><span>🐧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f427.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>厂的暑期实习offer，但自己基本处于0刷题的状态，想到两个多月之后就要开始秋招（提前批）心里就慌得一匹<span class="github-emoji"><span>😟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。因此赶紧利用这段时间刷一刷算法题，以免秋招时笔试都过不了<span class="github-emoji"><span>🙈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。本文主要用来记录刷题过程中自己认为的重点、难点以及自己对各类题型的总结。 </p></blockquote><h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a>1. 数组</h1><h2 id="1-1-基础知识"><a href="#1-1-基础知识" class="headerlink" title="1.1 基础知识"></a>1.1 基础知识</h2><ul><li><strong>定义</strong>: 数组是存放在<code>连续内存空间</code>上的<code>相同类型</code>数据的集合。</li><li>数组的下标都是从0开始。</li><li>可直接通过下表索引取值。</li><li>删除或增添元素时，需要移动其他元素的地址。<br><img src="/2021/04/20/leetcode-note/fig1-1.png" alt="数组删除元素操作"></li><li>c++中<code>vector</code>和<code>array</code>区别:<ul><li><code>std::vector</code><ul><li>是模板类(template class)，是c++特有的结构体。</li><li>由动态数组实现，不定长，动态管理内存。</li><li>功能相比<code>array</code>更多，但效率会低一些。</li></ul></li><li><code>std::array</code><ul><li>是内置结构体，对标c中的数组。</li><li>提供连续的、可索引的元素序列。</li><li>定长，且不能修改（除非是POD平凡数组且由<code>malloc</code>分配）。</li></ul></li><li><code>简单总结</code><ul><li>一般情况下无脑用<code>vector</code>就行。</li><li>若确定无需改数组大小，用<code>array</code>速度更快些。</li></ul></li></ul></li></ul><h2 id="1-2-典型例题"><a href="#1-2-典型例题" class="headerlink" title="1.2 典型例题"></a>1.2 典型例题</h2><h3 id="1-2-1-搜索插入位置-No-35"><a href="#1-2-1-搜索插入位置-No-35" class="headerlink" title="1.2.1 搜索插入位置(No.35)"></a>1.2.1 搜索插入位置(No.35)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。你可以假设数组中无重复元素。</strong><br><br><strong>示例1</strong>:<br>输入: [1,3,5,6], 5<br>输出: 2<br><strong>示例2</strong>:<br>输入: [1,3,5,6], 2<br>输出: 1<br><strong>示例3</strong>:<br>输入: [1,3,5,6], 7<br>输出: 4<br><strong>示例4</strong>:<br>输入: [1,3,5,6], 0<br>输出: 0</p></blockquote><p><strong>暴力解法</strong></p><blockquote><p>遍历该有序数组，将每个元素与目标值进行对比，可分为三种情况: </p><ul><li>当前元素与目标值相等，则直接返回当前元素的索引; </li><li>当前元素大于目标值，因为是升序，后续元素肯定都大于目标值，则直接返回当前元素索引; </li><li>当前元素小于目标值，继续循环，若到最后一元素仍小于目标值，则返回当前元素索引+1。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.35 搜索插入位置 类型：数组</span><span class="token keyword">class</span> <span class="token class-name">Solution35</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 暴力解法</span>    <span class="token keyword">def</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: int        """</span>        len_array <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>len_array<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> target<span class="token punctuation">:</span>  <span class="token comment"># 大于或等于的情形都是返回i</span>                <span class="token keyword">return</span> i            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token keyword">and</span> i <span class="token operator">==</span> <span class="token punctuation">(</span>len_array <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.35</span>    s <span class="token operator">=</span> Solution35<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>    in_put_2 <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>searchInsert<span class="token punctuation">(</span>in_put_1<span class="token punctuation">,</span> in_put_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二分法</strong></p><blockquote><p>看到题中的数组是有序的应尝试用二分法来解决。二分法的关键是二分后区间的边界定义问题，整体代码要保持始终一致。首先定义两个变量<code>start</code>和<code>end</code>来确定二分区间<code>[start, end]</code>，这里为闭区间，因此循环的终止条件为<code>start &gt; end</code>。对每个二分区间，首先计算其中间元素的全局索引<code>mid = start + (end - start + 1) // 2</code>，然后分三种情况判断:</p><ul><li>中间元素等于目标值，则直接返回中间元素全局索引;</li><li>中间元素大于目标值，说明目标值只可能在左二分区间，因此修改右边界<code>end = mid - 1</code>;</li><li>中间元素小于目标值，说明目标值只可能在右二分区间，因此修改左边界<code>start = mid + 1</code></li><li>时间复杂度: <code>O(logn)</code></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.35 搜索插入位置 类型：数组</span><span class="token keyword">class</span> <span class="token class-name">Solution35</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 二分法</span>    <span class="token keyword">def</span> <span class="token function">searchInsertBisection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: int        """</span>        len_array <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        start <span class="token operator">=</span> <span class="token number">0</span>        end <span class="token operator">=</span> len_array <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> end <span class="token operator">&gt;=</span> start<span class="token punctuation">:</span>  <span class="token comment"># 二分区间为闭区间[start, end]</span>            mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> mid            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>                end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> start<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.35</span>    s <span class="token operator">=</span> Solution35<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>    in_put_2 <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>searchInsertBisection<span class="token punctuation">(</span>in_put_1<span class="token punctuation">,</span> in_put_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-2-移除元素-No-27"><a href="#1-2-2-移除元素-No-27" class="headerlink" title="1.2.2 移除元素(No.27)"></a>1.2.2 移除元素(No.27)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给你一个数组<code>nums</code>和一个值<code>val</code>，你需要<code>原地</code>移除所有数值等于<code>val</code>的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用<code>O(1)</code>额外空间并<code>原地</code>修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</strong><br><br><strong>示例1</strong>:<br>输入: nums = [3,2,2,3], val = 3<br>输出: 2, nums = [2,2]<br>解释: 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。<br><strong>示例2</strong>:<br>输入: nums = [0,1,2,2,3,0,4,2], val = 2<br>输出: 5, nums = [0,1,3,0,4]<br>解释: 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p></blockquote><p><strong>暴力解法</strong></p><blockquote><p>数组只能覆盖值而不能直接删除，用两层循环即可解决。注意点: </p><ul><li><code>python</code>用<code>for</code>循环在内部改变循环变量仅在该次循环生效，因此这题用<code>while</code>循环更容易写一些。</li><li>第一层循环变量<code>i</code>以及数组大小<code>size</code>在删除一个元素之后需要<code>-1</code>。</li><li>时间复杂度: <code>O(n^2)</code></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.27 移除元素 类型：数组</span><span class="token keyword">class</span> <span class="token class-name">Solution27</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 暴力解法</span>    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type val: int        :rtype: int        """</span>        <span class="token comment"># for 循环</span>        <span class="token comment"># num_del = 0</span>        <span class="token comment"># skip = 0</span>        <span class="token comment"># for i in range(len(nums)):</span>        <span class="token comment">#     if nums[i - num_del] == val:</span>        <span class="token comment">#         for j in range(len(nums) - (num_del + skip + 1)):</span>        <span class="token comment">#             nums[i - num_del + j] = nums[i - num_del + j + 1]</span>        <span class="token comment">#         num_del += 1</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         skip += 1</span>        <span class="token comment"># </span>        <span class="token comment"># return len(nums) - num_del</span>        <span class="token comment"># while 循环</span>        i <span class="token operator">=</span> <span class="token number">0</span>        size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">:</span>                j <span class="token operator">=</span> i                <span class="token keyword">while</span> j <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                i <span class="token operator">-=</span> <span class="token number">1</span>                size <span class="token operator">-=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> size<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.27</span>    s <span class="token operator">=</span> Solution27<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>    in_put_2 <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>removeElement<span class="token punctuation">(</span>in_put_1<span class="token punctuation">,</span> in_put_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双指针法</strong></p><blockquote><p>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。双指针法（快慢指针法）在数组和链表的操作中是非常常见的，很多考察数组和链表操作的面试题，都使用双指针法。<br>核心思路: 上述暴力解法的每次移动元素都是移一步但需移多次，实际上每个不等于<code>var</code>的元素只需移一次，而步长等于该元素前边等于<code>var</code>元素的个数，使用双指针来记录即可: </p><ul><li>若当前元素不等于<code>val</code>，则将快指针的值赋予慢指针，然后快慢指针都<code>+1</code>。</li><li>若当前元素等于<code>val</code>，快指针<code>+1</code>，慢指针不变。</li><li>快指针遍历完整个数组循环结束。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.27 移除元素 类型：数组</span><span class="token keyword">class</span> <span class="token class-name">Solution27</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------双指针法--------------------</span>    <span class="token keyword">def</span> <span class="token function">removeElementDoubleP</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type val: int        :rtype: int        """</span>        slow_p <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> fast_p <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast_p<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>slow_p<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast_p<span class="token punctuation">]</span>  <span class="token comment"># 不等于val的元素只需移动一次，步伐为fast_p - slow_p</span>                slow_p <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> slow_p<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.27</span>    s <span class="token operator">=</span> Solution27<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>    in_put_2 <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>removeElementDoubleP<span class="token punctuation">(</span>in_put_1<span class="token punctuation">,</span> in_put_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-3-长度最小的子数组-No-209"><a href="#1-2-3-长度最小的子数组-No-209" class="headerlink" title="1.2.3 长度最小的子数组(No.209)"></a>1.2.3 长度最小的子数组(No.209)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给定一个含有<code>n</code>个正整数的数组和一个正整数<code>target</code>。找出该数组中满足其和<code>≥ target</code>的长度最小的连续子数组<code>[numsl, numsl+1, ..., numsr-1, numsr]</code>，并返回其长度。如果不存在符合条件的子数组，返回<code>0</code>。</strong><br><br><strong>示例1</strong>:<br>输入: target = 7, nums = [2,3,1,2,4,3]<br>输出: 2<br>解释: 子数组 [4,3] 是该条件下的长度最小的子数组。<br><strong>示例2</strong>:<br>输入: target = 4, nums = [1,4,4]<br>输出: 1<br><strong>示例3</strong>:<br>输入: target = 11, nums = [1,1,1,1,1,1,1,1]<br>输出: 0</p></blockquote><p><strong>暴力解法</strong></p><blockquote><p>两层循环，第一层循环遍历整个数组，第二个循环用于对每个元素向后累加，但应该注意，一旦加至满足<code>&gt;=target</code>的条件，第二层循环就可以跳出。</p><ul><li>时间复杂度: <code>O(n^2)</code>, 在leetcode上直接超时了<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.209 长度最小的子数组 类型：数组</span><span class="token keyword">class</span> <span class="token class-name">Solution209</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------暴力解法--------------------</span>    <span class="token keyword">def</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type target: int        :type nums: List[int]        :rtype: int        """</span>        min_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sum_temp <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>                sum_temp <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span>                <span class="token keyword">if</span> sum_temp <span class="token operator">&gt;=</span> target<span class="token punctuation">:</span>                    min_len <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>min_len<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span>  <span class="token comment"># 直接跳出循环</span>        <span class="token keyword">if</span> min_len <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> min_len<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.209</span>    s <span class="token operator">=</span> Solution209<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_1 <span class="token operator">=</span> <span class="token number">7</span>    in_put_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>minSubArrayLen<span class="token punctuation">(</span>in_put_1<span class="token punctuation">,</span> in_put_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>滑动窗口法</strong></p><blockquote><p>上述暴力解法的缺陷在于第二层循环存在冗余，以<code>target = 7, nums = [2,3,1,2,4,3]</code>为例，第一次循环得到最小子数组<code>[2,3,1,2]</code>，第二次内循环其实没必要计算<code>3+1</code>并判断，因为若<code>3+1&gt;target</code>则第一次循环得到的最小子数组不可能为<code>[2,3,1,2]</code>。滑动窗口法则避免了这种冗余计算，其本质也是一种双指针法，利用两个指针分别指向子序列的头、尾。</p><ul><li>若子序列之和<code>&lt;target</code>，则尾指针<code>+1</code>。</li><li>若子序列之和<code>&gt;target</code>，则记录子序列长度，并将头指针右移，直到子序列之和<code>&lt;target</code>。</li><li>可加一个判断，若子序列长度<code>=1</code>则直接返回。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.209 长度最小的子数组 类型：数组</span><span class="token keyword">class</span> <span class="token class-name">Solution209</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------滑动窗口法--------------------</span>    <span class="token keyword">def</span> <span class="token function">minSubArrayLenSlidingWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type target: int        :type nums: List[int]        :rtype: int        """</span>        start <span class="token operator">=</span> <span class="token number">0</span>        min_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        sum_temp <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> end <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sum_temp <span class="token operator">+=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span>            <span class="token keyword">while</span> sum_temp <span class="token operator">&gt;=</span> target<span class="token punctuation">:</span>                min_len <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>min_len<span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> min_len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># 大小为1时可直接返回</span>                    <span class="token keyword">return</span> min_len                sum_temp <span class="token operator">-=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span>                start <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> min_len <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> min_len<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.209</span>    s <span class="token operator">=</span> Solution209<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_1 <span class="token operator">=</span> <span class="token number">7</span>    in_put_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>minSubArrayLenSlidingWindow<span class="token punctuation">(</span>in_put_1<span class="token punctuation">,</span> in_put_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-4-螺旋矩阵II-No-59"><a href="#1-2-4-螺旋矩阵II-No-59" class="headerlink" title="1.2.4 螺旋矩阵II(No.59)"></a>1.2.4 螺旋矩阵II(No.59)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给你一个正整数<code>n</code>，生成一个包含<code>1</code>到<code>n2</code>所有元素，且元素按顺时针顺序螺旋排列的<code>n x n</code>正方形矩阵<code>matrix</code>。</strong><br><br><strong>示例1</strong><br>输入: n = 3<br>输出: [[1,2,3],[8,9,4],[7,6,5]]<br><strong>示例2</strong><br>输入: n = 1<br>输出: [[1]]</p></blockquote><p><strong>模拟法</strong></p><blockquote><p>模拟矩阵生成的过程，初始位置为左上角，初始方向为右。</p><ul><li><strong>转变方向判定</strong>: 若下一步的位置超出边界或者是之前访问过的位置(被访问过的位置的值都大于0)，则顺时针改变一次方向。</li><li>如此反复填入总共<code>n^2</code>个元素。</li><li>注意<code>python</code>列表与常数的乘法: <code>[0] * 3 = [0, 0, 0]</code></li><li>时间复杂度: <code>O(n^2)</code></li><li>空间复杂度: <code>O(1)</code>，不考虑返回的矩阵。</li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.59 螺旋矩阵II 类型：数组</span><span class="token keyword">class</span> <span class="token class-name">Solution59</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------模拟法--------------------</span>    <span class="token keyword">def</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :rtype: List[List[int]]        """</span>        mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 生成全0矩阵</span>        dirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 顺时针四个方向</span>        row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> dirIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            mat<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>            dr<span class="token punctuation">,</span> dc <span class="token operator">=</span> dirs<span class="token punctuation">[</span>dirIdx<span class="token punctuation">]</span>            r<span class="token punctuation">,</span> c <span class="token operator">=</span> row <span class="token operator">+</span> dr<span class="token punctuation">,</span> col <span class="token operator">+</span> dc            <span class="token keyword">if</span> r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> r <span class="token operator">&gt;=</span> n <span class="token keyword">or</span> c <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> c <span class="token operator">&gt;=</span> n <span class="token keyword">or</span> mat<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 边界判断，是否换方向</span>                dirIdx <span class="token operator">=</span> <span class="token punctuation">(</span>dirIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span>                dr<span class="token punctuation">,</span> dc <span class="token operator">=</span> dirs<span class="token punctuation">[</span>dirIdx<span class="token punctuation">]</span>            row<span class="token punctuation">,</span> col <span class="token operator">=</span> row <span class="token operator">+</span> dr<span class="token punctuation">,</span> col <span class="token operator">+</span> dc        <span class="token keyword">return</span> mat<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.59</span>    s <span class="token operator">=</span> Solution59<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>generateMatrix<span class="token punctuation">(</span>in_put<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分层模拟法</strong></p><blockquote><p>可以把这种方法比喻为<code>剥洋葱</code>法，从外至内一层一层计算。定义每一层的左上点、右下点分别为<code>(x1,y1)</code>和<code>(x2,y2)</code>，按照顺时针方向计算，每条边的区间为<code>左闭右开</code>。</p><ul><li>每记算完一层，就将左上点与右下点<code>内缩</code>。</li><li>循环终止条件为左上点与右下点错位。</li><li>若<code>n</code>为奇数，则手动补最中心点的值。</li><li>时间复杂度: <code>O(n^2)</code></li><li>空间复杂度: <code>O(1)</code>, 不考虑返回的矩阵。<br><img src="/2021/04/20/leetcode-note/fig1-2.png" alt="左闭右开"></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.59 螺旋矩阵II 类型：数组</span><span class="token keyword">class</span> <span class="token class-name">Solution59</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------分层模拟法--------------------</span>    <span class="token keyword">def</span> <span class="token function">generateMatrixLayer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :rtype: List[List[int]]        """</span>        mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 生成全0矩阵</span>        x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment"># 左上、右下点</span>        num <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> x1 <span class="token operator">&lt;=</span> x2 <span class="token keyword">and</span> y1 <span class="token operator">&lt;=</span> y2<span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y2 <span class="token operator">-</span> y1<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 向右</span>                mat<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1 <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> num                num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 向下</span>                mat<span class="token punctuation">[</span>x1 <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">=</span> num                num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>y2 <span class="token operator">-</span> y1<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 向左</span>                mat<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y2 <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> num                num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 向上</span>                mat<span class="token punctuation">[</span>x2 <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">=</span> num                num <span class="token operator">+=</span> <span class="token number">1</span>            x1 <span class="token operator">+=</span> <span class="token number">1</span>            y1 <span class="token operator">+=</span> <span class="token number">1</span>            x2 <span class="token operator">-=</span> <span class="token number">1</span>            y2 <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>  <span class="token comment"># n为奇数时处理中心点</span>            mat<span class="token punctuation">[</span>n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">**</span> <span class="token number">2</span>        <span class="token keyword">return</span> mat<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.59</span>    s <span class="token operator">=</span> Solution59<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>generateMatrixLayer<span class="token punctuation">(</span>in_put<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-5-顺时针打印矩阵-No-JZ29"><a href="#1-2-5-顺时针打印矩阵-No-JZ29" class="headerlink" title="1.2.5 顺时针打印矩阵(No.JZ29)"></a>1.2.5 顺时针打印矩阵(No.JZ29)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ29</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type matrix: List[List[int]]        :rtype: List[int]        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> matrix<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 方向模拟</span>        <span class="token comment"># dirs = [(0,1),(1,0),(0,-1),(-1,0)]</span>        <span class="token comment"># m = len(matrix)</span>        <span class="token comment"># n = len(matrix[0])</span>        <span class="token comment"># idx,x,y = 0,0,-1</span>        <span class="token comment"># s = set()</span>        <span class="token comment"># res = []</span>        <span class="token comment"># for i in range(m*n):</span>        <span class="token comment">#     d = dirs[idx]</span>        <span class="token comment">#     nx,ny = x+d[0], y+d[1]</span>        <span class="token comment">#     if nx&lt;0 or ny&lt;0 or nx&gt;=m or ny&gt;=n or (nx,ny) in s:</span>        <span class="token comment">#         idx = (idx + 1) % 4</span>        <span class="token comment">#         d = dirs[idx]</span>        <span class="token comment">#         nx,ny = x+d[0], y+d[1]</span>        <span class="token comment">#     res.append(matrix[nx][ny])</span>        <span class="token comment">#     s.add((nx,ny))</span>        <span class="token comment">#     x,y = nx,ny</span>        <span class="token comment"># return res</span>        <span class="token comment"># 边界模拟</span>        l<span class="token punctuation">,</span>t<span class="token punctuation">,</span>r<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            t <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> t <span class="token operator">&gt;</span> b<span class="token punctuation">:</span> <span class="token keyword">break</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>            r <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> l <span class="token operator">&gt;</span> r<span class="token punctuation">:</span> <span class="token keyword">break</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            b <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> t <span class="token operator">&gt;</span> b<span class="token punctuation">:</span> <span class="token keyword">break</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>            l <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> l <span class="token operator">&gt;</span> r<span class="token punctuation">:</span> <span class="token keyword">break</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-6-二维数组中的查找-No-JZ4"><a href="#1-2-6-二维数组中的查找-No-JZ4" class="headerlink" title="1.2.6 二维数组中的查找(No.JZ4)"></a>1.2.6 二维数组中的查找(No.JZ4)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ4</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type matrix: List[List[int]]        :type target: int        :rtype: bool        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> matrix <span class="token keyword">or</span> <span class="token keyword">not</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token comment"># 二分法</span>        <span class="token comment"># m,n = len(matrix), len(matrix[0])</span>        <span class="token comment"># for i in range(m):</span>        <span class="token comment">#     row = matrix[i]</span>        <span class="token comment">#     if target &lt; row[0]:</span>        <span class="token comment">#         return False</span>        <span class="token comment">#     elif target &gt; row[-1]:</span>        <span class="token comment">#         continue</span>        <span class="token comment">#     l, r = 0, n - 1</span>        <span class="token comment">#     while l &lt;= r:</span>        <span class="token comment">#         mid = (l+r) // 2</span>        <span class="token comment">#         if row[mid] == target:</span>        <span class="token comment">#             return True</span>        <span class="token comment">#         elif row[mid] &gt; target:</span>        <span class="token comment">#             r = mid - 1</span>        <span class="token comment">#         else:</span>        <span class="token comment">#             l = mid + 1</span>                    <span class="token comment"># return False</span>        <span class="token comment"># 线性查找</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">elif</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>                i <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-7-接雨水-No-42"><a href="#1-2-7-接雨水-No-42" class="headerlink" title="1.2.7 接雨水(No.42)"></a>1.2.7 接雨水(No.42)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution42</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">trap</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type height: List[int]        :rtype: int        """</span>        <span class="token comment"># 暴力法,超时</span>        <span class="token comment"># res = 0</span>        <span class="token comment"># for i in range(len(height)):</span>        <span class="token comment">#     m_l,m_r = 0,0</span>        <span class="token comment">#     for j in range(i,len(height)):</span>        <span class="token comment">#         m_r = max(m_r, height[j])</span>        <span class="token comment">#     for j in range(i,-1,-1):</span>        <span class="token comment">#         m_l = max(m_l, height[j])</span>        <span class="token comment">#     res += min(m_l,m_r) - height[i]</span>        <span class="token comment"># return res</span>        <span class="token comment"># 额外数组记录左右最大值</span>        <span class="token comment"># m_l = [0] * len(height)</span>        <span class="token comment"># temp_l = height[0]</span>        <span class="token comment"># for i in range(len(height)):</span>        <span class="token comment">#     m_l[i] = max(temp_l,height[i])</span>        <span class="token comment">#     temp_l = m_l[i]</span>        <span class="token comment"># m_r = [0] * len(height)</span>        <span class="token comment"># temp_r = height[-1]</span>        <span class="token comment"># for i in range(len(height)-1,-1,-1):</span>        <span class="token comment">#     m_r[i] = max(temp_r,height[i])</span>        <span class="token comment">#     temp_r = m_r[i]</span>        <span class="token comment"># res = 0</span>        <span class="token comment"># for i in range(len(height)):</span>        <span class="token comment">#     res += min(m_l[i],m_r[i]) - height[i]</span>        <span class="token comment"># return res</span>        <span class="token comment"># 双指针</span>        res <span class="token operator">=</span> <span class="token number">0</span>        l<span class="token punctuation">,</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        m_l<span class="token punctuation">,</span>m_r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>            <span class="token keyword">if</span> height<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>                m_l <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>m_l<span class="token punctuation">,</span>height<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>                res <span class="token operator">+=</span> m_l <span class="token operator">-</span> height<span class="token punctuation">[</span>l<span class="token punctuation">]</span>                l <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                m_r <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>m_r<span class="token punctuation">,</span> height<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>                res <span class="token operator">+=</span> m_r <span class="token operator">-</span> height<span class="token punctuation">[</span>r<span class="token punctuation">]</span>                r <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-8-扑克牌中的顺子-No-JZ61"><a href="#1-2-8-扑克牌中的顺子-No-JZ61" class="headerlink" title="1.2.8 扑克牌中的顺子(No.JZ61)"></a>1.2.8 扑克牌中的顺子(No.JZ61)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ61</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isStraight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: bool        """</span>        <span class="token comment"># 计算0的数量，遍历抵消</span>        nums <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        num_0 <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> num_0 <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">break</span>        <span class="token comment"># for i in range(num_0+1, len(nums)):</span>        <span class="token comment">#     if nums[i] == nums[i - 1] + 1:</span>        <span class="token comment">#         continue</span>        <span class="token comment">#     elif nums[i] == nums[i - 1]:</span>        <span class="token comment">#         return False</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         num_0 -= (nums[i] - nums[i -1] - 1)</span>        <span class="token comment">#         if num_0 &lt; 0:</span>        <span class="token comment">#             return False</span>        <span class="token comment"># return True</span>        <span class="token comment"># max-min&lt;5</span>        min_num <span class="token operator">=</span> nums<span class="token punctuation">[</span>num_0<span class="token punctuation">]</span>        max_num <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> max_num <span class="token operator">-</span> min_num <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_0<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-9-和为s的两个数字-No-JZ57"><a href="#1-2-9-和为s的两个数字-No-JZ57" class="headerlink" title="1.2.9 和为s的两个数字(No.JZ57)"></a>1.2.9 和为s的两个数字(No.JZ57)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ57</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: List[int]        """</span>        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> l <span class="token operator">&lt;</span> r<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>                r <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                l <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-10-和为s的连续正数序列-No-JZ57II"><a href="#1-2-10-和为s的连续正数序列-No-JZ57II" class="headerlink" title="1.2.10 和为s的连续正数序列(No.JZ57II)"></a>1.2.10 和为s的连续正数序列(No.JZ57II)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ57II</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findContinuousSequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 数学计算，确定序列的长度上限，对固定的长度可解得序列起始点</span>        n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span>target<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>target<span class="token operator">/</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>target<span class="token operator">/</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                idx <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>target<span class="token operator">/</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>j <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> idx <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res        <span class="token comment"># 滑动窗口</span>        <span class="token comment"># i, j = 1,2</span>        <span class="token comment"># res = []</span>        <span class="token comment"># while i &lt; j:</span>        <span class="token comment">#     if (i+j)*(j-i+1)/2 == target:</span>        <span class="token comment">#         res.append([k for k in range(i,j+1)])</span>        <span class="token comment">#         j += 1</span>        <span class="token comment">#     elif (i+j)*(j-i+1)/2 &gt; target:</span>        <span class="token comment">#         i += 1</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         j += 1</span>        <span class="token comment"># return res</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-11-调整数组顺序使奇数位于偶数前面-No-JZ21"><a href="#1-2-11-调整数组顺序使奇数位于偶数前面-No-JZ21" class="headerlink" title="1.2.11 调整数组顺序使奇数位于偶数前面(No.JZ21)"></a>1.2.11 调整数组顺序使奇数位于偶数前面(No.JZ21)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ21</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">exchange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 双指针</span>        l<span class="token punctuation">,</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;</span>r<span class="token punctuation">:</span>            <span class="token keyword">while</span> l<span class="token operator">&lt;</span>r <span class="token keyword">and</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span> r<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">while</span> l<span class="token operator">&lt;</span>r <span class="token keyword">and</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span> l<span class="token operator">+=</span><span class="token number">1</span>            nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span>        <span class="token keyword">return</span> nums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-12-合并两个有序数组-No-88"><a href="#1-2-12-合并两个有序数组-No-88" class="headerlink" title="1.2.12 合并两个有序数组(No.88)"></a>1.2.12 合并两个有序数组(No.88)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution88</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify nums1 in-place instead.        """</span>        <span class="token comment"># 正序双指针，额外数组</span>        <span class="token comment"># res = [0] * (m+n)</span>        <span class="token comment"># i,j,k = 0,0,0</span>        <span class="token comment"># while i&lt;m or j&lt;n:</span>        <span class="token comment">#     if j&gt;=n or i&lt;m and nums1[i]&lt;=nums2[j]:</span>        <span class="token comment">#         res[k] = nums1[i]</span>        <span class="token comment">#         i += 1</span>        <span class="token comment">#     elif i&gt;=m or j&lt;n and nums1[i]&gt;nums2[j]:</span>        <span class="token comment">#         res[k] = nums2[j]</span>        <span class="token comment">#         j += 1</span>        <span class="token comment">#     k += 1</span>        <span class="token comment"># for i in range(m+n):</span>        <span class="token comment">#     nums1[i] = res[i]</span>        <span class="token comment"># 逆序双指针</span>        p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>k <span class="token operator">=</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> k <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> p2<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token keyword">or</span> p1<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token keyword">and</span> nums1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token operator">&gt;=</span>nums2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">:</span>                nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span>                p1 <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token comment"># elif p1&lt;0 or p2&gt;=0 and nums1[p1]&lt;nums2[p2]:</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span>                p2 <span class="token operator">-=</span> <span class="token number">1</span>            k <span class="token operator">-=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-13-寻找旋转排序数组中的最小值-No-153"><a href="#1-2-13-寻找旋转排序数组中的最小值-No-153" class="headerlink" title="1.2.13 寻找旋转排序数组中的最小值(No.153)"></a>1.2.13 寻找旋转排序数组中的最小值(No.153)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution153</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 二分法，每次需和右边界比较，不能与左边界比较</span>        left<span class="token punctuation">,</span>right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 最小值在右区间</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 最小值在左区间</span>                right <span class="token operator">=</span> mid        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-14-寻找旋转排序数组中的最小值II-No-154"><a href="#1-2-14-寻找旋转排序数组中的最小值II-No-154" class="headerlink" title="1.2.14 寻找旋转排序数组中的最小值II(No.154)"></a>1.2.14 寻找旋转排序数组中的最小值II(No.154)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution154</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 二分法，考虑重复情况</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 最小值在右区间</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 最小值在左区间</span>                right <span class="token operator">=</span> mid            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>  <span class="token comment"># 相等无法判断，右边界减一缩小区间</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-15-搜索旋转排序数组-No-33"><a href="#1-2-15-搜索旋转排序数组-No-33" class="headerlink" title="1.2.15 搜索旋转排序数组(No.33)"></a>1.2.15 搜索旋转排序数组(No.33)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution33</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 二分法</span>        left<span class="token punctuation">,</span>right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> mid            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># mid 在左区间</span>                <span class="token keyword">if</span> target <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token keyword">and</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># target在[l,mid)</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># mid 在右区间</span>                <span class="token keyword">if</span> target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token keyword">and</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># target在(mid,right]</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-16-搜索旋转排序数组II-No-81"><a href="#1-2-16-搜索旋转排序数组II-No-81" class="headerlink" title="1.2.16 搜索旋转排序数组II(No.81)"></a>1.2.16 搜索旋转排序数组II(No.81)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution81</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token comment"># 二分法</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># mid在左区间</span>                <span class="token keyword">if</span> target <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token keyword">and</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># mid在右区间</span>                <span class="token keyword">if</span> target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token keyword">and</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-17-下一个排列-No-31"><a href="#1-2-17-下一个排列-No-31" class="headerlink" title="1.2.17 下一个排列(No.31)"></a>1.2.17 下一个排列(No.31)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution31</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">nextPermutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify nums in-place instead.        """</span>        <span class="token comment"># 从后向前找到第一个相邻升序对(i,j)，此时[j,end]一定降序</span>        <span class="token comment"># 从后遍历[j,end],找到第一个大于nums[i]的数nums[k],交换nums[i],nums[k]</span>        <span class="token comment"># 将[j,end]升序</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                        <span class="token keyword">break</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> flag<span class="token punctuation">:</span> i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>j<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token operator">+</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-18-合并区间-No-56"><a href="#1-2-18-合并区间-No-56" class="headerlink" title="1.2.18 合并区间(No.56)"></a>1.2.18 合并区间(No.56)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution56</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>intervals<span class="token punctuation">)</span>        <span class="token keyword">if</span> length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> intervals        <span class="token comment"># 按区间左边界排序</span>        intervals <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        left <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># 逐个遍历合并</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            right <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    left <span class="token operator">=</span> <span class="token punctuation">[</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">max</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">)</span>                left <span class="token operator">=</span> right        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-19-删除有序数组中的重复项-No-26"><a href="#1-2-19-删除有序数组中的重复项-No-26" class="headerlink" title="1.2.19 删除有序数组中的重复项(No.26)"></a>1.2.19 删除有序数组中的重复项(No.26)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution26</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> length        <span class="token comment"># 解决这类问题的通用思路：</span>        <span class="token comment"># idx指向要填的位置，可初始化为可以重复的值k，i遍历整个数组</span>        <span class="token comment"># 若nums[i]与idx前k个数都相同，则继续，否则在idx处填入nums[i]，idx++</span>        idx <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> idx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-20-删除有序数组中的重复项II-No-80"><a href="#1-2-20-删除有序数组中的重复项II-No-80" class="headerlink" title="1.2.20 删除有序数组中的重复项II(No.80)"></a>1.2.20 删除有序数组中的重复项II(No.80)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution80</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> length <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> length        idx <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> idx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-典型例题"><a href="#1-3-典型例题" class="headerlink" title="1.3 典型例题"></a>1.3 典型例题</h2><h3 id="1-3-1-寻找两个正序数组的中位数-No-4"><a href="#1-3-1-寻找两个正序数组的中位数-No-4" class="headerlink" title="1.3.1 寻找两个正序数组的中位数(No.4)"></a>1.3.1 寻找两个正序数组的中位数(No.4)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution4</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>        <span class="token comment"># 合并两个正序数组，O(m+n)</span>        <span class="token comment"># def merge_two(nums1,nums2):</span>        <span class="token comment">#     m,n = len(nums1),len(nums2)</span>        <span class="token comment">#     if m==0: return nums2</span>        <span class="token comment">#     if n==0: return nums1</span>        <span class="token comment">#     ans = [0] * (m+n)</span>        <span class="token comment">#     i,j,k = 0,0,0</span>        <span class="token comment">#     while i&lt;m or j&lt;n:</span>        <span class="token comment">#         if j==n:</span>        <span class="token comment">#             ans[k] = nums1[i]</span>        <span class="token comment">#             i += 1</span>        <span class="token comment">#         elif i==m:</span>        <span class="token comment">#             ans[k] = nums2[j]</span>        <span class="token comment">#             j += 1</span>        <span class="token comment">#         elif nums1[i] &lt;= nums2[j]:</span>        <span class="token comment">#             ans[k] = nums1[i]</span>        <span class="token comment">#             i += 1</span>        <span class="token comment">#         elif nums1[i] &gt; nums2[j]:</span>        <span class="token comment">#             ans[k] = nums2[j]</span>        <span class="token comment">#             j += 1</span>        <span class="token comment">#         k += 1</span>        <span class="token comment">#     return ans</span>        <span class="token comment"># merged_nums = merge_two(nums1,nums2)</span>        <span class="token comment"># length = len(merged_nums)</span>        <span class="token comment"># return merged_nums[length//2] if length%2==1 else (merged_nums[length//2]+merged_nums[length//2-1])/2</span>        <span class="token comment"># 二分法，中位数的性质：两边元素个数相同，左边最大值小于右边最小值</span>        <span class="token comment"># nums1为长度较小的数组</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>            nums1<span class="token punctuation">,</span> nums2 <span class="token operator">=</span> nums2<span class="token punctuation">,</span> nums1        m<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span>        <span class="token comment"># 分割线左边元素总数</span>        cnt_left <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token comment"># 在 nums1 的区间 [0, m] 里查找恰当的分割线，</span>        <span class="token comment"># 使得 nums1[i - 1] &lt;= nums2[j] &amp;&amp; nums2[j - 1] &lt;= nums1[i]</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>m        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>  <span class="token comment"># 向上取整</span>            j <span class="token operator">=</span> cnt_left <span class="token operator">-</span> i            <span class="token keyword">if</span> nums1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                right <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> i        i <span class="token operator">=</span> left        j <span class="token operator">=</span> cnt_left <span class="token operator">-</span> i        <span class="token comment"># 处理特殊情况</span>        nums1LeftMax <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> nums1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        nums1RightMin <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">==</span> m <span class="token keyword">else</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        nums2LeftMax <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> nums2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        nums2RightMin <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> j <span class="token operator">==</span> n <span class="token keyword">else</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">+</span>n<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>nums1LeftMax<span class="token punctuation">,</span> nums2LeftMax<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>nums1LeftMax<span class="token punctuation">,</span> nums2LeftMax<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">min</span><span class="token punctuation">(</span>nums1RightMin<span class="token punctuation">,</span> nums2RightMin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-2-缺失的第一个正数-No-41"><a href="#1-3-2-缺失的第一个正数-No-41" class="headerlink" title="1.3.2 缺失的第一个正数(No.41)"></a>1.3.2 缺失的第一个正数(No.41)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution41</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">firstMissingPositive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 原地哈希，未出现的最小正数取值范围为[1,n+1]</span>        <span class="token comment"># 交换，使得下标i对应i+1</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token number">1</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment"># 遍历查找</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i        <span class="token keyword">return</span> n<span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-3-数组中重复的数据-No-442"><a href="#1-3-3-数组中重复的数据-No-442" class="headerlink" title="1.3.3 数组中重复的数据(No.442)"></a>1.3.3 数组中重复的数据(No.442)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution442</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 原地哈希</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-4-找到所有数组中消失的数字-No-448"><a href="#1-3-4-找到所有数组中消失的数字-No-448" class="headerlink" title="1.3.4 找到所有数组中消失的数字(No.448)"></a>1.3.4 找到所有数组中消失的数字(No.448)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution448</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findDisappearedNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 原地哈希</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-5-旋转图像-No-48"><a href="#1-3-5-旋转图像-No-48" class="headerlink" title="1.3.5 旋转图像(No.48)"></a>1.3.5 旋转图像(No.48)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution48</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rotate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify matrix in-place instead.        """</span>        <span class="token comment"># 思路：沿对角线翻转一次，再水平翻转一次</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>        <span class="token comment"># 对角线翻转</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token comment"># 水平翻转</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-6-在排序数组中查找元素的第一个和最后一个位置-No-34"><a href="#1-3-6-在排序数组中查找元素的第一个和最后一个位置-No-34" class="headerlink" title="1.3.6 在排序数组中查找元素的第一个和最后一个位置(No.34)"></a>1.3.6 在排序数组中查找元素的第一个和最后一个位置(No.34)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution34</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchRange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 两次二分法</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        left<span class="token punctuation">,</span>right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token comment"># 找最左边的target</span>        <span class="token keyword">while</span> left<span class="token operator">&lt;</span>right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                right <span class="token operator">=</span> mid            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        l<span class="token punctuation">,</span>r <span class="token operator">=</span> left<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>                <span class="token comment"># 找最右边的target</span>        <span class="token keyword">while</span> l<span class="token operator">&lt;</span>r<span class="token punctuation">:</span>            mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>  <span class="token comment"># 注意需要向上取整</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                l <span class="token operator">=</span> mid            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                r <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span>l<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-7-搜索二维矩阵II-No-240"><a href="#1-3-7-搜索二维矩阵II-No-240" class="headerlink" title="1.3.7 搜索二维矩阵II(No.240)"></a>1.3.7 搜索二维矩阵II(No.240)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution240</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token comment"># 从右上角开始搜索，一步步缩行缩列</span>        m<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>m <span class="token keyword">and</span> j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">elif</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-8-寻找峰值-No-162"><a href="#1-3-8-寻找峰值-No-162" class="headerlink" title="1.3.8 寻找峰值(No.162)"></a>1.3.8 寻找峰值(No.162)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution162</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 二分法，往递增的方向缩进</span>        left<span class="token punctuation">,</span>right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> left<span class="token operator">&lt;</span>right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> mid <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> mid            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">=</span> mid        <span class="token keyword">return</span> left<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-9-在D天内送达包裹的能力-No-1011"><a href="#1-3-9-在D天内送达包裹的能力-No-1011" class="headerlink" title="1.3.9 在D天内送达包裹的能力(No.1011)"></a>1.3.9 在D天内送达包裹的能力(No.1011)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution1011</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">shipWithinDays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> weights<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> days<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 二分法，对最低运载能力二分</span>        <span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span>            need_days <span class="token operator">=</span> <span class="token number">0</span>            sum_weight <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                sum_weight <span class="token operator">+=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">if</span> sum_weight <span class="token operator">&gt;</span> mid<span class="token punctuation">:</span>                    need_days <span class="token operator">+=</span> <span class="token number">1</span>                    sum_weight <span class="token operator">=</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">return</span> need_days<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&gt;</span> days        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>weights<span class="token punctuation">)</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            <span class="token keyword">if</span> check<span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">=</span> mid        <span class="token keyword">return</span> left<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-10-跳跃游戏-No-55"><a href="#1-3-10-跳跃游戏-No-55" class="headerlink" title="1.3.10 跳跃游戏(No.55)"></a>1.3.10 跳跃游戏(No.55)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution55</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canJump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token comment"># 贪心，遍历更新最远距离</span>        max_dis <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> max_dis<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            max_dis <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_dis<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> max_dis <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-11-跳跃游戏II-No-45"><a href="#1-3-11-跳跃游戏II-No-45" class="headerlink" title="1.3.11  跳跃游戏II(No.45)"></a>1.3.11  跳跃游戏II(No.45)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">jump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># [start,end)为遍历的范围</span>        start <span class="token operator">=</span> <span class="token number">0</span>        end <span class="token operator">=</span> <span class="token number">1</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> end <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            max_dis <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>                max_dis <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>max_dis<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            start <span class="token operator">=</span> end            end <span class="token operator">=</span> max_dis <span class="token operator">+</span> <span class="token number">1</span>            res <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-数组总结"><a href="#1-4-数组总结" class="headerlink" title="1.4 数组总结"></a>1.4 数组总结</h2><ul><li>数组最重要的特性: 内存空间是<code>连续</code>的。</li><li>删除或增添元素时，需移动其他元素。</li><li><code>有序</code>数组应尝试<code>二分法</code>。</li><li>双指针法在数组与链表中很常见。</li><li>滑动窗口法是一种较为巧妙的双指针法。</li><li><code>区间定义</code>很重要，确定之后整个程序应保持一致。</li><li>涉及需内部改循环变量的情况，<code>python</code>中用<code>while</code>循环更好。</li><li>模拟类题需重视<code>边界条件</code>。</li></ul><h1 id="2-链表"><a href="#2-链表" class="headerlink" title="2. 链表"></a>2. 链表</h1><h2 id="2-1-基础知识"><a href="#2-1-基础知识" class="headerlink" title="2.1 基础知识"></a>2.1 基础知识</h2><ul><li><strong>定义</strong>: 链表是一种通过指针串联在一起的线性结构，每一个节点是由两部分组成，一个是<code>数据域</code>一个是<code>指针域</code>（存放指向下一个节点的指针），最后一个节点的指针域指向<code>null</code>（即空指针）。</li><li><strong>单链表</strong><br><img src="/2021/04/20/leetcode-note/fig2-1.png" alt="单链表"></li><li><strong>双链表</strong><ul><li>每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点。</li><li>既可以向前查询也可以向后查询。</li></ul></li><li><strong>循环链表</strong><ul><li>链表首尾相连。</li><li>可以用来解决约瑟夫环问题。</li></ul></li><li><strong>存储方式</strong>: 链表中的节点在内存中不是连续分布的，而是散乱分布在内存中的某地址上，分配机制取决于操作系统的内存管理。</li><li><strong>链表节点定义</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>  <span class="token comment">// 节点上存储的元素</span>    ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span>  <span class="token comment">// 指向下一个节点的指针</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 节点的构造函数</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span><span class="token comment"># 双链表</span><span class="token keyword">class</span> <span class="token class-name">ListNodeDouble</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> prev<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>        self<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>删除节点</strong>: 将指向要删除节点的指针指向下一个节点。</li><li><strong>添加节点</strong>: 将插入处前节点指向插入节点，再将插入节点指向插入处后节点。</li><li><strong>性能对比</strong>:<ul><li><code>数组</code>: 插入or删除<code>O(n)</code> | 查询<code>O(1)</code> | 适用于数据量固定、频繁查询、较少增删的场景</li><li><code>链表</code>: 插入or删除<code>O(1)</code> | 查询<code>O(n)</code> | 适用于数据量不固定、频繁增删、较少查询的场景</li></ul></li></ul><h2 id="2-2-典型例题"><a href="#2-2-典型例题" class="headerlink" title="2.2 典型例题"></a>2.2 典型例题</h2><h3 id="2-2-1-移除链表元素-No-203"><a href="#2-2-1-移除链表元素-No-203" class="headerlink" title="2.2.1 移除链表元素(No.203)"></a>2.2.1 移除链表元素(No.203)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给你一个链表的头节点<code>head</code>和一个整数<code>val</code>，请你删除链表中所有满足<code>Node.val == val</code>的节点，并返回新的头节点。</strong><br><br><strong>示例1</strong><br><img src="/2021/04/20/leetcode-note/fig2-2.png"><br>输入: head = [1,2,6,3,4,5,6], val = 6<br>输出: [1,2,3,4,5]<br><strong>示例2</strong><br>输入: head = [ ], val = 1<br>输出: [ ]<br><strong>示例3</strong><br>输入: head = [7,7,7,7], val = 7<br>输出: [ ]</p></blockquote><p><strong>一般方法</strong></p><blockquote><ul><li>一般节点的处理方式很简单，即将指向要删除节点的指针指向下一个节点。</li><li>头结点分开处理，若头结点的值等于目标值，则直接将头指针向后移一位。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.203 移除链表元素 类型：链表</span><span class="token keyword">class</span> <span class="token class-name">Solution203</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------一般方法--------------------</span>    <span class="token keyword">def</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type val: int        :rtype: ListNode        """</span>        <span class="token comment"># 处理头节点</span>        <span class="token keyword">while</span> head <span class="token keyword">and</span> head<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur <span class="token keyword">and</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>  <span class="token comment"># 需要cur不为None，否则cur.next会报错，输入为[]的情形</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> head<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------打印链表--------------------</span>    <span class="token keyword">def</span> <span class="token function">print_list</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> head<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>    <span class="token comment"># No.203</span>    s <span class="token operator">=</span> Solution203<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_4 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>    in_put_3 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span>in_put_4<span class="token punctuation">)</span>    in_put_2 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span>in_put_3<span class="token punctuation">)</span>    head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span>in_put_2<span class="token punctuation">)</span>    val <span class="token operator">=</span> <span class="token number">4</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>removeElements<span class="token punctuation">(</span>head<span class="token punctuation">,</span> val<span class="token punctuation">)</span>    print_list<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>哨兵节点法(伪头)</strong></p><blockquote><p>哨兵节点广泛应用于树和链表中，如伪头、伪尾、标记等，它们是纯功能的，通常不保存任何数据，其主要目的是使链表标准化，如使链表永不为空、永不无头、简化插入和删除。</p><ul><li>这题哨兵节点将被用于<code>伪头</code>。</li><li>由于加了<code>伪头</code>，原来的头结点可以当做普通节点处理。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.203 移除链表元素 类型：链表</span><span class="token keyword">class</span> <span class="token class-name">Solution203</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------哨兵节点法--------------------</span>    <span class="token keyword">def</span> <span class="token function">removeElementsSentinel</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type val: int        :rtype: ListNode        """</span>        sentinel <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>        cur <span class="token operator">=</span> sentinel        <span class="token keyword">while</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>  <span class="token comment"># 不需要cur判断，因为cur取不到None</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> sentinel<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.203</span>    s <span class="token operator">=</span> Solution203<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_4 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>    in_put_3 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span>in_put_4<span class="token punctuation">)</span>    in_put_2 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span>in_put_3<span class="token punctuation">)</span>    head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span>in_put_2<span class="token punctuation">)</span>    val <span class="token operator">=</span> <span class="token number">4</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>removeElementsSentinel<span class="token punctuation">(</span>head<span class="token punctuation">,</span> val<span class="token punctuation">)</span>    print_result<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-2-设计链表-No-707"><a href="#2-2-2-设计链表-No-707" class="headerlink" title="2.2.2 设计链表(No.707)"></a>2.2.2 设计链表(No.707)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性: <code>val</code>和<code>next</code>, <code>val</code>是当前节点的值，<code>next</code>是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性<code>prev</code>以指示链表中的上一个节点。假设链表中的所有节点都是<code>0-index</code>的。</strong><br><strong>在链表类中实现这些功能:</strong></p><ul><li><code>get(index)</code>: 获取链表中第 index 个节点的值。如果索引无效，则返回-1。</li><li><code>addAtHead(val)</code>: 在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。</li><li><code>addAtTail(val)</code>: 将值为 val 的节点追加到链表的最后一个元素。</li><li><code>addAtIndex(index,val)</code>: 在链表中的第&nbsp;index&nbsp;个节点之前添加值为&nbsp;val&nbsp; 的节点。如果&nbsp;index&nbsp;等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。</li><li><code>deleteAtIndex(index)</code>: 如果索引 index 有效，则删除链表中的第 index 个节点。</li></ul><p><br><strong>示例1</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">MyLinkedList linkedList <span class="token operator">=</span> new MyLinkedList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedList<span class="token punctuation">.</span>addAtHead<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedList<span class="token punctuation">.</span>addAtTail<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedList<span class="token punctuation">.</span>addAtIndex<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">//</span>链表变为<span class="token number">1</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">2</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">3</span>linkedList<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">//</span>返回<span class="token number">2</span>linkedList<span class="token punctuation">.</span>deleteAtIndex<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">//</span>现在链表是<span class="token number">1</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">3</span>linkedList<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">//</span>返回<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>单链表</strong></p><blockquote><p>哨兵节点用作伪头在链表操作中十分有用，初始化一个链表需指定<code>size</code>和<code>head(伪头)</code>属性。</p><ul><li>单链表的节点应具备两个属性: <code>val</code>和<code>next</code>。</li><li>增加或删除元素后应记得对<code>size</code>进行同步加减。</li><li>时间复杂度: <ul><li><code>addAtHead</code>: <code>O(1)</code></li><li><code>addAtTail</code>: <code>O(n)</code>, <code>n</code>为链表长度。</li><li><code>addAtIndex</code>, <code>get</code>, <code>deleteAtIndex</code>: <code>O(k)</code>, <code>k</code>为索引。</li></ul></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.707 设计链表 类型：链表</span><span class="token comment"># --------------------单链表法--------------------</span><span class="token keyword">class</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 哨兵节点，用作伪头</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type index: int        :rtype: int        """</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">or</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 索引无效，返回-1</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>head        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> cur<span class="token punctuation">.</span>val    <span class="token keyword">def</span> <span class="token function">addAtHead</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type val: int        :rtype: None        """</span>        old_head <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 原来的头结点</span>        added_head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> added_head  <span class="token comment"># 将哨兵节点指向新头</span>        added_head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> old_head  <span class="token comment"># 将新头指向旧头</span>        self<span class="token punctuation">.</span>size <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 链表长度加1</span>    <span class="token keyword">def</span> <span class="token function">addAtTail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type val: int        :rtype: None        """</span>        tail <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>head        <span class="token comment"># while cur.next:  # 若当前节点指向不为空，则当前节点后移一位，直到最后一个节点</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 利用size信息可以指定移动次数</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> tail  <span class="token comment"># 将最后的节点指向tail</span>        self<span class="token punctuation">.</span>size <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 链表长度加1</span>    <span class="token keyword">def</span> <span class="token function">addAtIndex</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type index: int        :type val: int        :rtype: None        """</span>        <span class="token keyword">if</span> index <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 插入头节点</span>            self<span class="token punctuation">.</span>addAtHead<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token number">0</span> <span class="token operator">&lt;</span> index <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>size<span class="token punctuation">:</span>  <span class="token comment"># 插入中间节点</span>            left <span class="token operator">=</span> self<span class="token punctuation">.</span>head            insert <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 从伪头移动到插入处左节点</span>                left <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token builtin">next</span>            right <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 插入处右节点</span>            left<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> insert  <span class="token comment"># 令左节点指向插入节点</span>            insert<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> right  <span class="token comment"># 插入节点指向右节点</span>            self<span class="token punctuation">.</span>size <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 链表长度加1</span>        <span class="token keyword">elif</span> index <span class="token operator">==</span> self<span class="token punctuation">.</span>size<span class="token punctuation">:</span>  <span class="token comment"># 插入尾节点</span>            self<span class="token punctuation">.</span>addAtTail<span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">deleteAtIndex</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type index: int        :rtype: None        """</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">and</span> index <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 索引有效</span>            left <span class="token operator">=</span> self<span class="token punctuation">.</span>head            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 从伪头移动到删除处左节点</span>                left <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token builtin">next</span>            right <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 删除处右节点</span>            left<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> right  <span class="token comment"># 左节点直接指向右节点</span>            self<span class="token punctuation">.</span>size <span class="token operator">-=</span> <span class="token number">1</span>  <span class="token comment"># 链表长度减1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.707</span>    s <span class="token operator">=</span> MyLinkedList<span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>addAtHead<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>addAtTail<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>addAtIndex<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>deleteAtIndex<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双链表法</strong></p><blockquote><p>双链表与单链表最大的不同之处在于每个节点不仅保存指向下一个节点的指针，也保存了指向前一个节点的指针，因此查询时可以双向。</p><ul><li>双链表具备的属性: <code>val</code>, <code>next</code>, <code>prev</code>。</li><li>效率比单链表高，但占的空间多一些。</li><li>初始化时不仅需要<code>伪头</code>，也需要<code>伪尾</code>。</li><li>时间复杂度: <ul><li><code>addAtHead</code>, <code>addAtTail</code>: <code>O(1)</code></li><li><code>get</code>, <code>addAtIndex</code>, <code>deleteAtIndex</code>: <code>O(min(k, n-k))</code>，<code>k</code>为索引，<code>n</code>为链表长度。</li></ul></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.707 设计链表 类型：链表</span><span class="token comment"># --------------------双链表法--------------------</span><span class="token keyword">class</span> <span class="token class-name">MyLinkedListDouble</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>head<span class="token punctuation">,</span> self<span class="token punctuation">.</span>tail <span class="token operator">=</span> ListNodeDouble<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ListNodeDouble<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 哨兵节点，用作伪头、伪尾</span>        self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>tail        self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> self<span class="token punctuation">.</span>head    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type index: int        :rtype: int        """</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">or</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 索引无效，返回-1</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>size <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>head            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 依次向后查询</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>tail            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 依次向前查询</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>prev        <span class="token keyword">return</span> cur<span class="token punctuation">.</span>val    <span class="token keyword">def</span> <span class="token function">addAtHead</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type val: int        :rtype: None        """</span>        self<span class="token punctuation">.</span>addAtIndex<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">addAtTail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type val: int        :rtype: None        """</span>        self<span class="token punctuation">.</span>addAtIndex<span class="token punctuation">(</span>self<span class="token punctuation">.</span>size<span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">addAtIndex</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type index: int        :type val: int        :rtype: None        """</span>        <span class="token keyword">if</span> index <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>size<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            index <span class="token operator">=</span> <span class="token number">0</span>        insert <span class="token operator">=</span> ListNodeDouble<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>size <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>head            <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 依次向后查询</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            <span class="token comment"># 插入新节点</span>            insert<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> insert            insert<span class="token punctuation">.</span>prev <span class="token operator">=</span> cur            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> insert        <span class="token keyword">else</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> self<span class="token punctuation">.</span>tail            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 依次向前查询</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>prev            <span class="token comment"># 插入新节点</span>            cur<span class="token punctuation">.</span>prev<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> insert            insert<span class="token punctuation">.</span>prev <span class="token operator">=</span> cur<span class="token punctuation">.</span>prev            insert<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur            cur<span class="token punctuation">.</span>prev <span class="token operator">=</span> insert        self<span class="token punctuation">.</span>size <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 链表长度加1</span>    <span class="token keyword">def</span> <span class="token function">deleteAtIndex</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type index: int        :rtype: None        """</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">and</span> index <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 索引有效</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>size <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> self<span class="token punctuation">.</span>head                <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 依次向后查询</span>                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>                <span class="token comment"># 删除节点</span>                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>                cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> cur            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> self<span class="token punctuation">.</span>tail                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 依次向前查询, 注意这里的循环范围与添加节点不一样!!!</span>                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>prev                <span class="token comment"># 删除节点</span>                cur<span class="token punctuation">.</span>prev <span class="token operator">=</span> cur<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>prev                cur<span class="token punctuation">.</span>prev<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur            self<span class="token punctuation">.</span>size <span class="token operator">-=</span> <span class="token number">1</span>  <span class="token comment"># 链表长度减1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.707</span>    s_d <span class="token operator">=</span> MyLinkedListDouble<span class="token punctuation">(</span><span class="token punctuation">)</span>    s_d<span class="token punctuation">.</span>addAtHead<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    s_d<span class="token punctuation">.</span>addAtTail<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    s_d<span class="token punctuation">.</span>addAtIndex<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s_d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s_d<span class="token punctuation">.</span>deleteAtIndex<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s_d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-3-反转链表-No-206"><a href="#2-2-3-反转链表-No-206" class="headerlink" title="2.2.3 反转链表(No.206)"></a>2.2.3 反转链表(No.206)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>反转一个单链表。</strong><br><br><strong>示例:</strong><br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p></blockquote><p><strong>双指针法(迭代)</strong></p><blockquote><p>并不需要定义一个新的链表，可以在原链表上直接修改元素指针的方向。</p><ul><li>定义<code>pre</code>指针，记录前元素，需初始化为<code>None</code>。</li><li>定义<code>cur</code>指针，记录当前元素，循环终止条件为<code>cur is None</code>。</li><li>定义<code>temp</code>指针，记录后元素，因为修改<code>cur</code>指针后无法通过<code>cur</code>来获取后续节点信息。</li><li>直接用<code>head</code>替代<code>cur</code>也行，减少占用空间。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.206 反转链表 类型：链表</span><span class="token keyword">class</span> <span class="token class-name">Solution206</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------双指针法-------------------</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        pre <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># 需初始化为None</span>        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            temp <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 在将当前节点指向前节点之前，需要储存下一节点</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre  <span class="token comment"># 将当前节点反转</span>            <span class="token comment"># 后移一位</span>            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> temp        <span class="token keyword">return</span> pre<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.206</span>    s <span class="token operator">=</span> Solution206<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> MyLinkedList<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        in_put<span class="token punctuation">.</span>addAtTail<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    print_list<span class="token punctuation">(</span>in_put<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>reverseList<span class="token punctuation">(</span>in_put<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>    print_list<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>递归法</strong></p><blockquote><p>递归法更为抽象一些，最重要的是反向过程的设计。</p><ul><li>递归的跳出条件要确定，即当前元素或下一元素为空。</li><li>关键语句<code>head.next.next = head</code>，用来反转，即将当前元素的下一元素指向当前元素。</li><li>一次反转后，链表变为<code>1-&gt;2-&gt;3-&gt;4</code>和<code>None&lt;-4&lt;-5</code>。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(n)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.206 反转链表 类型：链表</span><span class="token keyword">class</span> <span class="token class-name">Solution206</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------递归法-------------------</span>    <span class="token keyword">def</span> <span class="token function">reverseListRecursion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>  <span class="token comment"># 递归跳出条件</span>            <span class="token keyword">return</span> head        new_head <span class="token operator">=</span> self<span class="token punctuation">.</span>reverseListRecursion<span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>        head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head  <span class="token comment"># 反转</span>        head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># 保证反转后链表末尾为None</span>        <span class="token keyword">return</span> new_head<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.206</span>    s <span class="token operator">=</span> Solution206<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> MyLinkedList<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        in_put<span class="token punctuation">.</span>addAtTail<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    print_list<span class="token punctuation">(</span>in_put<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>    result_R <span class="token operator">=</span> s<span class="token punctuation">.</span>reverseListRecursion<span class="token punctuation">(</span>in_put<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>    print_list<span class="token punctuation">(</span>result_R<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-4-删除链表的倒数第N个节点-No-19"><a href="#2-2-4-删除链表的倒数第N个节点-No-19" class="headerlink" title="2.2.4 删除链表的倒数第N个节点(No.19)"></a>2.2.4 删除链表的倒数第N个节点(No.19)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</strong><br><br><strong>示例1</strong><br><img src="/2021/04/20/leetcode-note/fig2-3.png"><br>输入: head = [1,2,3,4,5], n = 2<br>输出: [1,2,3,5]<br><strong>示例2</strong><br>输入: head = [1], n = 1<br>输出: []<br><strong>示例3</strong><br>输入: head = [1,2], n = 1<br>输出: [1]</p></blockquote><p><strong>一般方法</strong></p><blockquote><p>最容易想到的方法是先遍历一遍链表获得链表长度，然后就能确定需删除元素的索引，再遍历至对应位置进行删除操作即可。</p><ul><li>添加哨兵节点，可以将头节点一般化。</li><li>时间复杂度: <code>O(L)</code>, <code>L</code>为链表长度。</li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.19 删除链表的倒数第N个节点 类型：链表</span><span class="token keyword">class</span> <span class="token class-name">Solution19</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------一般方法-------------------</span>    <span class="token keyword">def</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type n: int        :rtype: ListNode        """</span>        <span class="token comment"># 获取链表长度</span>        cur <span class="token operator">=</span> head        size <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            size <span class="token operator">+=</span> <span class="token number">1</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        n <span class="token operator">=</span> size <span class="token operator">-</span> n  <span class="token comment"># 顺序索引, n取值范围为[0, size-1]</span>        <span class="token comment"># 删除索引为n的节点</span>        sentinel <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 伪头</span>        sentinel<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head        left <span class="token operator">=</span> sentinel        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 后移至索引节点前一个</span>            left <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token builtin">next</span>        left<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 删除节点</span>        <span class="token keyword">return</span> sentinel<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.19</span>    s <span class="token operator">=</span> Solution19<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> MyLinkedList<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        in_put<span class="token punctuation">.</span>addAtTail<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    print_list<span class="token punctuation">(</span>in_put<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>removeNthFromEnd<span class="token punctuation">(</span>in_put<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    print_list<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双指针法</strong></p><blockquote><p>相比于一般方法，双指针法只需遍历一遍。</p><ul><li>初始化快指针指向<code>head</code>，慢指针指向伪头。</li><li>核心思想是假设快指针指向的节点就是要删除的节点，那么快指针往后移动<code>n-1</code>步就到链表末尾了。</li><li>若快指针移动<code>n-1</code>步没到末尾，则快慢指针同步移动，直至末尾，此时慢指针指向的就是待删除节点的前一节点。</li><li>时间复杂度: <code>O(L)</code>, <code>L</code>为链表长度。</li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.19 删除链表的倒数第N个节点 类型：链表</span><span class="token keyword">class</span> <span class="token class-name">Solution19</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------双指针法-------------------</span>    <span class="token keyword">def</span> <span class="token function">removeNthFromEndDouble</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type n: int        :rtype: ListNode        """</span>        sentinel <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 伪头</span>        sentinel<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head        slow <span class="token operator">=</span> sentinel        fast <span class="token operator">=</span> head        count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 让快指针先走n-1步，之后再同步走</span>        <span class="token keyword">while</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> count <span class="token operator">&gt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>        slow<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 删除节点</span>        <span class="token keyword">return</span> sentinel<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.19</span>    s <span class="token operator">=</span> Solution19<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> MyLinkedList<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        in_put<span class="token punctuation">.</span>addAtTail<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    print_list<span class="token punctuation">(</span>in_put<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>    result_D <span class="token operator">=</span> s<span class="token punctuation">.</span>removeNthFromEndDouble<span class="token punctuation">(</span>in_put<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    print_list<span class="token punctuation">(</span>result_D<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-5-环形链表II-No-142"><a href="#2-2-5-环形链表II-No-142" class="headerlink" title="2.2.5 环形链表II(No.142)"></a>2.2.5 环形链表II(No.142)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给定一个链表，返回链表开始入环的第一个节点。如果链表无环，则返回<code>null</code>。为了表示给定链表中的环，我们使用整数<code>pos</code>来表示链表尾连接到链表中的位置（索引从<code>0</code>开始）。如果<code>pos</code>是<code>-1</code>，则在该链表中没有环。注意，<code>pos</code>仅仅是用于标识环的情况，并不会作为参数传递到函数中。不允许修改给定的链表。</strong><br><br><strong>示例</strong><br><img src="/2021/04/20/leetcode-note/fig2-4.png"><br>输入: head = [3,2,0,-4], pos = 1<br>输出: 返回索引为 1 的链表节点<br>解释: 链表中有一个环，其尾部连接到第二个节点。</p></blockquote><p><strong>双指针法</strong></p><blockquote><p>可以将该题分为两个部分，第一部分为判断是否有环，第二部分为确定入环节点。</p><ul><li>定义快慢两个指针，慢指针每次移一步，快指针每次移两步。</li><li>如果有环，则快指针一定能追上慢指针。</li><li>确定入环节点比较巧妙，需要一定的数学计算。相遇时，慢指针走了<code>a+b</code>，快指针走了<code>a+b+n(b+c)</code>，由于快指针速度是慢指针两倍，则有等式<code>2(a+b)=a+b+n(b+c)</code>，解得<code>a=c+(n-1)(b+c)</code></li><li>即从相遇点到入环点的距离加上<code>n-1</code>环长等于从链表头到入环点的距离。因此令快指针重新指向<code>head</code>，然后和慢指针同步向后每次移一位，它们最终在入环节点处相遇。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(1)</code><br><img src="/2021/04/20/leetcode-note/fig2-5.png"></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.142 环形链表II 类型：链表</span><span class="token keyword">class</span> <span class="token class-name">Solution142</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------双指针法-------------------</span>    <span class="token keyword">def</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token comment"># 初始化快慢指针</span>        fast <span class="token operator">=</span> head        slow <span class="token operator">=</span> head        <span class="token keyword">while</span> fast<span class="token punctuation">:</span>            <span class="token comment"># 无环则直接返回</span>            <span class="token keyword">if</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 慢指针移一步</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 快指针移两步</span>            <span class="token keyword">if</span> fast <span class="token operator">==</span> slow<span class="token punctuation">:</span>  <span class="token comment"># 若快指针追上慢指针，则一定有环</span>                fast <span class="token operator">=</span> head  <span class="token comment"># 将快指针指向head</span>                <span class="token comment"># 快慢指针同步移动，相遇处即入环节点</span>                <span class="token keyword">while</span> fast <span class="token operator">!=</span> slow<span class="token punctuation">:</span>                    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span>                    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>                <span class="token keyword">return</span> slow<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.142</span>    s <span class="token operator">=</span> Solution142<span class="token punctuation">(</span><span class="token punctuation">)</span>    node_1 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    node_2 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    node_3 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    node_4 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>    node_1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node_2    node_2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node_3    node_3<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node_4    node_4<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node_2    result <span class="token operator">=</span> s<span class="token punctuation">.</span>detectCycle<span class="token punctuation">(</span>node_1<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-6-链表中倒数第k个节点-No-JZ22"><a href="#2-2-6-链表中倒数第k个节点-No-JZ22" class="headerlink" title="2.2.6 链表中倒数第k个节点(No.JZ22)"></a>2.2.6 链表中倒数第k个节点(No.JZ22)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ22</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type k: int        :rtype: ListNode        """</span>        l <span class="token operator">=</span> <span class="token number">0</span>        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            l <span class="token operator">+=</span> <span class="token number">1</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        k <span class="token operator">=</span> l <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span>        res <span class="token operator">=</span> head        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-7-从尾到头打印链表-No-JZ6"><a href="#2-2-7-从尾到头打印链表-No-JZ6" class="headerlink" title="2.2.7 从尾到头打印链表(No.JZ6)"></a>2.2.7 从尾到头打印链表(No.JZ6)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ6</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reversePrint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: List[int]        """</span>        <span class="token comment"># 辅助栈</span>        <span class="token comment"># temp = []</span>        <span class="token comment"># while head:</span>        <span class="token comment">#     temp.append(head.val)</span>        <span class="token comment">#     head = head.next</span>        <span class="token comment"># res = []</span>        <span class="token comment"># while temp:</span>        <span class="token comment">#     res.append(temp.pop())</span>        <span class="token comment"># return res</span>        <span class="token comment"># 递归</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> recur<span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>head<span class="token punctuation">.</span>val<span class="token punctuation">]</span>        <span class="token keyword">return</span> recur<span class="token punctuation">(</span>head<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-8-两数相加-No-2"><a href="#2-2-8-两数相加-No-2" class="headerlink" title="2.2.8 两数相加(No.2)"></a>2.2.8 两数相加(No.2)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution2</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type l1: ListNode        :type l2: ListNode        :rtype: ListNode        """</span>        res <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        cur <span class="token operator">=</span> res        temp <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            cur<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">+</span> l2<span class="token punctuation">.</span>val <span class="token operator">+</span> temp<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>            temp <span class="token operator">=</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">+</span> l2<span class="token punctuation">.</span>val <span class="token operator">+</span> temp<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">10</span>                        <span class="token keyword">if</span> <span class="token keyword">not</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> <span class="token keyword">not</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>                l1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>                l2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token comment"># 最后还有进位的话需要补一位</span>        <span class="token keyword">if</span> temp<span class="token punctuation">:</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-9-合并两个排序的链表-No-JZ25"><a href="#2-2-9-合并两个排序的链表-No-JZ25" class="headerlink" title="2.2.9 合并两个排序的链表(No.JZ25)"></a>2.2.9 合并两个排序的链表(No.JZ25)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ25</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type l1: ListNode        :type l2: ListNode        :rtype: ListNode        """</span>        <span class="token comment"># 哨兵节点</span>        <span class="token comment"># sen = ListNode(0)</span>        <span class="token comment"># cur = sen</span>        <span class="token comment"># while l1 and l2:</span>        <span class="token comment">#     if l1.val &lt;= l2.val:</span>        <span class="token comment">#         cur.next = l1</span>        <span class="token comment">#         l1 = l1.next</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         cur.next = l2</span>        <span class="token comment">#         l2 = l2.next</span>        <span class="token comment">#     cur = cur.next            </span>        <span class="token comment"># cur.next = l1 if l1 else l2</span>        <span class="token comment"># return sen.next</span>        <span class="token comment"># 递归</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> l1<span class="token punctuation">:</span> <span class="token keyword">return</span> l2        <span class="token keyword">if</span> <span class="token keyword">not</span> l2<span class="token punctuation">:</span> <span class="token keyword">return</span> l1        <span class="token keyword">if</span> l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            l1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span>  self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> l2<span class="token punctuation">)</span>            <span class="token keyword">return</span> l1        <span class="token keyword">else</span><span class="token punctuation">:</span>            l2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeTwoLists<span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> l2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-10-K-个一组翻转链表-No-25"><a href="#2-2-10-K-个一组翻转链表-No-25" class="headerlink" title="2.2.10 K 个一组翻转链表(No.25)"></a>2.2.10 K 个一组翻转链表(No.25)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution25</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>            pre <span class="token operator">=</span> <span class="token boolean">None</span>            cur <span class="token operator">=</span> head            <span class="token keyword">while</span> cur<span class="token punctuation">:</span>                post <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre                pre <span class="token operator">=</span> cur                cur <span class="token operator">=</span> post            <span class="token keyword">return</span> pre        <span class="token comment"># 哨兵节点，拆开--》翻转--》连接</span>        sen <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        sen<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head        pre<span class="token punctuation">,</span>end <span class="token operator">=</span> sen<span class="token punctuation">,</span>sen        <span class="token keyword">while</span> end<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> end<span class="token punctuation">:</span>                    end <span class="token operator">=</span> end<span class="token punctuation">.</span><span class="token builtin">next</span>                <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">break</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> end<span class="token punctuation">:</span> <span class="token keyword">break</span>            post <span class="token operator">=</span> end<span class="token punctuation">.</span><span class="token builtin">next</span>            start <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token builtin">next</span>            end<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>            pre<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> reverse<span class="token punctuation">(</span>start<span class="token punctuation">)</span>            start<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> post            pre <span class="token operator">=</span> start            end <span class="token operator">=</span> pre        <span class="token keyword">return</span> sen<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-11-两个链表的第一个公共节点-No-JZ52"><a href="#2-2-11-两个链表的第一个公共节点-No-JZ52" class="headerlink" title="2.2.11 两个链表的第一个公共节点(No.JZ52)"></a>2.2.11 两个链表的第一个公共节点(No.JZ52)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ52</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> headA<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> headB<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token comment"># 暴力法超时O(N^2)</span>        <span class="token comment"># a,b = headA,headB</span>        <span class="token comment"># while a:</span>        <span class="token comment">#     while b:</span>        <span class="token comment">#         if a == b:</span>        <span class="token comment">#             return a</span>        <span class="token comment">#         b = b.next</span>        <span class="token comment">#     a = a.next</span>        <span class="token comment">#     b = headB</span>        <span class="token comment"># return </span>        <span class="token comment"># 哈希表</span>        <span class="token comment"># dic = set()</span>        <span class="token comment"># a,b = headA,headB</span>        <span class="token comment"># while a:</span>        <span class="token comment">#     if not a in dic:</span>        <span class="token comment">#         dic.add(a)</span>        <span class="token comment">#     a = a.next</span>        <span class="token comment"># while b:</span>        <span class="token comment">#     if b in dic:</span>        <span class="token comment">#         return b</span>        <span class="token comment">#     b = b.next</span>        <span class="token comment"># return</span>        <span class="token comment"># 双指针循环遍历,走的路为重复长度加各自独立长度</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> headA <span class="token keyword">or</span> <span class="token keyword">not</span> headB<span class="token punctuation">:</span>            <span class="token keyword">return</span>        a<span class="token punctuation">,</span>b <span class="token operator">=</span> headA<span class="token punctuation">,</span>headB        <span class="token keyword">while</span> a <span class="token keyword">or</span> b<span class="token punctuation">:</span>            <span class="token keyword">if</span> a <span class="token operator">==</span> b<span class="token punctuation">:</span>                <span class="token keyword">return</span> a                a <span class="token operator">=</span> headB <span class="token keyword">if</span> <span class="token keyword">not</span> a <span class="token keyword">else</span> a<span class="token punctuation">.</span><span class="token builtin">next</span>            b <span class="token operator">=</span> headA <span class="token keyword">if</span> <span class="token keyword">not</span> b <span class="token keyword">else</span> b<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-12-LRU-缓存机制-No-146"><a href="#2-2-12-LRU-缓存机制-No-146" class="headerlink" title="2.2.12 LRU 缓存机制(No.146)"></a>2.2.12 LRU 缓存机制(No.146)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>pre<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>nex<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>key <span class="token operator">=</span> key        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val        self<span class="token punctuation">.</span>pre <span class="token operator">=</span> pre        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nex<span class="token keyword">class</span> <span class="token class-name">DoubleList</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>size <span class="token operator">=</span> size        <span class="token comment"># 伪头，伪尾</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tail <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>pre <span class="token operator">=</span> self<span class="token punctuation">.</span>tail<span class="token punctuation">,</span> self<span class="token punctuation">.</span>head    <span class="token comment"># 加入头结点</span>    <span class="token keyword">def</span> <span class="token function">addfirst</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span>        self<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> node        node<span class="token punctuation">.</span>pre <span class="token operator">=</span> self<span class="token punctuation">.</span>head        node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> temp        temp<span class="token punctuation">.</span>pre <span class="token operator">=</span> node        self<span class="token punctuation">.</span>size <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 删除某个节点</span>    <span class="token keyword">def</span> <span class="token function">remove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>        pre<span class="token punctuation">,</span>nex <span class="token operator">=</span> node<span class="token punctuation">.</span>pre<span class="token punctuation">,</span>node<span class="token punctuation">.</span><span class="token builtin">next</span>        pre<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span>nex<span class="token punctuation">.</span>pre <span class="token operator">=</span> nex<span class="token punctuation">,</span>pre        self<span class="token punctuation">.</span>size <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token comment"># 删除尾部节点，并返回该节点</span>    <span class="token keyword">def</span> <span class="token function">removelast</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        node <span class="token operator">=</span> self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>pre        node<span class="token punctuation">.</span>pre<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>pre <span class="token operator">=</span> self<span class="token punctuation">.</span>tail<span class="token punctuation">,</span>node<span class="token punctuation">.</span>pre        self<span class="token punctuation">.</span>size <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> node<span class="token keyword">class</span> <span class="token class-name">LRUCache</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity        self<span class="token punctuation">.</span>dic <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cache <span class="token operator">=</span> DoubleList<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> key <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>dic<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            node <span class="token operator">=</span> self<span class="token punctuation">.</span>dic<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>addfirst<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>val    <span class="token keyword">def</span> <span class="token function">put</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>dic<span class="token punctuation">:</span>            node <span class="token operator">=</span> self<span class="token punctuation">.</span>dic<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            node<span class="token punctuation">.</span>val <span class="token operator">=</span> value            self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>addfirst<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> self<span class="token punctuation">.</span>capacity<span class="token punctuation">:</span>                last_node <span class="token operator">=</span> self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>removelast<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>dic<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>last_node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>            node <span class="token operator">=</span> Node<span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>addfirst<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>dic<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-13-反转链表II-No-92"><a href="#2-2-13-反转链表II-No-92" class="headerlink" title="2.2.13 反转链表II(No.92)"></a>2.2.13 反转链表II(No.92)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution92</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> left<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> right<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token comment"># 头插法, start为开始翻转的前一个节点</span>        sen <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        sen<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head        start<span class="token punctuation">,</span>cur <span class="token operator">=</span> sen<span class="token punctuation">,</span>head        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            start <span class="token operator">=</span> cur            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        temp <span class="token operator">=</span> cur        <span class="token comment"># 不断地将cur后面的节点删除并加入到start后边</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">:</span>            nex <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># 删除节点</span>            start<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> nex            nex<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> temp            temp <span class="token operator">=</span> nex        <span class="token keyword">return</span> sen<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-14-合并K个升序链表-No-23"><a href="#2-2-14-合并K个升序链表-No-23" class="headerlink" title="2.2.14 合并K个升序链表(No.23)"></a>2.2.14 合并K个升序链表(No.23)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution23</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lists<span class="token punctuation">:</span> List<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token comment"># 两两合并</span>        <span class="token keyword">def</span> <span class="token function">mergetwo</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> l1<span class="token punctuation">:</span> <span class="token keyword">return</span> l2            <span class="token keyword">if</span> <span class="token keyword">not</span> l2<span class="token punctuation">:</span> <span class="token keyword">return</span> l1            <span class="token keyword">if</span> l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                l1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> mergetwo<span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> l2<span class="token punctuation">)</span>                <span class="token keyword">return</span> l1            <span class="token keyword">else</span><span class="token punctuation">:</span>                l2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> mergetwo<span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> l2        <span class="token keyword">if</span> <span class="token keyword">not</span> lists<span class="token punctuation">:</span> <span class="token keyword">return</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span>        l1 <span class="token operator">=</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            l2 <span class="token operator">=</span> lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            l1 <span class="token operator">=</span> mergetwo<span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">)</span>        <span class="token keyword">return</span> l1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-15-重排链表-No-143"><a href="#2-2-15-重排链表-No-143" class="headerlink" title="2.2.15 重排链表(No.143)"></a>2.2.15 重排链表(No.143)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution143</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reorderList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify head in-place instead.        """</span>        <span class="token keyword">def</span> <span class="token function">my_reverse</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>            pre <span class="token operator">=</span> <span class="token boolean">None</span>            cur <span class="token operator">=</span> l            <span class="token keyword">while</span> cur<span class="token punctuation">:</span>                temp <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre                pre <span class="token operator">=</span> cur                cur <span class="token operator">=</span> temp            <span class="token keyword">return</span> pre        length<span class="token punctuation">,</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            length <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> length <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment"># 找到分割节点</span>        n1 <span class="token operator">=</span> length <span class="token operator">//</span> <span class="token number">2</span>        cur <span class="token operator">=</span> head        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">:</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token comment"># 把链表分为两部分l1,l2，并将l2翻转</span>        l2 <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        l2 <span class="token operator">=</span> my_reverse<span class="token punctuation">(</span>l2<span class="token punctuation">)</span>        cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>        l1 <span class="token operator">=</span> head        <span class="token keyword">while</span> l2<span class="token punctuation">:</span>            temp1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>            l1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> l2            temp2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>            l2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> temp1            l1 <span class="token operator">=</span> temp1            l2 <span class="token operator">=</span> temp2        <span class="token keyword">return</span> head<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-典型例题"><a href="#2-3-典型例题" class="headerlink" title="2.3 典型例题"></a>2.3 典型例题</h2><h3 id="2-3-1-排序链表-No-148"><a href="#2-3-1-排序链表-No-148" class="headerlink" title="2.3.1 排序链表(No.148)"></a>2.3.1 排序链表(No.148)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution148</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>        <span class="token comment"># 暴力法</span>        <span class="token comment"># vals = []</span>        <span class="token comment"># cur = head</span>        <span class="token comment"># while cur:</span>        <span class="token comment">#     vals.append(cur.val)</span>        <span class="token comment">#     cur = cur.next</span>        <span class="token comment"># vals = sorted(vals)</span>        <span class="token comment"># cur = head</span>        <span class="token comment"># i = 0</span>        <span class="token comment"># while cur:</span>        <span class="token comment">#     cur.val = vals[i]</span>        <span class="token comment">#     i += 1</span>        <span class="token comment">#     cur = cur.next</span>        <span class="token comment"># return head</span>        <span class="token comment"># 归并排序(递归)</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> head            <span class="token comment"># 快慢指针找到链表中点</span>            slow<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> head            <span class="token keyword">while</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>                slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>                fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>            right_head <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>            slow<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># 截断</span>            left <span class="token operator">=</span> recur<span class="token punctuation">(</span>head<span class="token punctuation">)</span>            right <span class="token operator">=</span> recur<span class="token punctuation">(</span>right_head<span class="token punctuation">)</span>            <span class="token comment"># merge</span>            cur <span class="token operator">=</span> sen <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 辅助节点</span>            <span class="token keyword">while</span> left <span class="token keyword">and</span> right<span class="token punctuation">:</span>                <span class="token keyword">if</span> left<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> right<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                    cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> left                    left <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token builtin">next</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> right                    right <span class="token operator">=</span> right<span class="token punctuation">.</span><span class="token builtin">next</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> left <span class="token keyword">if</span> left <span class="token keyword">else</span> right            <span class="token keyword">return</span> sen<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> recur<span class="token punctuation">(</span>head<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-2-回文链表-No-234"><a href="#2-3-2-回文链表-No-234" class="headerlink" title="2.3.2 回文链表(No.234)"></a>2.3.2 回文链表(No.234)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token comment"># O(n)时间复杂度 O(1)空间复杂度 翻转链表</span>        <span class="token comment"># 找到中间节点</span>        <span class="token keyword">def</span> <span class="token function">my_reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">:</span>            pre <span class="token operator">=</span> <span class="token boolean">None</span>            cur <span class="token operator">=</span> head            <span class="token keyword">while</span> cur<span class="token punctuation">:</span>                temp <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>                cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre                pre <span class="token operator">=</span> cur                cur <span class="token operator">=</span> temp            <span class="token keyword">return</span> pre        slow<span class="token punctuation">,</span>fast <span class="token operator">=</span> head<span class="token punctuation">,</span>head        <span class="token keyword">while</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token comment"># 翻转后半部分链表</span>        post <span class="token operator">=</span> my_reverse<span class="token punctuation">(</span>slow<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span>        p1<span class="token punctuation">,</span>p2 <span class="token operator">=</span> head<span class="token punctuation">,</span>post        <span class="token keyword">while</span> p2<span class="token punctuation">:</span>            <span class="token keyword">if</span> p1<span class="token punctuation">.</span>val <span class="token operator">!=</span> p2<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token builtin">next</span>            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-链表总结"><a href="#2-4-链表总结" class="headerlink" title="2.4 链表总结"></a>2.4 链表总结</h2><ul><li>类型: 单链表、双链表、循环链表。</li><li>存储方式: 离散，通过指针连在一起。</li><li>性能: 查询慢，插入/删除快。</li><li>涉及头节点需要额外处理的，使用哨兵节点当做伪头十分有效。</li><li>反转链表经常考察，要掌握迭代和递归法。</li><li>循环链表应考虑双指针法。</li></ul><h1 id="3-哈希表"><a href="#3-哈希表" class="headerlink" title="3. 哈希表"></a>3. 哈希表</h1><h2 id="3-1-基础知识"><a href="#3-1-基础知识" class="headerlink" title="3.1 基础知识"></a>3.1 基础知识</h2><ul><li><strong>定义</strong>: 哈希表(Hash table)是根据<code>关键码</code>的值而直接进行访问的数据结构。</li><li>数组就是一张哈希表。</li><li>哈希表一般都是用于快速判断一个元素是否出现在集合里。</li><li><strong>哈希函数</strong>: 通过<code>hashcode</code>将其他数据格式转化为不同的数值，再进行取模，就能得到哈希表的索引。</li><li><strong>哈希碰撞</strong>: 若输入大小大于哈希表的大小，则会出现多对一的现象，即多个输入对应哈希表的同一个位置。一般解决方法有二: <ul><li><strong>拉链法</strong>: 将发生冲突的元素存储在链表中。</li><li><strong>线性探测法</strong>: 该方法要求<code>tablesize</code>大于<code>datasize</code>，依靠哈希表中的空位来解决碰撞问题。</li></ul></li><li>常见的三种哈希结构: <code>数组</code>、<code>set(集合)</code>、<code>map(映射)</code></li></ul><h2 id="3-2-典型例题"><a href="#3-2-典型例题" class="headerlink" title="3.2 典型例题"></a>3.2 典型例题</h2><h3 id="3-2-1-有效的字母异位词-No-242"><a href="#3-2-1-有效的字母异位词-No-242" class="headerlink" title="3.2.1 有效的字母异位词(No.242)"></a>3.2.1 有效的字母异位词(No.242)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给定两个字符串<code>s</code>和<code>t</code>，编写一个函数来判断<code>t</code>是否是<code>s</code>的字母异位词。你可以假设字符串只包含小写字母。</strong><br><br><strong>示例1</strong><br>输入: s = “anagram”, t = “nagaram”<br>输出: true<br><strong>示例2</strong><br>输入: s = “rat”, t = “car”<br>输出: false</p></blockquote><p><strong>排序法</strong></p><blockquote><p>两个字符串互为异位词等价于<code>两个字符串排序后相等</code>。</p><ul><li>若字符串长度不等，直接返回<code>False</code></li><li>分别对字符串<code>s</code>和<code>t</code>进行排序。</li><li>排序后相等则返回<code>True</code>否则返回<code>False</code>。</li><li>时间复杂度: <code>O(nlogn)</code>，排序为<code>O(nlogn)</code>，比较是否相等为<code>O(n)</code></li><li>空间复杂度: <code>O(logn)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.242 有效的字母异位词 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution242</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------排序法--------------------</span>    <span class="token keyword">def</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :type t: str        :rtype: bool        """</span>        <span class="token comment"># 若字符串长度不等，则直接返回False</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token comment"># 排序</span>        s <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        t <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">return</span> s <span class="token operator">==</span> t<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.242</span>    s <span class="token operator">=</span> Solution242<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put1 <span class="token operator">=</span> <span class="token string">'anagram'</span>    in_put2 <span class="token operator">=</span> <span class="token string">'nagaram'</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>isAnagram<span class="token punctuation">(</span>in_put1<span class="token punctuation">,</span> in_put2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>哈希表</strong></p><blockquote><p>若只考虑26个小写字母，则可以创建一个数组来记录每个字符出现的频次。若考虑<code>unicode</code>字符，则使用哈希表(<code>python</code>中用<code>dict</code>即可)。</p><ul><li>若字符串长度不等，直接返回<code>False</code>。</li><li>遍历第一个字符串，记录字符频次。</li><li>遍历第二个字符串，减去对应的频次。若数组元素出现负数，则返回<code>False</code>。</li><li><code>python</code>中获取单个字符编码: <code>ord()</code></li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(S)</code>，<code>S=26</code>为字符集大小。</li><li>若利用<code>python</code>内置模块，则一句代码搞定: <code>return collections.Counter(s) == collections.Counter(t)</code>，需<code>import collections</code>。</li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.242 有效的字母异位词 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution242</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------哈希表(数组)--------------------</span>    <span class="token keyword">def</span> <span class="token function">isAnagramArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :type t: str        :rtype: bool        """</span>        <span class="token comment"># 若字符串长度不等，则直接返回False</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">26</span>  <span class="token comment"># 初始化大小为26的table</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            temp<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> t<span class="token punctuation">:</span>            temp<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> temp<span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token comment"># --------------------哈希表(字典)--------------------</span>    <span class="token keyword">def</span> <span class="token function">isAnagramArrayDict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :type t: str        :rtype: bool        """</span>        <span class="token comment"># 若字符串长度不等，则直接返回False</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        temp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> temp<span class="token punctuation">:</span>                temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> t<span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token keyword">not</span> <span class="token keyword">in</span> temp<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.242</span>    s <span class="token operator">=</span> Solution242<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put1 <span class="token operator">=</span> <span class="token string">'an#gram'</span>    in_put2 <span class="token operator">=</span> <span class="token string">'nagaram'</span>    result_A <span class="token operator">=</span> s<span class="token punctuation">.</span>isAnagramArray<span class="token punctuation">(</span>in_put1<span class="token punctuation">,</span> in_put2<span class="token punctuation">)</span>    result_D <span class="token operator">=</span> s<span class="token punctuation">.</span>isAnagramArrayDict<span class="token punctuation">(</span>in_put1<span class="token punctuation">,</span> in_put2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result_A<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result_D<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-2-两个数组的交集-No-349"><a href="#3-2-2-两个数组的交集-No-349" class="headerlink" title="3.2.2 两个数组的交集(No.349)"></a>3.2.2 两个数组的交集(No.349)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给定两个数组，编写一个函数来计算它们的交集。</strong><br><br><strong>示例1</strong><br>输入: nums1 = [1,2,2,1], nums2 = [2,2]<br>输出: [2]<br><strong>示例2</strong><br>输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>输出: [9,4]</p></blockquote><p><strong>暴力解法</strong></p><blockquote><p>遍历数组1，对其每个元素判断是否在数组2中。</p><ul><li>时间复杂度: <code>O(mn)</code>，<code>m</code>、<code>n</code>分别为数组1、数组2大小。</li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.349 两个数组的交集 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution349</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------暴力解法--------------------</span>    <span class="token keyword">def</span> <span class="token function">intersection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums1: List[int]        :type nums2: List[int]        :rtype: List[int]        """</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 遍历数组1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums1<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> nums2 <span class="token keyword">and</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> result<span class="token punctuation">:</span>  <span class="token comment"># 若i在数组2中且不在result列表中，则将其加入至result</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.349</span>    s <span class="token operator">=</span> Solution349<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    in_put2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>in_put1<span class="token punctuation">,</span> in_put2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>哈希表</strong></p><blockquote><p>如果使用哈希集合存储元素，则可以在<code>O(1)</code>的时间内判断一个元素是否在集合中，从而降低时间复杂度。</p><ul><li><code>python</code>中使用<code>set()</code>即可构建哈希集合。</li><li>对较短的哈希集合进行遍历，判断其元素是否在较长的哈希集合中。</li><li>时间复杂度: <code>O(m+n)</code></li><li>空间复杂度: <code>O(m+n)</code></li><li>空间换时间。</li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.349 两个数组的交集 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution349</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------哈希表法--------------------</span>    <span class="token keyword">def</span> <span class="token function">intersectionHash</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums1: List[int]        :type nums2: List[int]        :rtype: List[int]        """</span>        <span class="token comment"># 转化为哈希集合</span>        set1 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span>        set2 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span>        <span class="token comment"># 遍历较短的哈希集合</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> set1 <span class="token keyword">if</span> x <span class="token keyword">in</span> set2<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> set2 <span class="token keyword">if</span> x <span class="token keyword">in</span> set1<span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.349</span>    s <span class="token operator">=</span> Solution349<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    in_put2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    result_H <span class="token operator">=</span> s<span class="token punctuation">.</span>intersectionHash<span class="token punctuation">(</span>in_put1<span class="token punctuation">,</span> in_put2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result_H<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-3-快乐数-No-202"><a href="#3-2-3-快乐数-No-202" class="headerlink" title="3.2.3 快乐数(No.202)"></a>3.2.3 快乐数(No.202)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>编写一个算法来判断一个数<code>n</code>是不是快乐数。「快乐数」定义为:</strong></p><ul><li><strong>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</strong></li><li><strong>然后重复这个过程直到这个数变为<code>1</code>，也可能是<code>无限循环</code>但始终变不到<code>1</code>。</strong></li><li><strong>如果可以变为<code>1</code>，那么这个数就是快乐数。</strong></li></ul><p><br><strong>示例1</strong><br>输入: 19<br>输出: true<br>解释:<br>1^2 + 9^2 = 82<br>8^2 + 2^2 = 68<br>6^2 + 8^2 = 100<br>1^2 + 0^2 + 0^2 = 1<br><strong>示例2</strong><br>输入: n = 2<br>输出: false</p></blockquote><p><strong>哈希集合</strong></p><blockquote><p>该问题可分为两个部分，第一部分为获取下一个数，第二部分为判断是否循环。</p><ul><li>取数的各个位思路: 将数对<code>10</code>取余即得最后一位，再将数对<code>10</code>整除，循环直至<code>n//10 = 0</code>。也可考虑将数转为字符串遍历。</li><li>判断是否循环思路: 涉及多次判断一个数是否在集合里，应使用哈希表。</li><li>时间复杂度: <code>O(logn)</code>，获取下一个数的时间占主导。</li><li>空间复杂度: <code>O(logn)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.202 快乐数 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution202</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------哈希表(哈希集合)法--------------------</span>    <span class="token keyword">def</span> <span class="token function">isHappy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :rtype: bool        """</span>        log <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token punctuation">}</span>  <span class="token comment"># 初始化哈希集合</span>        <span class="token keyword">while</span> n <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>            new_n <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> temp<span class="token punctuation">:</span>  <span class="token comment"># 获取下一个数</span>                new_n <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>            <span class="token comment"># 判断是否循环</span>            <span class="token keyword">if</span> new_n <span class="token keyword">in</span> log<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            log<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_n<span class="token punctuation">)</span>            n <span class="token operator">=</span> new_n        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.202</span>    s <span class="token operator">=</span> Solution202<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> <span class="token number">19</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>isHappy<span class="token punctuation">(</span>in_put<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双指针法</strong></p><blockquote><p>反复获取下一个数其实构成了一个隐式的链表，因此问题就转化为链表是否有环，用快慢指针法即可解决。</p><ul><li>慢指针每次走一步，快指针每次走两步。</li><li>若快指针追上慢指针，则有环。</li><li>否则快指针将先到<code>1</code>。</li><li>时间复杂度: <code>O(logn)</code></li><li>空间复杂度: <code>O(1)</code><br><img src="/2021/04/20/leetcode-note/fig3-1.png"></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.202 快乐数 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution202</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------双指针法--------------------</span>    <span class="token keyword">def</span> <span class="token function">isHappyDouble</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :rtype: bool        """</span>        <span class="token keyword">def</span> <span class="token function">get_next</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                n<span class="token punctuation">,</span> digit <span class="token operator">=</span> <span class="token builtin">divmod</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>                <span class="token builtin">sum</span> <span class="token operator">+=</span> digit<span class="token operator">**</span><span class="token number">2</span>            <span class="token keyword">return</span> <span class="token builtin">sum</span>        fast <span class="token operator">=</span> n        slow <span class="token operator">=</span> n        <span class="token keyword">while</span> fast <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            slow <span class="token operator">=</span> get_next<span class="token punctuation">(</span>slow<span class="token punctuation">)</span>  <span class="token comment"># 慢指针走一步</span>            fast <span class="token operator">=</span> get_next<span class="token punctuation">(</span>get_next<span class="token punctuation">(</span>fast<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 快指针走两步</span>            <span class="token keyword">if</span> fast <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> slow <span class="token operator">==</span> fast<span class="token punctuation">:</span>  <span class="token comment"># 快指针追上慢指针，说明有环</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.202</span>    s <span class="token operator">=</span> Solution202<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> <span class="token number">19</span>    result_D <span class="token operator">=</span> s<span class="token punctuation">.</span>isHappyDouble<span class="token punctuation">(</span>in_put<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result_D<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-4-两数之和-No-1"><a href="#3-2-4-两数之和-No-1" class="headerlink" title="3.2.4 两数之和(No.1)"></a>3.2.4 两数之和(No.1)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给定一个整数数组<code>nums</code>和一个整数目标值<code>target</code>，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。</strong><br><br><strong>示例1</strong><br>输入: nums = [2,7,11,15], target = 9<br>输出: [0,1]<br><strong>示例2</strong><br>输入: nums = [3,2,4], target = 6<br>输出: [1,2]<br><strong>示例3</strong><br>输入: nums = [3,3], target = 6<br>输出: [0,1]</p></blockquote><p><strong>暴力解法</strong></p><blockquote><p>两层循环遍历即可。</p><ul><li>时间复杂度: <code>O(n^2)</code></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.1 两数之和 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution1</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------暴力解法--------------------</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: List[int]        """</span>        <span class="token comment"># 两层循环遍历</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.1</span>    s <span class="token operator">=</span> Solution1<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>    in_put_2 <span class="token operator">=</span> <span class="token number">9</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>twoSum<span class="token punctuation">(</span>in_put_1<span class="token punctuation">,</span> in_put_2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>哈希表</strong></p><blockquote><p>使用哈希表可以降低查找的时间复杂度，考虑到需要返回下标，所以使用<code>dict</code>数据结构。<code>c++</code>中则使用<code>map</code>。</p><ul><li>注意要避免元素与自身匹配，因此将元素加入哈希表的操作应在查找之后。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(n)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.1 两数之和 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution1</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------哈希表(字典)--------------------</span>    <span class="token keyword">def</span> <span class="token function">twoSumHash</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: List[int]        """</span>        hash_t <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">-</span> num <span class="token keyword">in</span> hash_t<span class="token punctuation">:</span>  <span class="token comment"># 哈希表查找</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> hash_t<span class="token punctuation">[</span>target <span class="token operator">-</span> num<span class="token punctuation">]</span><span class="token punctuation">]</span>            hash_t<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> i  <span class="token comment"># 需在查找操作之后</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.1</span>    s <span class="token operator">=</span> Solution1<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>    in_put_2 <span class="token operator">=</span> <span class="token number">9</span>    result_H <span class="token operator">=</span> s<span class="token punctuation">.</span>twoSumHash<span class="token punctuation">(</span>in_put_1<span class="token punctuation">,</span> in_put_2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result_H<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-5-四数相加II-No-454"><a href="#3-2-5-四数相加II-No-454" class="headerlink" title="3.2.5 四数相加II(No.454)"></a>3.2.5 四数相加II(No.454)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给定四个相同长度的包含整数的数组列表<code>A</code>,<code>B</code>,<code>C</code>,<code>D</code>,计算有多少个元组<code>(i, j, k, l)</code>，使得<code>A[i] + B[j] + C[k] + D[l] =0</code></strong><br><br><strong>示例</strong><br>输入:<br>A = [ 1, 2]<br>B = [-2,-1]<br>C = [-1, 2]<br>D = [ 0, 2]<br>输出: 2<br>两个元组为(0, 0, 0, 1), (1, 1, 0, 0)</p></blockquote><p><strong>暴力解法</strong></p><blockquote><p>使用4层循环遍历。<code>leetcode</code>上直接超出时间限制。</p><ul><li>时间复杂度: <code>O(n^4)</code></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.454 四数相加II 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution454</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------暴力解法--------------------</span>    <span class="token keyword">def</span> <span class="token function">fourSumCount</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> nums3<span class="token punctuation">,</span> nums4<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums1: List[int]        :type nums2: List[int]        :type nums3: List[int]        :type nums4: List[int]        :rtype: int        """</span>        <span class="token comment"># 四层循环</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums1<span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> nums2<span class="token punctuation">:</span>                <span class="token keyword">for</span> k <span class="token keyword">in</span> nums3<span class="token punctuation">:</span>                    <span class="token keyword">for</span> l <span class="token keyword">in</span> nums4<span class="token punctuation">:</span>                        <span class="token keyword">if</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>nums3<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>nums4<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                            count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> count<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.454</span>    s <span class="token operator">=</span> Solution454<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    in_put_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    in_put_3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    in_put_4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>fourSumCount<span class="token punctuation">(</span>in_put_1<span class="token punctuation">,</span> in_put_2<span class="token punctuation">,</span> in_put_3<span class="token punctuation">,</span> in_put_4<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>哈希表</strong></p><blockquote><p>将四个数组分为两组，A、B一组，C、D一组。</p><ul><li>遍历A、B，将A、B之和哈希表存储。可用<code>python</code>自带模块一行完成: <code>sum_12 = collections.Counter(num1+num2 for num1 in nums1 for num2 in nums2)</code></li><li>遍历C、D，若负CD之和在哈希表中，则次数增加对应的值。</li><li>时间复杂度: <code>O(n^2)</code></li><li>空间复杂度: <code>O(n^2)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.454 四数相加II 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution454</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------哈希表法(字典)--------------------</span>    <span class="token keyword">def</span> <span class="token function">fourSumCountHash</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> nums3<span class="token punctuation">,</span> nums4<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums1: List[int]        :type nums2: List[int]        :type nums3: List[int]        :type nums4: List[int]        :rtype: int        """</span>        count <span class="token operator">=</span> <span class="token number">0</span>        sum_12 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment"># 将AB之和用哈希表存储，键为和，值为出现的次数</span>        <span class="token keyword">for</span> num1 <span class="token keyword">in</span> nums1<span class="token punctuation">:</span>            <span class="token keyword">for</span> num2 <span class="token keyword">in</span> nums2<span class="token punctuation">:</span>                <span class="token keyword">if</span> num1 <span class="token operator">+</span> num2 <span class="token keyword">not</span> <span class="token keyword">in</span> sum_12<span class="token punctuation">:</span>                    sum_12<span class="token punctuation">[</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                sum_12<span class="token punctuation">[</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># 对CD之和进行遍历，若负CD之和在哈希表中，则次数增加对应的值</span>        <span class="token keyword">for</span> num3 <span class="token keyword">in</span> nums3<span class="token punctuation">:</span>            <span class="token keyword">for</span> num4 <span class="token keyword">in</span> nums4<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">-</span><span class="token punctuation">(</span>num3 <span class="token operator">+</span> num4<span class="token punctuation">)</span> <span class="token keyword">in</span> sum_12<span class="token punctuation">:</span>                    count <span class="token operator">+=</span> sum_12<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>num3 <span class="token operator">+</span> num4<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> count<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># No.454</span>    s <span class="token operator">=</span> Solution454<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    in_put_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    in_put_3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    in_put_4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    result_H <span class="token operator">=</span> s<span class="token punctuation">.</span>fourSumCountHash<span class="token punctuation">(</span>in_put_1<span class="token punctuation">,</span> in_put_2<span class="token punctuation">,</span> in_put_3<span class="token punctuation">,</span> in_put_4<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result_H<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>Update(2021.06.24)</code>一看两个多月没刷题了，赶紧利用实习摸鱼的时间热热手<span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><h3 id="3-2-6-赎金信-No-383"><a href="#3-2-6-赎金信-No-383" class="headerlink" title="3.2.6 赎金信(No.383)"></a>3.2.6 赎金信(No.383)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给定一个赎金信<code>ransom</code>字符串和一个杂志<code>magazine</code>字符串，判断第一个字符串<code>ransom</code>能不能由第二个字符串<code>magazines</code>里面的字符构成。如果可以构成，返回<code>true</code>；否则返回<code>false</code>。为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。杂志字符串中的每个字符只能在赎金信字符串中使用一次。</strong><br><br><strong>示例</strong><br>ransomNote = “aa”, magazine = “aab”<br>输出: true</p></blockquote><p><strong>直接法</strong></p><blockquote><ul><li>直接在<code>python</code>自带字符串数据结构上进行操作。</li><li>遍历<code>ransom</code>字符串，对每一字符，判断其在不在<code>magazine</code>字符串中。</li><li>若在，则删除<code>magazine</code>中对应的字符并继续循环，若不在则直接返回<code>False</code>。</li><li>时间复杂度: <code>O(n^2)</code></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.383 赎金信 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution383</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------直接法--------------------</span>    <span class="token keyword">def</span> <span class="token function">canConstruct</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ransomNote<span class="token punctuation">,</span> magazine<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type ransomNote: str        :type magazine: str        :rtype: bool        """</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> ransomNote<span class="token punctuation">:</span>  <span class="token comment"># 遍历赎金信</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> magazine<span class="token punctuation">:</span>                magazine <span class="token operator">=</span> magazine<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 若杂志中含有该字母，则将该字母从杂志中移除，并继续循环</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> Solution383<span class="token punctuation">(</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>canConstruct<span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">,</span> <span class="token string">'jacshnkah'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>哈希表(字典)</strong></p><blockquote><ul><li>用字典来存储<code>magazine</code>中每个字符出现的次数。</li><li>遍历<code>ransom</code>字符串，对每一字符，判断其在不在<code>magazine</code>字典中。</li><li>若在，则对应值减一，不在则直接返回<code>False</code>。</li><li>利用<code>collections</code>模块可一行解决：<code>return True if len(collections.Counter(ransomNote) - collections.Counter(magazine))==0 else False</code></li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(n)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.383 赎金信 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution383</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># --------------------哈希表(字典)--------------------</span>    <span class="token keyword">def</span> <span class="token function">canConstructDict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ransomNote<span class="token punctuation">,</span> magazine<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 构建哈希表，值为字符出现的次数</span>        hash_mag <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> magazine<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> hash_mag<span class="token punctuation">:</span>                hash_mag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            hash_mag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># 遍历赎金信</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> ransomNote<span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token keyword">in</span> hash_mag<span class="token punctuation">:</span>                hash_mag<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">if</span> hash_mag<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> Solution383<span class="token punctuation">(</span><span class="token punctuation">)</span>    result_D <span class="token operator">=</span> s<span class="token punctuation">.</span>canConstructDict<span class="token punctuation">(</span><span class="token string">'haha'</span><span class="token punctuation">,</span> <span class="token string">'jacshnkah'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-7-三数之和-No-15"><a href="#3-2-7-三数之和-No-15" class="headerlink" title="3.2.7 三数之和(No.15)"></a>3.2.7 三数之和(No.15)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给你一个包含<code>n</code>个整数的数组<code>nums</code>，判断<code>nums</code>中是否存在三个元素<code>a，b，c</code>，使得<code>a + b + c = 0 ？</code>请你找出所有和为<code>0</code>且不重复的三元组。答案中不可以包含重复的三元组。</strong><br><br><strong>示例</strong><br>输入：nums = [-1,0,1,2,-1,-4]<br>输出：[[-1,-1,2],[-1,0,1]]</p></blockquote><p><strong>哈希表</strong></p><blockquote><ul><li>该题使用哈希表十分复杂，主要是因为需要进行去重。</li><li>下面的代码去重部分时间复杂度太高。</li><li><code>LeetCode</code>上运行直接超时。</li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.15 三数之和 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution15</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------哈希表--------------------</span>    <span class="token keyword">def</span> <span class="token function">threeSumHash</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        result_hash <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        hash_set <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment"># 哈希表key为bc之和，value为对应的索引</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>                bc <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> bc <span class="token keyword">in</span> hash_set<span class="token punctuation">:</span>                    hash_set<span class="token punctuation">[</span>bc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                hash_set<span class="token punctuation">[</span>bc<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 遍历a</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token operator">-</span>a <span class="token keyword">in</span> hash_set<span class="token punctuation">:</span>                <span class="token keyword">for</span> bc <span class="token keyword">in</span> hash_set<span class="token punctuation">[</span><span class="token operator">-</span>a<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span>bc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    <span class="token keyword">if</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>bc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>bc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token keyword">in</span> result_hash<span class="token punctuation">:</span>  <span class="token comment"># 去重很关键</span>                        <span class="token keyword">continue</span>                    result_hash<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>bc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>bc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>bc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>bc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># No.15 三数之和</span>    s <span class="token operator">=</span> Solution15<span class="token punctuation">(</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>threeSumHash<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双指针法</strong></p><blockquote><ul><li>双指针法较为简单。首先对数组进行排序，若数组首位大于零，则直接返回<code>[]</code>。</li><li>初始时<code>a</code>下标为<code>i</code>，遍历整个数组，<code>b</code>（左指针）下标为<code>i+1</code>，<code>c</code>（右指针）取数组最后一个。</li><li>计算三数之和，若大于零，则右指针向左移一位；若小于零，左指针向右移一位；若相等则记录结果。</li><li>注意去重，例子<code>[0,0,0,0]</code>可作为特殊情况进行检验。</li><li>时间复杂度: <code>O(n^2)</code></li><li>空间复杂度: <code>O(logn)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.15 三数之和 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution15</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------双指针法--------------------</span>    <span class="token keyword">def</span> <span class="token function">threeSumDoubleP</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        nums <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># a去重</span>                <span class="token keyword">continue</span>            idx_a <span class="token operator">=</span> i            idx_b <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># 左指针</span>            idx_c <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment"># 右指针</span>            <span class="token keyword">while</span> idx_b <span class="token operator">!=</span> idx_c<span class="token punctuation">:</span>  <span class="token comment"># 左右指针相遇时跳出</span>                three_sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>idx_a<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>idx_b<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>idx_c<span class="token punctuation">]</span>                <span class="token keyword">if</span> three_sum <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                    idx_c <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> three_sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                    idx_b <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>idx_a<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx_b<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx_c<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    idx_c <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token keyword">while</span> nums<span class="token punctuation">[</span>idx_c<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>idx_c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> idx_b <span class="token operator">!=</span> idx_c<span class="token punctuation">:</span>  <span class="token comment"># c去重</span>                        idx_c <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> result<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># No.15 三数之和</span>    s <span class="token operator">=</span> Solution15<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>    result_d <span class="token operator">=</span> s<span class="token punctuation">.</span>threeSumDoubleP<span class="token punctuation">(</span>in_put<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result_d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-8-四数之和-No-18"><a href="#3-2-8-四数之和-No-18" class="headerlink" title="3.2.8 四数之和(No.18)"></a>3.2.8 四数之和(No.18)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给定一个包含<code>n</code>个整数的数组<code>nums</code>和一个目标值<code>target</code>，判断<code>nums</code>中是否存在四个元素<code>a</code>，<code>b</code>，<code>c</code>和<code>d</code>，使得<code>a + b + c + d</code>的值与<code>target</code>相等？找出所有满足条件且不重复的四元组。答案中不可以包含重复的四元组。</strong><br><br><strong>示例</strong><br>输入：nums = [1,0,-1,0,-2,2], target = 0<br>输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</p></blockquote><p><strong>双指针法</strong></p><blockquote><ul><li>做过三数之和之后再做这道题就容易多了，还是用双指针法更为简单。</li><li>问题可以转化为遍历第一个数，再在剩余数组做三数之和，同样注意去重。</li><li>时间复杂度: <code>O(n^3)</code></li><li>空间复杂度: <code>O(logn)</code> </li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.18 四数之和 类型：哈希表</span><span class="token keyword">class</span> <span class="token class-name">Solution18</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># --------------------双指针法--------------------</span>    <span class="token keyword">def</span> <span class="token function">fourSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: List[List[int]]        """</span>        nums <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># a去重</span>                <span class="token keyword">continue</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># b去重</span>                    <span class="token keyword">continue</span>                idx_a <span class="token operator">=</span> i                idx_b <span class="token operator">=</span> i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span>                idx_c <span class="token operator">=</span> idx_b <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># 左指针</span>                idx_d <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment"># 右指针</span>                <span class="token keyword">while</span> idx_c <span class="token operator">&lt;</span> idx_d<span class="token punctuation">:</span>  <span class="token comment"># 左右指针相遇时跳出</span>                    four_sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>idx_a<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>idx_b<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>idx_c<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>idx_d<span class="token punctuation">]</span>                    <span class="token keyword">if</span> four_sum <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>                        idx_d <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token keyword">elif</span> four_sum <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                        idx_c <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>idx_a<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx_b<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx_c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx_d<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        idx_d <span class="token operator">-=</span> <span class="token number">1</span>                        <span class="token keyword">while</span> nums<span class="token punctuation">[</span>idx_d<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>idx_d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> idx_c <span class="token operator">&lt;</span> idx_d<span class="token punctuation">:</span>  <span class="token comment"># d去重</span>                            idx_d <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> result<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># No.18 四数之和</span>    s <span class="token operator">=</span> Solution18<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment"># in_put = [2, 2, 2, 2, 2]</span>    target <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># target = 8</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>fourSum<span class="token punctuation">(</span>in_put<span class="token punctuation">,</span> target<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-9-数组中重复的数字-No-M3"><a href="#3-2-9-数组中重复的数字-No-M3" class="headerlink" title="3.2.9 数组中重复的数字(No.M3)"></a>3.2.9 数组中重复的数字(No.M3)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionM3</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token comment"># h_t = set()</span>        <span class="token comment"># for i in nums:</span>        <span class="token comment">#     if i not in h_t:</span>        <span class="token comment">#         h_t.add(i)</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         return i</span>        <span class="token comment"># 利用数组下标信息原地交换，0(1)空间复杂度，原地哈希</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-10-第一个只出现一次的字符-No-JZ50"><a href="#3-2-10-第一个只出现一次的字符-No-JZ50" class="headerlink" title="3.2.10 第一个只出现一次的字符(No.JZ50)"></a>3.2.10 第一个只出现一次的字符(No.JZ50)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ50</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token string">' '</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">:</span>            <span class="token keyword">return</span> res        d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> c <span class="token keyword">in</span> d<span class="token punctuation">:</span>                d<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            d<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> d<span class="token punctuation">:</span>            <span class="token keyword">if</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-11-数组中出现次数超过一半的数字-No-JZ39"><a href="#3-2-11-数组中出现次数超过一半的数字-No-JZ39" class="headerlink" title="3.2.11 数组中出现次数超过一半的数字(No.JZ39)"></a>3.2.11 数组中出现次数超过一半的数字(No.JZ39)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ39</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 哈希表</span>        <span class="token comment"># n = len(nums)</span>        <span class="token comment"># d = dict()</span>        <span class="token comment"># for i in nums:</span>        <span class="token comment">#     if not i in d:</span>        <span class="token comment">#         d[i] = 0</span>        <span class="token comment">#     d[i] += 1</span>        <span class="token comment">#     if d[i] &gt; n//2:</span>        <span class="token comment">#         return i</span>        <span class="token comment"># 摩尔投票法，对拼消耗</span>        votes <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> votes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                x <span class="token operator">=</span> i            <span class="token keyword">if</span> x <span class="token operator">!=</span> i<span class="token punctuation">:</span>                votes <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                votes <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-12-复杂链表的复制-No-JZ35"><a href="#3-2-12-复杂链表的复制-No-JZ35" class="headerlink" title="3.2.12 复杂链表的复制(No.JZ35)"></a>3.2.12 复杂链表的复制(No.JZ35)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""# Definition for a Node.class Node:    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):        self.val = int(x)        self.next = next        self.random = random"""</span><span class="token keyword">class</span> <span class="token class-name">SolutionJZ35</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> <span class="token string">'Node'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">'Node'</span><span class="token punctuation">:</span>        <span class="token comment"># return copy.deepcopy(head)</span>        <span class="token comment"># 哈希表</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span> <span class="token keyword">return</span>        dic<span class="token punctuation">,</span>cur <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            dic<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>                dic<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> dic<span class="token punctuation">[</span>cur<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dic<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>random<span class="token punctuation">:</span>                dic<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>random <span class="token operator">=</span> dic<span class="token punctuation">[</span>cur<span class="token punctuation">.</span>random<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dic<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>random <span class="token operator">=</span> <span class="token boolean">None</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">return</span> dic<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-13-最长连续序列-No-128"><a href="#3-2-13-最长连续序列-No-128" class="headerlink" title="3.2.13 最长连续序列(No.128)"></a>3.2.13 最长连续序列(No.128)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution128</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestConsecutive</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 哈希表,对起始点分析</span>        nums <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> i<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">in</span> nums<span class="token punctuation">:</span>  <span class="token comment"># 只有某个数能作为序列起始点才进入循环</span>                cur_length <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">while</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">in</span> nums<span class="token punctuation">:</span>                    cur_length <span class="token operator">+=</span> <span class="token number">1</span>                    i <span class="token operator">+=</span> <span class="token number">1</span>                res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cur_length<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-哈希表总结"><a href="#3-3-哈希表总结" class="headerlink" title="3.3 哈希表总结"></a>3.3 哈希表总结</h2><ul><li>当需要快速判断一个元素是否出现在集合里时，需要优先考虑哈希表。</li><li><strong>哈希函数</strong>是把传入的key映射到符号表的索引上。</li><li><strong>哈希碰撞</strong>处理有多个key映射到相同索引上时的情景，处理碰撞的普遍方式是<strong>拉链法</strong>和<strong>线性探测法</strong>。</li><li>在<code>python</code>中，<code>dict</code>类型就是由哈希表实现的。但要注意仅对字典的<code>key</code>进行哈希操作，因此<code>i in dict</code>的时间复杂度为<code>O(1)</code>，但<code>i in dict.values()</code>的时间复杂度为<code>O(N)</code>。</li><li>在例如<strong>三数之和</strong>、<strong>四数之和</strong>等需要去重的题目时，用哈希表比较麻烦，需要考虑双指针法。</li></ul><h1 id="4-字符串"><a href="#4-字符串" class="headerlink" title="4. 字符串"></a>4. 字符串</h1><h2 id="4-1-典型例题"><a href="#4-1-典型例题" class="headerlink" title="4.1 典型例题"></a>4.1 典型例题</h2><h3 id="4-1-1-反转字符串-No-344"><a href="#4-1-1-反转字符串-No-344" class="headerlink" title="4.1.1 反转字符串(No.344)"></a>4.1.1 反转字符串(No.344)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组<code>char[]</code>的形式给出。不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用<code>O(1)</code>的额外空间解决这一问题。你可以假设数组中的所有字符都是<code>ASCII</code>码表中的可打印字符。</strong><br><br><strong>示例</strong><br>输入：[“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]</p></blockquote><p><strong>题解</strong></p><blockquote><ul><li>遍历字符串（只需遍历一半），与对应字符交换位置。</li><li>交换时额外申明一个<code>temp</code>变量，不用额外创建数组。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(1)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.344 反转字符串 类型：字符串</span><span class="token keyword">class</span> <span class="token class-name">Solution344</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: List[str]        :rtype: None Do not return anything, modify s in-place instead.        """</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 交换字符</span>            temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span>            s<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp        <span class="token keyword">return</span> s<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># No.344 反转字符串</span>    s <span class="token operator">=</span> Solution344<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"l"</span><span class="token punctuation">,</span><span class="token string">"l"</span><span class="token punctuation">,</span><span class="token string">"o"</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>reverseString<span class="token punctuation">(</span>in_put<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-2-反转字符串II-No-541"><a href="#4-1-2-反转字符串II-No-541" class="headerlink" title="4.1.2 反转字符串II(No.541)"></a>4.1.2 反转字符串II(No.541)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给定一个字符串<code>s</code>和一个整数<code>k</code>，你需要对从字符串开头算起的每隔<code>2k</code>个字符的前<code>k</code>个字符进行反转。如果剩余字符少于<code>k</code>个，则将剩余字符全部反转。如果剩余字符小于<code>2k</code>但大于或等于<code>k</code>个，则反转前<code>k</code>个字符，其余字符保持原样。</strong><br><br><strong>示例</strong><br>输入: s = “abcdefg”, k = 2<br>“bacdfeg”</p></blockquote><p><strong>题解</strong></p><blockquote><ul><li><code>for</code>循环的写法是关键，每隔<code>2k</code>进行一次反转即可。</li><li>可以用自带的反转函数<code>reversed()</code>。</li><li><code>str.join()</code>用<code>str</code>来连接列表中的字符。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(n)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.541 反转字符串II 类型：字符串</span><span class="token keyword">class</span> <span class="token class-name">Solution541</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :type k: int        :rtype: str        """</span>        a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># No.541 反转字符串II</span>    s <span class="token operator">=</span> Solution541<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put1 <span class="token operator">=</span> <span class="token string">"abcdefghijklmn"</span>    in_put2 <span class="token operator">=</span> <span class="token number">2</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>reverseStr<span class="token punctuation">(</span>in_put1<span class="token punctuation">,</span> in_put2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-3-替换空格-No-J5"><a href="#4-1-3-替换空格-No-J5" class="headerlink" title="4.1.3 替换空格(No.J5)"></a>4.1.3 替换空格(No.J5)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>请实现一个函数，把字符串<code>s</code>中的每个空格替换成”%20”。</strong><br><br><strong>示例</strong><br>输入：s = “We are happy.”<br>输出：”We%20are%20happy.”</p></blockquote><p><strong>题解</strong></p><blockquote><ul><li>对<code>python</code>来说字符串的处理比较方便，一层<code>for</code>循环遍历即可。</li><li>使用自带的<code>replace</code>方法可以一行解决。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(n)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.J5 替换空格 类型：字符串</span><span class="token keyword">class</span> <span class="token class-name">SolutionJ5</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: str        """</span>        a <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> char <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'%20'</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># OneLine</span>        <span class="token comment"># return s.replace(' ', '%20')</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># No.J5 替换空格</span>    s <span class="token operator">=</span> SolutionJ5<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> <span class="token string">'We are happy.'</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>replaceSpace<span class="token punctuation">(</span>in_put<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-4-翻转字符串里的单词-No-151"><a href="#4-1-4-翻转字符串里的单词-No-151" class="headerlink" title="4.1.4 翻转字符串里的单词(No.151)"></a>4.1.4 翻转字符串里的单词(No.151)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给你一个字符串<code>s</code>，逐个翻转字符串中的所有<code>单词</code>。<code>单词</code>是由非空格字符组成的字符串，<code>s</code>中使用至少一个空格将字符串中的<code>单词</code>分隔开。请你返回一个翻转<code>s</code>中单词顺序并用单个空格相连的字符串。输入字符串<code>s</code>可以在前面、后面或者单词间包含多余的空格。翻转后单词间应当仅用一个空格分隔。翻转后的字符串中不应包含额外的空格。</strong><br><br><strong>示例</strong><br>输入：s = “  Bob    Loves  Alice   “<br>输出：”Alice Loves Bob”</p></blockquote><p><strong>题解</strong></p><blockquote><ul><li>遍历字符串，关键在于确定单词的起点和终点，这里设置<code>pre</code>指针来辅助判断。</li><li>使用自带函数<code>split()</code>、<code>reversed()</code>能够一行解决。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(n)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.151 翻转字符串里的单词 类型：字符串</span><span class="token keyword">class</span> <span class="token class-name">Solution151</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: str        """</span>        s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token string">' '</span>  <span class="token comment"># 处理最后一位无空格情况</span>        ret <span class="token operator">=</span> <span class="token string">''</span>        start <span class="token operator">=</span> <span class="token number">0</span>        pre <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>pre<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">:</span>                start <span class="token operator">=</span> i            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>pre<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>                end <span class="token operator">=</span> i                ret <span class="token operator">=</span> s<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> ret            pre <span class="token operator">=</span> i        <span class="token keyword">return</span> ret<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 去除末尾空格</span><span class="token comment"># OneLine</span>        <span class="token comment"># return ' '.join(reversed(s.split()))</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># No.151 翻转字符串里的单词</span>    s <span class="token operator">=</span> Solution151<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> <span class="token string">"  Bob    Loves  Alice   "</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>reverseWords<span class="token punctuation">(</span>in_put<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-5-左旋转字符串-No-J58II"><a href="#4-1-5-左旋转字符串-No-J58II" class="headerlink" title="4.1.5 左旋转字符串(No.J58II)"></a>4.1.5 左旋转字符串(No.J58II)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</strong><br><br><strong>示例</strong><br>输入: s = “abcdefg”, k = 2<br>输出: “cdefgab”</p></blockquote><p><strong>题解</strong></p><blockquote><ul><li>字符串切片再相加，<code>python</code>一行解决</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(n)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.J58II 左旋转字符串 类型：字符串</span><span class="token keyword">class</span> <span class="token class-name">SolutionJ58II</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :type n: int        :rtype: str        """</span>        <span class="token keyword">return</span> s<span class="token punctuation">[</span>n<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># No.J58II 左旋转字符串</span>    s <span class="token operator">=</span> SolutionJ58II<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_1 <span class="token operator">=</span> <span class="token string">"abcdefg"</span>    in_put_2 <span class="token operator">=</span> <span class="token number">2</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>reverseLeftWords<span class="token punctuation">(</span>in_put_1<span class="token punctuation">,</span> in_put_2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-6-实现strStr-No-28"><a href="#4-1-6-实现strStr-No-28" class="headerlink" title="4.1.6 实现strStr()(No.28)"></a>4.1.6 实现strStr()(No.28)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给你两个字符串<code>haystack</code>和<code>needle</code>，请你在<code>haystack</code>字符串中找出<code>needle</code>字符串出现的第一个位置（下标从<code>0</code>开始）。如果不存在，则返回<code>-1</code>。当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</strong><br><br><strong>示例</strong><br>输入：haystack = “hello”, needle = “ll”<br>输出：2</p></blockquote><p><strong>题解</strong></p><blockquote><ul><li>字符串匹配<code>KMP</code>算法<ul><li><code>KMP</code>的主要思想是当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配。</li><li><strong>前缀表</strong>：记录下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀。</li></ul></li><li><code>python</code>中使用<code>str.find()</code>方法可以一行解决。</li><li>时间复杂度: <code>O(n + m)</code>, 暴力解法为<code>O(n * m)</code></li><li>空间复杂度: <code>O(m)</code>, 暴力解法为<code>O(1)</code><br><img src="/2021/04/20/leetcode-note/fig4-1.png" alt="前缀表"></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.28 实现strStr() 类型：字符串</span><span class="token keyword">class</span> <span class="token class-name">Solution28</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">strStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type haystack: str        :type needle: str        :rtype: int        """</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token comment"># 前缀表</span>        next_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span>  <span class="token comment"># 前缀表的值即为当前子串的最大相同前后缀长度</span>        j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># i指向后缀开头，j指向前缀开头</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 从1开始！</span>            <span class="token keyword">while</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 若不等，则往前回退一步</span>                j <span class="token operator">=</span> next_list<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            next_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j        <span class="token comment"># 匹配过程</span>        n <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># m指向haystack，n指向needle</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>haystack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> haystack<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">!=</span> needle<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span>                n <span class="token operator">=</span> next_list<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> haystack<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span>                n <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>  m <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token comment"># OneLine</span>        <span class="token comment"># return haystack.find(needle)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># No.28 实现strStr()</span>    s <span class="token operator">=</span> Solution28<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put_1 <span class="token operator">=</span> <span class="token string">"hello"</span>    in_put_2 <span class="token operator">=</span> <span class="token string">"ll"</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>strStr<span class="token punctuation">(</span>in_put_1<span class="token punctuation">,</span> in_put_2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-7-重复的子字符串-No-359"><a href="#4-1-7-重复的子字符串-No-359" class="headerlink" title="4.1.7 重复的子字符串(No.359)"></a>4.1.7 重复的子字符串(No.359)</h3><p><strong>题目描述</strong></p><blockquote><p><strong>给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。</strong><br><br><strong>示例</strong><br>输入: “abab”<br>输出: True<br>解释: 可由子字符串 “ab” 重复两次构成。</p></blockquote><p><strong>题解</strong></p><blockquote><ul><li>若一个字符串可由其子串重复多次构成<code>&lt;=&gt;</code>该字符串的最长相同前后缀%(字符串长度-该字符串的最长相同前后缀)==0</li><li>因此使用<code>KMP</code>算法求得该字符串的前缀表即可。</li><li>时间复杂度: <code>O(n)</code></li><li>空间复杂度: <code>O(n)</code></li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># No.359 重复的子字符串 类型：字符串</span><span class="token keyword">class</span> <span class="token class-name">Solution359</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">repeatedSubstringPattern</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: bool        """</span>        j <span class="token operator">=</span> <span class="token number">0</span>        next_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                j <span class="token operator">=</span> next_list<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            next_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j        <span class="token comment"># 重复字串str*n, 则最长相同前后缀为str*(n-1)，因此必有str*(n-1) % (str*n - str*(n-1)) == 0</span>        <span class="token keyword">if</span> next_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">and</span> next_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> next_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># No.359 重复的子字符串</span>    s <span class="token operator">=</span> Solution359<span class="token punctuation">(</span><span class="token punctuation">)</span>    in_put <span class="token operator">=</span> <span class="token string">'ababac'</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>repeatedSubstringPattern<span class="token punctuation">(</span>in_put<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-8-最长不含重复字符的子字符串-No-JZ48"><a href="#4-1-8-最长不含重复字符的子字符串-No-JZ48" class="headerlink" title="4.1.8 最长不含重复字符的子字符串(No.JZ48)"></a>4.1.8 最长不含重复字符的子字符串(No.JZ48)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ48</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: int        """</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token comment"># 动态规划</span>        <span class="token comment"># dp = [0] * len(s)</span>        <span class="token comment"># dp[0] = 1</span>        <span class="token comment"># d = {s[0]:0}</span>        <span class="token comment"># for i in range(1,len(s)):</span>        <span class="token comment">#     if s[i] in d:</span>        <span class="token comment">#         idx = d[s[i]]</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         idx = -1</span>        <span class="token comment">#     d[s[i]] = i</span>        <span class="token comment">#     if i - idx &gt; dp[i-1]:</span>        <span class="token comment">#         dp[i] = dp[i-1] + 1</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         dp[i] = i - idx</span>        <span class="token comment"># return max(dp)</span>        <span class="token comment"># 滑动窗口（双指针）</span>        res <span class="token operator">=</span> <span class="token number">0</span>        d <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># i,j 为窗口的左右边界</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">in</span> d<span class="token punctuation">:</span>                i <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            d<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> j            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-9-把字符串转换成整数-No-JZ67"><a href="#4-1-9-把字符串转换成整数-No-JZ67" class="headerlink" title="4.1.9 把字符串转换成整数(No.JZ67)"></a>4.1.9 把字符串转换成整数(No.JZ67)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ67</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">strToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">str</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>        res<span class="token punctuation">,</span>i<span class="token punctuation">,</span>n<span class="token punctuation">,</span>sign <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span>        int_min<span class="token punctuation">,</span> int_max<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">//</span><span class="token number">10</span>        <span class="token comment"># 处理空格</span>        <span class="token keyword">while</span> <span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> i<span class="token operator">==</span>n<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token comment"># 全是空格，直接返回 </span>        <span class="token comment"># 判断符号</span>        <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span> sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'+-'</span><span class="token punctuation">:</span> i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n <span class="token keyword">and</span> <span class="token string">'9'</span><span class="token operator">&gt;=</span><span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token string">'0'</span><span class="token punctuation">:</span>            <span class="token comment"># 处理越界</span>            <span class="token keyword">if</span> res <span class="token operator">&gt;</span> b <span class="token keyword">or</span> <span class="token punctuation">(</span>res<span class="token operator">==</span>b <span class="token keyword">and</span> <span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token string">'7'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> int_max <span class="token keyword">if</span> sign<span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">else</span> int_min            <span class="token comment"># 计算数值</span>            res <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span>res <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> sign <span class="token operator">*</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-10-表示数值的字符串-No-JZ20"><a href="#4-1-10-表示数值的字符串-No-JZ20" class="headerlink" title="4.1.10 表示数值的字符串(No.JZ20)"></a>4.1.10 表示数值的字符串(No.JZ20)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ20</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        hasnum<span class="token punctuation">,</span>hasdot<span class="token punctuation">,</span>hase<span class="token punctuation">,</span>hassign <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">False</span>        idx<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">while</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>            idx <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> idx <span class="token operator">==</span> n<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>            <span class="token comment"># 如果当前字符c是数字：将hasNum置为true，index往后移动一直到非数字或遍历到末尾位置；如果已遍历到末尾(index == n)，结束循环</span>            <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> n <span class="token keyword">and</span> <span class="token string">'9'</span><span class="token operator">&gt;=</span>s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token string">'0'</span><span class="token punctuation">:</span>                idx <span class="token operator">+=</span> <span class="token number">1</span>                hasnum <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> idx <span class="token operator">==</span> n<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token comment"># 如果当前字符c是'e'或'E'：如果e已经出现或者当前e之前没有出现过数字，返回fasle；否则令hasE = true，并且将其他3个flag全部置为false，因为要开始遍历e后面的新数字了</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> hase <span class="token keyword">or</span> <span class="token keyword">not</span> hasnum<span class="token punctuation">:</span>                     <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    hase <span class="token operator">=</span> <span class="token boolean">True</span>                    hasnum<span class="token punctuation">,</span>hasdot<span class="token punctuation">,</span>hassign <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">,</span><span class="token boolean">False</span>            <span class="token comment"># 如果当前字符c是+或-：如果已经出现过+或-或者已经出现过数字或者已经出现过'.'，返回flase；否则令hasSign = true</span>            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> hassign <span class="token keyword">or</span> hasnum <span class="token keyword">or</span> hasdot<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    hassign <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token comment"># 如果当前字符c是'.'：如果已经出现过'.'或者已经出现过'e'或'E'，返回false；否则令hasDot = true</span>            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> hasdot <span class="token keyword">or</span> hase<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    hasdot <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">elif</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> n <span class="token keyword">and</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">:</span>            idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> hasnum <span class="token keyword">and</span> idx<span class="token operator">==</span>n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-11-字符串相加-No-415"><a href="#4-1-11-字符串相加-No-415" class="headerlink" title="4.1.11 字符串相加(No.415)"></a>4.1.11 字符串相加(No.415)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution415</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addStrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token comment"># 双指针模拟加法</span>        res <span class="token operator">=</span> <span class="token string">''</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        jinwei <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token keyword">or</span> j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                s <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> jinwei            <span class="token keyword">elif</span> j <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                s <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> jinwei            <span class="token keyword">else</span><span class="token punctuation">:</span>                s <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> jinwei            ans <span class="token operator">=</span> s <span class="token operator">%</span> <span class="token number">10</span>            jinwei <span class="token operator">=</span> s <span class="token operator">//</span> <span class="token number">10</span>            res <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token operator">+</span> res            i <span class="token operator">-=</span> <span class="token number">1</span>            j <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res <span class="token keyword">if</span> <span class="token keyword">not</span> jinwei <span class="token keyword">else</span> <span class="token string">'1'</span><span class="token operator">+</span>res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-12-字符串相乘-No-43"><a href="#4-1-12-字符串相乘-No-43" class="headerlink" title="4.1.12 字符串相乘(No.43)"></a>4.1.12 字符串相乘(No.43)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token comment"># 模拟乘法</span>        l1<span class="token punctuation">,</span>l2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>        j <span class="token operator">=</span> l2 <span class="token operator">-</span> <span class="token number">1</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            jinwei <span class="token operator">=</span> <span class="token number">0</span>            res_j <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                ans <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> jinwei                digit <span class="token operator">=</span> ans <span class="token operator">%</span> <span class="token number">10</span>                jinwei <span class="token operator">=</span> ans <span class="token operator">//</span> <span class="token number">10</span>                res_j <span class="token operator">+=</span> digit<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token punctuation">(</span>l1<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> jinwei <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                res_j <span class="token operator">+=</span> jinwei<span class="token operator">*</span><span class="token number">10</span><span class="token operator">**</span>l1            res <span class="token operator">+=</span> res_j<span class="token operator">*</span><span class="token number">10</span><span class="token operator">**</span><span class="token punctuation">(</span>l2<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">)</span>            j <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-13-最短回文串-No-214"><a href="#4-1-13-最短回文串-No-214" class="headerlink" title="4.1.13 最短回文串(No.214)"></a>4.1.13 最短回文串(No.214)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution214</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">shortestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> s        <span class="token comment"># 暴力法，先翻转，删除s和rev_s重复的部分，再返回</span>        <span class="token comment"># rev_s = s[::-1]</span>        <span class="token comment"># for i in range(n):</span>        <span class="token comment">#     if s[:n-i] == rev_s[i:]:</span>        <span class="token comment">#         return rev_s[:i] + s</span>        <span class="token comment"># KMP算法，求s#rev_s的最长公共前后缀，此即为以s[0]开头的最长回文子串</span>        rev_s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        target_s <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token string">'#'</span> <span class="token operator">+</span> rev_s        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>target_s<span class="token punctuation">)</span>        next_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n  <span class="token comment"># 前缀表</span>        j <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> target_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> target_s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                j <span class="token operator">=</span> next_list<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> target_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> target_s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            next_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j        length <span class="token operator">=</span> next_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> s<span class="token punctuation">[</span>length<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-14-最小覆盖子串-No-76"><a href="#4-1-14-最小覆盖子串-No-76" class="headerlink" title="4.1.14 最小覆盖子串(No.76)"></a>4.1.14 最小覆盖子串(No.76)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token comment"># 滑动窗口</span>        <span class="token comment"># 字典保存t中字符需要的次数，cnt为总的需要次数</span>        dic <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        cnt <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">for</span> char <span class="token keyword">in</span> t<span class="token punctuation">:</span>            <span class="token keyword">if</span> char <span class="token keyword">not</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                dic<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            dic<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        j <span class="token operator">=</span> <span class="token number">0</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token comment"># 保存结果</span>        flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span>  <span class="token comment"># 如果左边界字符不在t中，继续</span>                <span class="token keyword">continue</span>            <span class="token keyword">while</span> cnt<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">and</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 不断移动右边界直到找到所有t中字符</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                    dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token keyword">if</span> dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                        cnt <span class="token operator">-=</span> <span class="token number">1</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> cnt <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># j到末尾了仍不满足，退出循环</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> j <span class="token operator">-</span> i <span class="token operator">&lt;=</span> right <span class="token operator">-</span> left<span class="token punctuation">:</span>  <span class="token comment"># 更新最小区间</span>                flag <span class="token operator">=</span> <span class="token boolean">True</span>                right <span class="token operator">=</span> j                left <span class="token operator">=</span> i            dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># i右移一步，释放了1个有效字符</span>            <span class="token keyword">if</span> dic<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                cnt <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> s<span class="token punctuation">[</span>left<span class="token punctuation">:</span>right<span class="token punctuation">]</span> <span class="token keyword">if</span> flag <span class="token keyword">else</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-15-比较版本号-No-165"><a href="#4-1-15-比较版本号-No-165" class="headerlink" title="4.1.15 比较版本号(No.165)"></a>4.1.15 比较版本号(No.165)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution165</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">compareVersion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> version1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> version2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 字符串分割再逐位比较</span>        s1 <span class="token operator">=</span> version1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>        s2 <span class="token operator">=</span> version2<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token keyword">or</span> j<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">:</span>                num1 <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                num1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> j <span class="token operator">&gt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>                num2 <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                num2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">1</span>            <span class="token keyword">elif</span> num1 <span class="token operator">&lt;</span> num2<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>                j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-典型例题"><a href="#4-2-典型例题" class="headerlink" title="4.2 典型例题"></a>4.2 典型例题</h2><h3 id="4-2-1-最长公共前缀-No-14"><a href="#4-2-1-最长公共前缀-No-14" class="headerlink" title="4.2.1 最长公共前缀(No.14)"></a>4.2.1 最长公共前缀(No.14)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution14</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token comment"># 取第一个字符串与后续字符串取前缀</span>        s1 <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s2 <span class="token operator">=</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            idx <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> idx<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token keyword">and</span> idx<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token keyword">and</span> s1<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">:</span>                idx <span class="token operator">+=</span> <span class="token number">1</span>            s1 <span class="token operator">=</span> s1<span class="token punctuation">[</span><span class="token punctuation">:</span>idx<span class="token punctuation">]</span>  <span class="token comment"># 将待比较的字符串更新为公共前缀</span>        <span class="token keyword">return</span> s1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-2-面试题01-06-字符串压缩"><a href="#4-2-2-面试题01-06-字符串压缩" class="headerlink" title="4.2.2 面试题01.06.字符串压缩"></a>4.2.2 面试题01.06.字符串压缩</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution0106</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">compressString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> S<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token comment"># 双指针</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> S        left <span class="token operator">=</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> right <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> right <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token keyword">or</span> S<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> S<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> S<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span>                left <span class="token operator">=</span> right        <span class="token keyword">return</span> res <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token keyword">else</span> S<span class="token operator">&lt;</span>Paste<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-3-压缩字符串-No-443"><a href="#4-2-3-压缩字符串-No-443" class="headerlink" title="4.2.3 压缩字符串(No.443)"></a>4.2.3 压缩字符串(No.443)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution443</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">compress</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> chars<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        left<span class="token punctuation">,</span>ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token comment"># 三指针，ans用来更新结果</span>        <span class="token keyword">for</span> right <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> right<span class="token operator">==</span><span class="token builtin">len</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span> <span class="token keyword">or</span> chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> chars<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                chars<span class="token punctuation">[</span>ans<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span>                <span class="token keyword">if</span> right <span class="token operator">-</span> left <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>                    s <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span>                    <span class="token keyword">for</span> i<span class="token punctuation">,</span>c <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                        chars<span class="token punctuation">[</span>ans<span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> c                    ans <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    ans <span class="token operator">+=</span> <span class="token number">1</span>                left <span class="token operator">=</span> right        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-4-Z字形变换-No-6"><a href="#4-2-4-Z字形变换-No-6" class="headerlink" title="4.2.4 Z字形变换(No.6)"></a>4.2.4 Z字形变换(No.6)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> numRows<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token comment"># 按行处理，确定规律</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> numRows<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> s        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        dis <span class="token operator">=</span> numRows <span class="token operator">+</span> numRows <span class="token operator">-</span> <span class="token number">2</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>numRows<span class="token punctuation">)</span><span class="token punctuation">:</span>            idx <span class="token operator">=</span> i            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> i <span class="token operator">==</span> numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>                    idx <span class="token operator">+=</span> dis            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> idx<span class="token operator">+</span>dis<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>idx<span class="token operator">+</span>dis<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    idx <span class="token operator">+=</span> dis        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment"># 模拟行索引变化</span>        <span class="token keyword">if</span> numRows <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> s        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span> <span class="token operator">*</span> numRows        flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">:</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> c            <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">or</span> i<span class="token operator">==</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token operator">-</span>flag            i <span class="token operator">+=</span> flag        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5-动态规划"><a href="#5-动态规划" class="headerlink" title="5. 动态规划"></a>5. 动态规划</h1><h2 id="5-1-典型例题"><a href="#5-1-典型例题" class="headerlink" title="5.1 典型例题"></a>5.1 典型例题</h2><h3 id="5-1-1-编辑距离-No-72"><a href="#5-1-1-编辑距离-No-72" class="headerlink" title="5.1.1 编辑距离(No.72)"></a>5.1.1 编辑距离(No.72)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution72</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word1<span class="token punctuation">,</span> word2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type word1: str        :type word2: str        :rtype: int        """</span>        <span class="token comment"># 暴力递归</span>        <span class="token comment"># def dp(i, j):</span>        <span class="token comment">#     if i == -1:</span>        <span class="token comment">#         return j + 1</span>        <span class="token comment">#     if j == -1:</span>        <span class="token comment">#         return i + 1</span>        <span class="token comment">#     if word1[i] == word2[j]:</span>        <span class="token comment">#         return dp(i -1, j - 1)</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         return min(dp(i, j -1)+1, dp(i - 1, j)+1, dp (i - 1, j - 1)+1)</span>        <span class="token comment"># return dp(len(word1) - 1, len(word2) - 1)</span>        <span class="token comment"># db table</span>        db <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>word2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            db<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>word2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            db<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> j        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>word2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> word1<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> word2<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> db<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>db<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>db<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> db<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-2-斐波那契数列-No-JZ10-I"><a href="#5-1-2-斐波那契数列-No-JZ10-I" class="headerlink" title="5.1.2 斐波那契数列(No.JZ10-I)"></a>5.1.2 斐波那契数列(No.JZ10-I)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ10</span><span class="token operator">-</span>I<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :rtype: int        """</span>        <span class="token comment"># dp</span>        <span class="token keyword">if</span> n<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> n        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token comment"># 需整数取模，浮点数会有误差</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token keyword">if</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">1000000007</span> <span class="token keyword">else</span> <span class="token builtin">int</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">1000000007</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 递归 直接超时</span>        <span class="token comment"># if n&lt;=1:</span>        <span class="token comment">#      return n</span>        <span class="token comment"># return self.fib(n-1)+self.fib(n-2)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-3-青蛙跳台阶问题-No-JZ10-II"><a href="#5-1-3-青蛙跳台阶问题-No-JZ10-II" class="headerlink" title="5.1.3 青蛙跳台阶问题(No.JZ10-II)"></a>5.1.3 青蛙跳台阶问题(No.JZ10-II)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ10</span><span class="token operator">-</span>II<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :rtype: int        """</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">or</span> n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> n        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">1000000007</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-4-机器人的运动范围-No-JZ13"><a href="#5-1-4-机器人的运动范围-No-JZ13" class="headerlink" title="5.1.4 机器人的运动范围(No.JZ13)"></a>5.1.4 机器人的运动范围(No.JZ13)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">movingCount</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type m: int        :type n: int        :type k: int        :rtype: int        """</span>        <span class="token comment"># DP 是否可达</span>        <span class="token comment"># dp = [[0]*n for _ in range(m)]</span>        <span class="token comment"># dp[0][0] = 1</span>        <span class="token comment"># for i in range(m):</span>        <span class="token comment">#     for j in range(n):</span>        <span class="token comment">#         if digitsum(i)+digitsum(j)&gt;k:</span>        <span class="token comment">#             continue</span>        <span class="token comment">#         if i&gt;0 and j&gt;0:</span>        <span class="token comment">#             dp[i][j] = dp[i-1][j] or dp[i][j-1]</span>        <span class="token comment">#         elif i&gt;0 and j==0:</span>        <span class="token comment">#             dp[i][j] = dp[i-1][j]</span>        <span class="token comment">#         elif i==0 and j&gt;0:</span>        <span class="token comment">#             dp[i][j] = dp[i][j-1]</span>        <span class="token comment"># res = 0</span>        <span class="token comment"># for i in range(m):</span>        <span class="token comment">#     res += sum(dp[i])</span>        <span class="token comment"># return res</span>        <span class="token comment"># DFS</span>        <span class="token comment"># def dfs(i,j):</span>        <span class="token comment">#     if i&gt;=m or j&gt;=n or (digitsum(i)+digitsum(j)&gt;k) or (i,j) in visited:</span>        <span class="token comment">#         return 0</span>        <span class="token comment">#     visited.add((i,j))</span>        <span class="token comment">#     return 1 + dfs(i+1,j) + dfs(i,j+1)</span>        <span class="token comment"># visited = set()</span>        <span class="token comment"># return dfs(0,0)</span>        <span class="token comment"># BFS</span>        quene<span class="token punctuation">,</span> visited <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> quene<span class="token punctuation">:</span>            i<span class="token punctuation">,</span>j <span class="token operator">=</span> quene<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            quene<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i<span class="token operator">&gt;=</span>m <span class="token keyword">or</span> j <span class="token operator">&gt;=</span>n <span class="token keyword">or</span> <span class="token punctuation">(</span>digitsum<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>digitsum<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">&gt;</span>k<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token comment"># 计算数位之和</span><span class="token keyword">def</span> <span class="token function">digitsum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> n<span class="token punctuation">:</span>        res <span class="token operator">+=</span> n <span class="token operator">%</span> <span class="token number">10</span>        n <span class="token operator">//=</span> <span class="token number">10</span>    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-5-丑数-No-JZ49"><a href="#5-1-5-丑数-No-JZ49" class="headerlink" title="5.1.5 丑数(No.JZ49)"></a>5.1.5 丑数(No.JZ49)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ49</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">nthUglyNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :rtype: int        """</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token comment"># 此处if不能互斥，不能使用elif</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">:</span>                a <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">:</span>                b <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">:</span>                c <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-6-不同路径-No-62"><a href="#5-1-6-不同路径-No-62" class="headerlink" title="5.1.6 不同路径(No.62)"></a>5.1.6 不同路径(No.62)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution62</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type m: int        :type n: int        :rtype: int        """</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">or</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-7-最小路径和-No-64"><a href="#5-1-7-最小路径和-No-64" class="headerlink" title="5.1.7 最小路径和(No.64)"></a>5.1.7 最小路径和(No.64)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution64</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type grid: List[List[int]]        :rtype: int        """</span>        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">!=</span><span class="token number">0</span> <span class="token keyword">and</span> j<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> j<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">elif</span> i<span class="token operator">!=</span><span class="token number">0</span> <span class="token keyword">and</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment"># 一维dp</span>        <span class="token comment"># m,n = len(grid), len(grid[0])</span>        <span class="token comment"># dp = [0]*n</span>        <span class="token comment"># dp[0] = grid[0][0]</span>        <span class="token comment"># 初始化</span>        <span class="token comment"># for i in range(1,n):</span>        <span class="token comment">#     dp[i] = dp[i-1] + grid[0][i]</span>        <span class="token comment"># for i in range(1,m):</span>        <span class="token comment">#     for j in range(n):</span>        <span class="token comment">#         if j &gt; 0:</span>        <span class="token comment">#             dp[j] = min(dp[j-1],dp[j]) + grid[i][j]</span>        <span class="token comment">#         else:</span>        <span class="token comment">#             dp[j] = dp[j] + grid[i][j]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-8-剪绳子-No-JZ14-I"><a href="#5-1-8-剪绳子-No-JZ14-I" class="headerlink" title="5.1.8 剪绳子(No.JZ14-I)"></a>5.1.8 剪绳子(No.JZ14-I)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ14</span><span class="token operator">-</span>I<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :rtype: int        """</span>        <span class="token comment"># 贪心思想</span>        <span class="token comment"># if n==2 or n==3:</span>        <span class="token comment">#     return n-1</span>        <span class="token comment"># res = 1</span>        <span class="token comment"># 分段结果必是若干个3和2的组合，且优先3的数量</span>        <span class="token comment"># while n%3:</span>        <span class="token comment">#     n -= 2</span>        <span class="token comment">#     res *= 2</span>        <span class="token comment"># return res*3**(n/3)</span>        <span class="token comment"># dp</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>j<span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-9-剪绳子II-No-JZ14-II"><a href="#5-1-9-剪绳子II-No-JZ14-II" class="headerlink" title="5.1.9 剪绳子II(No.JZ14-II)"></a>5.1.9 剪绳子II(No.JZ14-II)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ14</span><span class="token operator">-</span>II<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :rtype: int        """</span>        <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">2</span> <span class="token keyword">or</span> n<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> n<span class="token operator">-</span><span class="token number">1</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> n<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">,</span> n<span class="token operator">%</span><span class="token number">3</span>        <span class="token keyword">if</span> b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span>a<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000000007</span>        <span class="token keyword">elif</span> b<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000000007</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">**</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000000007</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-10-连续子数组的最大和-No-JZ42"><a href="#5-1-10-连续子数组的最大和-No-JZ42" class="headerlink" title="5.1.10 连续子数组的最大和(No.JZ42)"></a>5.1.10 连续子数组的最大和(No.JZ42)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ42</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token comment"># dp[i]表示以nums[i]结尾的连续子数组最大值</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-11-把数字翻译成字符串-No-JZ46"><a href="#5-1-11-把数字翻译成字符串-No-JZ46" class="headerlink" title="5.1.11 把数字翻译成字符串(No.JZ46)"></a>5.1.11 把数字翻译成字符串(No.JZ46)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ46</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">translateNum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type num: int        :rtype: int        """</span>        num <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token comment"># dp = [0]*len(num)</span>        <span class="token comment"># dp[0] = 1</span>        <span class="token comment"># dp[1] = 1 if num[:2]&gt;'25' else 2</span>        <span class="token comment"># for i in range(2,len(num)):</span>        <span class="token comment">#     if num[i-1]+num[i]&gt;'25' or num[i-1]+num[i]&lt;'10':</span>        <span class="token comment">#         dp[i] = dp[i-1]</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         dp[i] = dp[i-1] + dp[i-2]</span>        <span class="token comment"># return dp[-1]</span>        <span class="token comment"># 空间优化</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">'25'</span><span class="token operator">&gt;=</span>num<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token string">'10'</span><span class="token punctuation">:</span>                a<span class="token punctuation">,</span>b <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">,</span>a            <span class="token keyword">else</span><span class="token punctuation">:</span>                b <span class="token operator">=</span> a         <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-12-礼物的最大价值-No-JZ47"><a href="#5-1-12-礼物的最大价值-No-JZ47" class="headerlink" title="5.1.12 礼物的最大价值(No.JZ47)"></a>5.1.12 礼物的最大价值(No.JZ47)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxValue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type grid: List[List[int]]        :rtype: int        """</span>        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> j<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">elif</span> i<span class="token operator">!=</span><span class="token number">0</span> <span class="token keyword">and</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-13-n个骰子的点数-No-JZ60"><a href="#5-1-13-n个骰子的点数-No-JZ60" class="headerlink" title="5.1.13 n个骰子的点数(No.JZ60)"></a>5.1.13 n个骰子的点数(No.JZ60)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ60</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">dicesProbability</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 两个一维数组交替</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">6</span>        temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 只能影响6位</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    temp<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">)</span>                        dp <span class="token operator">=</span> temp            temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-14-股票的最大利润-No-JZ63"><a href="#5-1-14-股票的最大利润-No-JZ63" class="headerlink" title="5.1.14 股票的最大利润(No.JZ63)"></a>5.1.14 股票的最大利润(No.JZ63)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ63</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type prices: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> prices<span class="token operator">==</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 用一个变量来记录最小值，可降低时间复杂度</span>        min_cost <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>min_cost<span class="token punctuation">)</span>            min_cost <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>min_cost<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-15-正则表达式匹配-No-JZ19"><a href="#5-1-15-正则表达式匹配-No-JZ19" class="headerlink" title="5.1.15 正则表达式匹配(No.JZ19)"></a>5.1.15 正则表达式匹配(No.JZ19)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ19</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isMatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :type p: str        :rtype: bool        """</span>        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> i<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">or</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> j<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">:</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>                        <span class="token keyword">if</span> i<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">and</span> j<span class="token operator">&gt;=</span><span class="token number">2</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">or</span> p<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-16-最长递增子序列-No-300"><a href="#5-1-16-最长递增子序列-No-300" class="headerlink" title="5.1.16 最长递增子序列(No.300)"></a>5.1.16 最长递增子序列(No.300)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution300</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-17-最长递增子序列的个数-No-673"><a href="#5-1-17-最长递增子序列的个数-No-673" class="headerlink" title="5.1.17 最长递增子序列的个数(No.673)"></a>5.1.17 最长递增子序列的个数(No.673)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution673</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findNumberOfLIS</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划 dp[i]表示以nums[i]结尾的最长递增子序列的长度，cnt[i]表示对应的次数</span>        n<span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        cnt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                        cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    <span class="token keyword">elif</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                        cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                                longest <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> longest<span class="token punctuation">:</span>                res <span class="token operator">+=</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-18-圆圈中最后剩下的数字-No-JZ62"><a href="#5-1-18-圆圈中最后剩下的数字-No-JZ62" class="headerlink" title="5.1.18 圆圈中最后剩下的数字(No.JZ62)"></a>5.1.18 圆圈中最后剩下的数字(No.JZ62)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ62</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :type m: int        :rtype: int        """</span>        <span class="token comment"># 约瑟夫环问题</span>        <span class="token comment"># 暴力法超时</span>        <span class="token comment"># nums = [i for i in range(n)]</span>        <span class="token comment"># pre = 0</span>        <span class="token comment"># while len(nums) &gt; 1:</span>        <span class="token comment">#     idx = (pre + m -1) % len(nums)</span>        <span class="token comment">#     nums.pop(idx)</span>        <span class="token comment">#     pre = idx</span>        <span class="token comment"># return nums[0]</span>        <span class="token comment"># 动态规划</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token operator">%</span>i        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-19-最长回文子串-No-5"><a href="#5-1-19-最长回文子串-No-5" class="headerlink" title="5.1.19 最长回文子串(No.5)"></a>5.1.19 最长回文子串(No.5)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution5</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划 dp[i][j] 表示是否s[i:j+1]为回文字符串</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 状态转移，要考虑偶数个字符如'bb'的情况</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> j <span class="token operator">-</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                          dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                        <span class="token keyword">if</span> j<span class="token operator">-</span>i <span class="token operator">&gt;</span> right<span class="token operator">-</span>left<span class="token punctuation">:</span>                            left<span class="token punctuation">,</span>right <span class="token operator">=</span> i<span class="token punctuation">,</span>j        <span class="token keyword">return</span> s<span class="token punctuation">[</span>left<span class="token punctuation">:</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-20-最长回文子序列-No-516"><a href="#5-1-20-最长回文子序列-No-516" class="headerlink" title="5.1.20 最长回文子序列(No.516)"></a>5.1.20 最长回文子序列(No.516)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution516</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestPalindromeSubseq</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划 dp[i][j]表示s[i:j+1]中最长回文子序列的长度</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-21-买卖股票的最佳时机II-No-122"><a href="#5-1-21-买卖股票的最佳时机II-No-122" class="headerlink" title="5.1.21 买卖股票的最佳时机II(No.122)"></a>5.1.21 买卖股票的最佳时机II(No.122)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution122</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 贪心算法</span>        <span class="token comment"># res = 0</span>        <span class="token comment"># for i in range(1,len(prices)):</span>        <span class="token comment">#     if prices[i] &gt; prices[i-1]:</span>        <span class="token comment">#         res += prices[i]-prices[i-1]</span>        <span class="token comment"># return res</span>        <span class="token comment"># 动态规划, dp[i][j] 表示到下标为 i 的这一天，持股状态为 j 时，我们手上拥有的最大现金数。0为不持股，1为持股</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-22-买卖股票的最佳时机III-No-123"><a href="#5-1-22-买卖股票的最佳时机III-No-123" class="headerlink" title="5.1.22 买卖股票的最佳时机III(No.123)"></a>5.1.22 买卖股票的最佳时机III(No.123)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution123</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划，每一天有五种股票状态，无操作、第一次买入、第一次卖出、第二次买入、第二次卖出</span>        <span class="token comment"># n = len(prices)</span>        <span class="token comment"># dp = [[0]*5 for _ in range(n)]</span>        <span class="token comment"># dp[0][0] = 0</span>        <span class="token comment"># dp[0][1] = -prices[0]</span>        <span class="token comment"># dp[0][2] = 0</span>        <span class="token comment"># dp[0][3] = -prices[0]</span>        <span class="token comment"># dp[0][4] = 0</span>        <span class="token comment"># for i in range(1,n):</span>        <span class="token comment">#     dp[i][0] = dp[i-1][0]</span>        <span class="token comment">#     dp[i][1] = max(dp[i-1][0]-prices[i], dp[i-1][1])</span>        <span class="token comment">#     dp[i][2] = max(dp[i-1][1]+prices[i], dp[i-1][2])</span>        <span class="token comment">#     dp[i][3] = max(dp[i-1][2]-prices[i], dp[i-1][3])</span>        <span class="token comment">#     dp[i][4] = max(dp[i-1][3]+prices[i], dp[i-1][4])</span>        <span class="token comment"># return dp[-1][-1]</span>        <span class="token comment"># 空间优化</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span>        buy1<span class="token punctuation">,</span>buy2 <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        sell1<span class="token punctuation">,</span>sell2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            buy1 <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>buy1<span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            sell1 <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>sell1<span class="token punctuation">,</span> buy1 <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            buy2 <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>buy2<span class="token punctuation">,</span> sell1 <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            sell2 <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>sell2<span class="token punctuation">,</span> buy2 <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sell2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-23-买卖股票的最佳时机IV-No-188"><a href="#5-1-23-买卖股票的最佳时机IV-No-188" class="headerlink" title="5.1.23 买卖股票的最佳时机IV(No.188)"></a>5.1.23 买卖股票的最佳时机IV(No.188)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution188</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> prices <span class="token keyword">or</span> k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token comment"># 动态规划</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> k <span class="token operator">*</span> <span class="token number">2</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> j <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-24-最佳买卖股票时机含冷冻期-No-309"><a href="#5-1-24-最佳买卖股票时机含冷冻期-No-309" class="headerlink" title="5.1.24 最佳买卖股票时机含冷冻期(No.309)"></a>5.1.24 最佳买卖股票时机含冷冻期(No.309)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution309</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划, 0不持股非冷冻期，1持股，2不持股冷冻期(第i天结束后为冷冻期)</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">3</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-25-最大正方形-No-221"><a href="#5-1-25-最大正方形-No-221" class="headerlink" title="5.1.25 最大正方形(No.221)"></a>5.1.25 最大正方形(No.221)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution221</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maximalSquare</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划, dp[i][j]代表以matrix[i][j]为右下点的矩阵的最大边长</span>        m<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">max</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> dp<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-典型例题"><a href="#5-2-典型例题" class="headerlink" title="5.2 典型例题"></a>5.2 典型例题</h2><h3 id="5-2-1-构建乘积数组-No-JZ66"><a href="#5-2-1-构建乘积数组-No-JZ66" class="headerlink" title="5.2.1 构建乘积数组(No.JZ66)"></a>5.2.1 构建乘积数组(No.JZ66)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">constructArr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 不允许用除法</span>        <span class="token comment"># 暴力法超时</span>        <span class="token comment"># res = []</span>        <span class="token comment"># for i in range(len(a)):</span>        <span class="token comment">#     temp = 1</span>        <span class="token comment">#     for j in range(len(a)):</span>        <span class="token comment">#         if j == i:</span>        <span class="token comment">#             continue</span>        <span class="token comment">#         temp *= a[j]</span>        <span class="token comment">#     res.append(temp)</span>        <span class="token comment"># return res</span>        <span class="token comment"># 动态规划，维护左右两个数组</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        dp_l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        dp_r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp_l<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            dp_r<span class="token punctuation">[</span><span class="token operator">-</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp_r<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dp_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>dp_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-2-最长重复子数组-No-718"><a href="#5-2-2-最长重复子数组-No-718" class="headerlink" title="5.2.2 最长重复子数组(No.718)"></a>5.2.2 最长重复子数组(No.718)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution718</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findLength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划 dp[i][j] 表示以nums1[i]结尾、nums2[j]结尾的字符串的公共子数组最大长度</span>                m<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> dp<span class="token punctuation">:</span>            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-3-最长公共子序列-No-1143"><a href="#5-2-3-最长公共子序列-No-1143" class="headerlink" title="5.2.3 最长公共子序列(No.1143)"></a>5.2.3 最长公共子序列(No.1143)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution1143</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> text2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划 dp[i][j]表示text1[:i+1] text2[:j+1]字符串的最长公共子序列</span>        l1<span class="token punctuation">,</span>l2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>l2 <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> text1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l1<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> text1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> text2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> text1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l1<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> text1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-4-最大的以-1-为边界的正方形-No-1139"><a href="#5-2-4-最大的以-1-为边界的正方形-No-1139" class="headerlink" title="5.2.4 最大的以 1 为边界的正方形(No.1139)"></a>5.2.4 最大的以 1 为边界的正方形(No.1139)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution1139</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">largest1BorderedSquare</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 暴力法</span>        <span class="token keyword">def</span> <span class="token function">is_matrix</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>x<span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">return</span> n<span class="token operator">**</span><span class="token number">2</span>        <span class="token comment"># m,n = len(grid), len(grid[0])</span>        <span class="token comment"># res = 0</span>        <span class="token comment"># for i in range(m):</span>        <span class="token comment">#     for j in range(n):</span>        <span class="token comment">#         l_range = min(m-i,n-j)</span>        <span class="token comment">#         for k in range(l_range):</span>        <span class="token comment">#             res = max(res,is_matrix(i,j,k+1))</span>        <span class="token comment"># return res</span>        <span class="token comment"># 动态规划 dp_l[i][j]表示grid[i][j]左边连续1的个数, dp_t[i][j]表示grid[i][j]上边连续1的个数，都包括grid[i][j]本身</span>        m<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dp_l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        dp_t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            dp_l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            dp_t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                dp_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                dp_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp_t<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                dp_l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp_l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                dp_t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    dp_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                    dp_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp_t<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                l_range <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp_l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l_range<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> dp_t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> k<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">and</span> dp_l<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>                        res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>                            <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-5-分割回文串II-No-132"><a href="#5-2-5-分割回文串II-No-132" class="headerlink" title="5.2.5 分割回文串II(No.132)"></a>5.2.5 分割回文串II(No.132)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution132</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minCut</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>         <span class="token comment"># 优化，动态规划求每个子串是否为回文串,dp[i][j]表示s[i:j+1]是否为回文串</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">or</span> j<span class="token operator">-</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># dp_s[i]表示以第i个字符结尾的子串的最少分割次数</span>        dp_s <span class="token operator">=</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        dp_s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 若整个子串是回文串，则0次分割</span>                dp_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> left <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 不断调整子串的左边界，取最小</span>                    <span class="token keyword">if</span> dp<span class="token punctuation">[</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        dp_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp_s<span class="token punctuation">[</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp_s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-6-打家劫舍-No-198"><a href="#5-2-6-打家劫舍-No-198" class="headerlink" title="5.2.6 打家劫舍(No.198)"></a>5.2.6 打家劫舍(No.198)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution198</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划  0表示偷，1表示不能偷，2表示能偷但不偷</span>        <span class="token comment"># n = len(nums)</span>        <span class="token comment"># dp = [[0]*3 for _ in range(n)]</span>        <span class="token comment"># dp[0][0] = nums[0]</span>        <span class="token comment"># dp[0][1] = 0</span>        <span class="token comment"># dp[0][2] = 0</span>        <span class="token comment"># for i in range(1,n):</span>        <span class="token comment">#     dp[i][0] = max(dp[i-1][1],dp[i-1][2]) + nums[i]</span>        <span class="token comment">#     dp[i][1] = dp[i-1][0]</span>        <span class="token comment">#     dp[i][2] = max(dp[i-1][1], dp[i-1][2])</span>        <span class="token comment"># return max(dp[-1][0], dp[-1][1], dp[-1][2])</span>                n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 第i间偷不偷</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-7-打家劫舍II-No-213"><a href="#5-2-7-打家劫舍II-No-213" class="headerlink" title="5.2.7 打家劫舍II(No.213)"></a>5.2.7 打家劫舍II(No.213)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划, 环状排列意味着第一个房子和最后一个房子中只能选择一个偷窃</span>        <span class="token comment"># 分别对这两种情况计算，取最大</span>        <span class="token keyword">def</span> <span class="token function">my_dp</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>            <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>my_dp<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>my_dp<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-8-打家劫舍III-No-337"><a href="#5-2-8-打家劫舍III-No-337" class="headerlink" title="5.2.8 打家劫舍III(No.337)"></a>5.2.8 打家劫舍III(No.337)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution337</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 暴力递归超时，使用哈希表存储结果</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            <span class="token keyword">if</span> root <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                <span class="token keyword">return</span> dic<span class="token punctuation">[</span>root<span class="token punctuation">]</span>            money <span class="token operator">=</span> root<span class="token punctuation">.</span>val            <span class="token keyword">if</span> root<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                money <span class="token operator">+=</span> recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                money <span class="token operator">+=</span> recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>money<span class="token punctuation">,</span> recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>            dic<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> res            <span class="token keyword">return</span> res        <span class="token comment"># dic = dict()</span>        <span class="token comment"># return recur(root)</span>        <span class="token comment"># 动态规划</span>        <span class="token keyword">def</span> <span class="token function">my_dp</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>            left <span class="token operator">=</span> my_dp<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            right <span class="token operator">=</span> my_dp<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment"># dp[0]表示以当前节点不偷状态下子树能够偷取的最大值,注意当前节点不偷的话，它的子树可以偷也可以不偷</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">max</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment"># dp[1]表示当前节点偷状态下子树能够偷取的最大值</span>            dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">return</span> dp        res <span class="token operator">=</span> my_dp<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-9-最长有效括号-No-32"><a href="#5-2-9-最长有效括号-No-32" class="headerlink" title="5.2.9 最长有效括号(No.32)"></a>5.2.9 最长有效括号(No.32)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution32</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划dp[i]表示以s[i]结尾的字符串最长有效括号子串的长度</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span> <span class="token keyword">if</span> i<span class="token operator">-</span><span class="token number">2</span><span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">2</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> i<span class="token operator">-</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token number">0</span>  <span class="token keyword">or</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token keyword">if</span> i<span class="token operator">-</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span>            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3-背包问题"><a href="#5-3-背包问题" class="headerlink" title="5.3 背包问题"></a>5.3 背包问题</h2><h3 id="5-3-1-分割等和子集-No-416"><a href="#5-3-1-分割等和子集-No-416" class="headerlink" title="5.3.1 分割等和子集(No.416)"></a>5.3.1 分割等和子集(No.416)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution416</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">canPartition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token comment"># 转化为01背包问题：是否可以从输入数组中挑选出一些正整数，使得这些数的和等于整个数组元素的和的一半</span>        <span class="token comment"># dp[i][j] 表示nums[:i+1]中能否找到一些数，使得它们的和等于j</span>        sum_nums <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> sum_nums <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        n<span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sum_nums <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment"># dp = [[False]*(target+1) for _ in range(n)]</span>        <span class="token comment"># for j in range(target+1):</span>        <span class="token comment">#     if j == nums[0]:</span>        <span class="token comment">#         dp[0][j] = True</span>        <span class="token comment">#         break</span>        <span class="token comment"># for i in range(1,n):</span>        <span class="token comment">#     for j in range(target+1):</span>        <span class="token comment">#         if j &lt; nums[i]:</span>        <span class="token comment">#             dp[i][j] = dp[i-1][j]</span>        <span class="token comment">#         else:</span>        <span class="token comment">#             dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i]]</span>        <span class="token comment">#     if dp[i][j]: return True  # 只要某行最后一列为True，后续行最后一列也都为True</span>        <span class="token comment"># return dp[-1][-1]</span>        <span class="token comment"># 空间优化，一维dp[j]表示能否使得和为j</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">or</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-2-一和零-No-474"><a href="#5-3-2-一和零-No-474" class="headerlink" title="5.3.2 一和零(No.474)"></a>5.3.2 一和零(No.474)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution474</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findMaxForm</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 多维01背包问题,dp[i][j][k]表示strs[:i+1]中最多j个0k个1的最大子集大小</span>        num_0<span class="token punctuation">,</span> num_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> strs<span class="token punctuation">:</span>            n_0 <span class="token operator">=</span> <span class="token number">0</span>            n_1 <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> char <span class="token keyword">in</span> s<span class="token punctuation">:</span>                <span class="token keyword">if</span> char <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span>                    n_0 <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    n_1 <span class="token operator">+=</span> <span class="token number">1</span>            num_0<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_0<span class="token punctuation">)</span>            num_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_1<span class="token punctuation">)</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 初始化第一行(处理第一个物体)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">&gt;=</span> num_0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">and</span> k <span class="token operator">&gt;=</span> num_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> j <span class="token operator">&gt;=</span> num_0<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> k <span class="token operator">&gt;=</span> num_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>num_0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>num_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 状态转移，与一维01背包类似</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-3-目标和-No-494"><a href="#5-3-3-目标和-No-494" class="headerlink" title="5.3.3 目标和(No.494)"></a>5.3.3 目标和(No.494)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution494</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 暴力dfs，超时，时间复杂度O(2^n)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> cur <span class="token operator">==</span> target <span class="token keyword">else</span> <span class="token number">0</span>            left <span class="token operator">=</span> dfs<span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cur<span class="token operator">+</span>nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>            right <span class="token operator">=</span> dfs<span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cur<span class="token operator">-</span>nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> left <span class="token operator">+</span> right        <span class="token comment"># return dfs(0,0)</span>        <span class="token comment"># 记忆化搜索，还是超时</span>        <span class="token keyword">def</span> <span class="token function">dfs_memo</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>            key <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'_'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>            <span class="token keyword">if</span> key <span class="token keyword">in</span> cache<span class="token punctuation">:</span> <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            <span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">if</span> cur <span class="token operator">==</span> target <span class="token keyword">else</span> <span class="token number">0</span>                <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            left <span class="token operator">=</span> dfs<span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cur<span class="token operator">+</span>nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>            right <span class="token operator">=</span> dfs<span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cur<span class="token operator">-</span>nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">+</span> right            <span class="token keyword">return</span> left <span class="token operator">+</span> right        <span class="token comment"># cache = dict()</span>        <span class="token comment"># return dfs_memo(0,0)</span>        <span class="token comment"># 动态规划，转化为01背包问题，假设所有符号为+的元素和为x，符号为-的元素和的绝对值是y。</span>        <span class="token comment"># 则有target=x-y,sum = x+y,解得x = (target+sum)/2=新target</span>        nums_sum <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&gt;</span> nums_sum <span class="token keyword">or</span> <span class="token punctuation">(</span>target <span class="token operator">+</span> nums_sum<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        my_target <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">+</span> nums_sum<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>my_target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 填满容量为0的背包有1种方法</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>my_target<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 状态转移</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-4-零钱兑换-No-322"><a href="#5-3-4-零钱兑换-No-322" class="headerlink" title="5.3.4 零钱兑换(No.322)"></a>5.3.4 零钱兑换(No.322)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution322</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> coins<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划，完全背包，dp[j]为凑成总金额为j的最少硬币个数</span>        m<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>coins<span class="token punctuation">)</span><span class="token punctuation">,</span> amount <span class="token operator">+</span> <span class="token number">1</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> n  <span class="token comment"># 初始化为不可能达到的最大硬币数</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 凑成金额为0需要0个硬币</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">&gt;=</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> n <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-5-零钱兑换II-No-518"><a href="#5-3-5-零钱兑换II-No-518" class="headerlink" title="5.3.5 零钱兑换II(No.518)"></a>5.3.5 零钱兑换II(No.518)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution518</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> coins<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划，完全背包，dp[j]为凑成总金额j的硬币组合数</span>        m<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>coins<span class="token punctuation">)</span><span class="token punctuation">,</span> amount<span class="token operator">+</span><span class="token number">1</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">&gt;=</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 状态转移</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 二维dp</span>        <span class="token comment"># dp = [[0]*n for _ in range(m+1)]</span>        <span class="token comment"># dp[0][0] = 1</span>        <span class="token comment"># for i in range(1,m+1):</span>        <span class="token comment">#     for j in range(n):</span>        <span class="token comment">#         if j &gt;= coins[i-1]:</span>        <span class="token comment">#             dp[i][j] = dp[i-1][j] + dp[i][j-coins[i-1]]</span>        <span class="token comment">#         else:</span>        <span class="token comment">#             dp[i][j] = dp[i-1][j]</span>        <span class="token comment"># return dp[-1][-1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-6-组合总和Ⅳ-No-377"><a href="#5-3-6-组合总和Ⅳ-No-377" class="headerlink" title="5.3.6 组合总和Ⅳ(No.377)"></a>5.3.6 组合总和Ⅳ(No.377)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution377</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum4</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划，完全背包，不同之处在于顺序不同的序列被视作不同的组合</span>        m<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> target <span class="token operator">+</span> <span class="token number">1</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token comment"># 交换遍历顺序，先物体后容量</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>                        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-树"><a href="#6-树" class="headerlink" title="6. 树"></a>6. 树</h1><h2 id="6-1-典型例题"><a href="#6-1-典型例题" class="headerlink" title="6.1 典型例题"></a>6.1 典型例题</h2><h3 id="6-1-1-从上到下打印二叉树-No-JZ32-I"><a href="#6-1-1-从上到下打印二叉树-No-JZ32-I" class="headerlink" title="6.1.1 从上到下打印二叉树(No.JZ32-I)"></a>6.1.1 从上到下打印二叉树(No.JZ32-I)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Definition for a binary tree node.</span><span class="token comment"># class TreeNode(object):</span><span class="token comment">#     def __init__(self, x):</span><span class="token comment">#         self.val = x</span><span class="token comment">#         self.left = None</span><span class="token comment">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">SolutionJZ32</span><span class="token operator">-</span>I<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        <span class="token comment"># BFS</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># quene = [root]</span>        quene <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> quene<span class="token punctuation">:</span>            node <span class="token operator">=</span> quene<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># list 的pop(0)时间复杂度为O(n), deque的为O(1)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-2-二叉树的层序遍历-No-102"><a href="#6-1-2-二叉树的层序遍历-No-102" class="headerlink" title="6.1.2 二叉树的层序遍历(No.102)"></a>6.1.2 二叉树的层序遍历(No.102)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution102</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[List[int]]        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        quene <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> quene<span class="token punctuation">:</span>            l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>quene<span class="token punctuation">)</span>            temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>                node <span class="token operator">=</span> quene<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                    quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                    quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>                        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-3-从上到下打印二叉树III-No-JZ32-III"><a href="#6-1-3-从上到下打印二叉树III-No-JZ32-III" class="headerlink" title="6.1.3 从上到下打印二叉树III(No.JZ32-III)"></a>6.1.3 从上到下打印二叉树III(No.JZ32-III)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ32</span><span class="token operator">-</span>III<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[List[int]]        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        quene <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        flag <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> quene<span class="token punctuation">:</span>            l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>quene<span class="token punctuation">)</span>            temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            flag <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>                node <span class="token operator">=</span> quene<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                    quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                    quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">if</span> flag<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">:</span>                temp <span class="token operator">=</span> <span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-4-二叉树的中序遍历-No-94"><a href="#6-1-4-二叉树的中序遍历-No-94" class="headerlink" title="6.1.4 二叉树的中序遍历(No.94)"></a>6.1.4 二叉树的中序遍历(No.94)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution94</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>inorder<span class="token punctuation">(</span>root<span class="token punctuation">,</span>res<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token comment"># 迭代</span>        <span class="token comment"># stack,res = [],[]</span>        <span class="token comment"># while stack or root:</span>        <span class="token comment">#     if root:</span>        <span class="token comment">#         stack.append(root)</span>        <span class="token comment">#         root = root.left</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         temp = stack.pop()</span>        <span class="token comment">#         res.append(temp.val)</span>        <span class="token comment">#         root = temp.right</span>        <span class="token comment"># return res</span>    <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>        self<span class="token punctuation">.</span>inorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> res<span class="token punctuation">)</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-5-二叉树的前序遍历-No-144"><a href="#6-1-5-二叉树的前序遍历-No-144" class="headerlink" title="6.1.5 二叉树的前序遍历(No.144)"></a>6.1.5 二叉树的前序遍历(No.144)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution144</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span><span class="token comment"># res = []</span><span class="token comment"># self.preorder(root,res)</span><span class="token comment"># return res</span><span class="token comment"># 迭代</span><span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> stack<span class="token punctuation">:</span>            node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>  <span class="token comment"># 栈的先入后出特性，因此要先右后左</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span class="token keyword">return</span> res    <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>preorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>res<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>preorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-6-二叉树的镜像-No-JZ27"><a href="#6-1-6-二叉树的镜像-No-JZ27" class="headerlink" title="6.1.6 二叉树的镜像(No.JZ27)"></a>6.1.6 二叉树的镜像(No.JZ27)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ27</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: TreeNode        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>        root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left        self<span class="token punctuation">.</span>mirrorTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mirrorTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-7-对称的二叉树-No-JZ28"><a href="#6-1-7-对称的二叉树-No-JZ28" class="headerlink" title="6.1.7 对称的二叉树(No.JZ28)"></a>6.1.7 对称的二叉树(No.JZ28)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ28</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: bool        """</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> l <span class="token keyword">and</span> <span class="token keyword">not</span> r<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> l <span class="token keyword">or</span> <span class="token keyword">not</span> r <span class="token keyword">or</span> l<span class="token punctuation">.</span>val <span class="token operator">!=</span> r<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> recur<span class="token punctuation">(</span>l<span class="token punctuation">.</span>left<span class="token punctuation">,</span>r<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token keyword">and</span> recur<span class="token punctuation">(</span>l<span class="token punctuation">.</span>right<span class="token punctuation">,</span>r<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>                    <span class="token keyword">return</span> recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-8-二叉树的深度-No-JZ55-I"><a href="#6-1-8-二叉树的深度-No-JZ55-I" class="headerlink" title="6.1.8 二叉树的深度(No.JZ55-I)"></a>6.1.8 二叉树的深度(No.JZ55-I)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ55</span><span class="token operator">-</span>I<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: int        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token comment"># BFS</span>        <span class="token comment"># quene = [root]</span>        <span class="token comment"># res = 0</span>        <span class="token comment"># while quene:</span>        <span class="token comment">#     l = len(quene)</span>        <span class="token comment">#     for i in range(l):</span>        <span class="token comment">#         node = quene.pop(0)</span>        <span class="token comment">#         if node.left:</span>        <span class="token comment">#             quene.append(node.left)</span>        <span class="token comment">#         if node.right:</span>        <span class="token comment">#             quene.append(node.right)</span>        <span class="token comment">#     res += 1</span>        <span class="token comment"># return res</span>        <span class="token comment"># DFS</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>maxDepth<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-9-二叉搜索树的第k大节点-No-JZ54"><a href="#6-1-9-二叉搜索树的第k大节点-No-JZ54" class="headerlink" title="6.1.9 二叉搜索树的第k大节点(No.JZ54)"></a>6.1.9 二叉搜索树的第k大节点(No.JZ54)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ54</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">kthLargest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :type k: int        :rtype: int        """</span>        <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span>            inorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            inorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        inorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res<span class="token punctuation">[</span><span class="token operator">-</span>k<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-10-平衡二叉树-No-JZ55-II"><a href="#6-1-10-平衡二叉树-No-JZ55-II" class="headerlink" title="6.1.10 平衡二叉树(No.JZ55-II)"></a>6.1.10 平衡二叉树(No.JZ55-II)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ55</span><span class="token operator">-</span>II<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: bool        """</span>        <span class="token comment"># 前序遍历+计算深度</span>        <span class="token comment"># def depth(root):</span>        <span class="token comment">#     if not root:</span>        <span class="token comment">#         return 0</span>        <span class="token comment">#     return max(depth(root.left),depth(root.right))+1</span>        <span class="token comment"># def dfs(root):</span>        <span class="token comment">#     if not root:</span>        <span class="token comment">#         return True</span>        <span class="token comment">#     return abs(depth(root.left)-depth(root.right))&lt;=1 and dfs(root.left) and dfs(root.right)</span>        <span class="token comment"># return dfs(root)    </span>        <span class="token comment"># 后序遍历+剪枝</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            left <span class="token operator">=</span> recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            right <span class="token operator">=</span> recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">if</span> right <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>                        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>left<span class="token operator">-</span>right<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">return</span> recur<span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-11-二叉搜索树的最近公共祖先-No-JZ68-I"><a href="#6-1-11-二叉搜索树的最近公共祖先-No-JZ68-I" class="headerlink" title="6.1.11 二叉搜索树的最近公共祖先(No.JZ68-I)"></a>6.1.11 二叉搜索树的最近公共祖先(No.JZ68-I)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :type p: TreeNode        :type q: TreeNode        :rtype: TreeNode        """</span>        <span class="token comment"># 迭代,利用二插搜索树的性质，右子树&gt;左子树</span>        <span class="token keyword">while</span> root<span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> root<span class="token punctuation">.</span>val <span class="token keyword">and</span> q<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right            <span class="token keyword">elif</span> p<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val <span class="token keyword">and</span> q<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> root        <span class="token comment"># 递归</span>        <span class="token comment"># if p.val &gt; root.val and q.val &gt; root.val:</span>        <span class="token comment">#     return self.lowestCommonAncestor(root.right,p,q)</span>        <span class="token comment"># elif p.val &lt; root.val and q.val &lt; root.val:</span>        <span class="token comment">#     return self.lowestCommonAncestor(root.left,p,q)</span>        <span class="token comment"># else:</span>        <span class="token comment">#     return root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-12-二叉树的最近公共祖先-No-JZ68-II"><a href="#6-1-12-二叉树的最近公共祖先-No-JZ68-II" class="headerlink" title="6.1.12 二叉树的最近公共祖先(No.JZ68-II)"></a>6.1.12 二叉树的最近公共祖先(No.JZ68-II)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ68</span><span class="token operator">-</span>II<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :type p: TreeNode        :type q: TreeNode        :rtype: TreeNode        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> root<span class="token operator">==</span>p <span class="token keyword">or</span> root<span class="token operator">==</span>q<span class="token punctuation">:</span>            <span class="token keyword">return</span> root        left <span class="token operator">=</span> self<span class="token punctuation">.</span>lowestCommonAncestor<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span>        right <span class="token operator">=</span> self<span class="token punctuation">.</span>lowestCommonAncestor<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> left<span class="token punctuation">:</span>            <span class="token keyword">return</span> right        <span class="token keyword">if</span> <span class="token keyword">not</span> right<span class="token punctuation">:</span>            <span class="token keyword">return</span> left        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-13-重建二叉树-No-JZ7"><a href="#6-1-13-重建二叉树-No-JZ7" class="headerlink" title="6.1.13 重建二叉树(No.JZ7)"></a>6.1.13 重建二叉树(No.JZ7)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ7</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type preorder: List[int]        :type inorder: List[int]        :rtype: TreeNode        """</span><span class="token comment"># root代表根节点在前序遍历中的索引，left、right代表当前子树在中序遍历的左右边界</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> left <span class="token operator">&gt;</span> right<span class="token punctuation">:</span>                <span class="token keyword">return</span>            node <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">=</span> h<span class="token punctuation">[</span>node<span class="token punctuation">.</span>val<span class="token punctuation">]</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> recur<span class="token punctuation">(</span>root<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>left<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> recur<span class="token punctuation">(</span>root<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token operator">-</span>left<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span>            <span class="token keyword">return</span> node        h <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>inorder<span class="token punctuation">)</span><span class="token punctuation">:</span>            h<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">return</span> recur<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>inorder<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-14-树的子结构-No-JZ26"><a href="#6-1-14-树的子结构-No-JZ26" class="headerlink" title="6.1.14 树的子结构(No.JZ26)"></a>6.1.14 树的子结构(No.JZ26)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ26</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isSubStructure</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type A: TreeNode        :type B: TreeNode        :rtype: bool        """</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> b<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> a <span class="token keyword">or</span> a<span class="token punctuation">.</span>val <span class="token operator">!=</span> b<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>                            <span class="token keyword">return</span> recur<span class="token punctuation">(</span>a<span class="token punctuation">.</span>left<span class="token punctuation">,</span>b<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token keyword">and</span> recur<span class="token punctuation">(</span>a<span class="token punctuation">.</span>right<span class="token punctuation">,</span>b<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> A <span class="token keyword">or</span> <span class="token keyword">not</span> B<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> recur<span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>isSubStructure<span class="token punctuation">(</span>A<span class="token punctuation">.</span>left<span class="token punctuation">,</span>B<span class="token punctuation">)</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>isSubStructure<span class="token punctuation">(</span>A<span class="token punctuation">.</span>right<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-15-二叉搜索树与双向链表-No-JZ36"><a href="#6-1-15-二叉搜索树与双向链表-No-JZ36" class="headerlink" title="6.1.15 二叉搜索树与双向链表(No.JZ36)"></a>6.1.15 二叉搜索树与双向链表(No.JZ36)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ36</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">treeToDoublyList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: Node        :rtype: Node        """</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span>            recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>pre<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>right <span class="token operator">=</span> root            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>head <span class="token operator">=</span> root            root<span class="token punctuation">.</span>left <span class="token operator">=</span> self<span class="token punctuation">.</span>pre            self<span class="token punctuation">.</span>pre <span class="token operator">=</span> root            recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>        self<span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token boolean">None</span>        recur<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>head<span class="token punctuation">.</span>left<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>right <span class="token operator">=</span> self<span class="token punctuation">.</span>pre<span class="token punctuation">,</span>self<span class="token punctuation">.</span>head        <span class="token keyword">return</span> self<span class="token punctuation">.</span>head<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-16-二叉搜索树的后序遍历序列-No-JZ33"><a href="#6-1-16-二叉搜索树的后序遍历序列-No-JZ33" class="headerlink" title="6.1.16 二叉搜索树的后序遍历序列(No.JZ33)"></a>6.1.16 二叉搜索树的后序遍历序列(No.JZ33)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ33</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">verifyPostorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> postorder<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type postorder: List[int]        :rtype: bool        """</span>        <span class="token comment"># 牢记二叉搜索树的性质，右子树&gt;根节点的值&gt;左子树</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>postorder<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>postorder<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            root <span class="token operator">=</span> postorder<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            idx <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>postorder<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>postorder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> postorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> root<span class="token punctuation">:</span>                    idx <span class="token operator">=</span> i                    <span class="token keyword">break</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> postorder<span class="token punctuation">[</span>idx<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> j <span class="token operator">&lt;</span> root<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> recur<span class="token punctuation">(</span>postorder<span class="token punctuation">[</span><span class="token punctuation">:</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> recur<span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>idx<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> postorder<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> recur<span class="token punctuation">(</span>postorder<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-17-二叉树中和为某一值的路径-No-JZ34"><a href="#6-1-17-二叉树中和为某一值的路径-No-JZ34" class="headerlink" title="6.1.17 二叉树中和为某一值的路径(No.JZ34)"></a>6.1.17 二叉树中和为某一值的路径(No.JZ34)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ34</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :type target: int        :rtype: List[List[int]]        """</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span>            self<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">+=</span> root<span class="token punctuation">.</span>val            self<span class="token punctuation">.</span>temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>left <span class="token keyword">and</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>right <span class="token keyword">and</span> self<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token comment"># 注意list是可变对象，这里需要加list()复制一份，不然会动态变化</span>                self<span class="token punctuation">.</span>res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span>            recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            self<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">-=</span> root<span class="token punctuation">.</span>val            self<span class="token punctuation">.</span>temp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>        recur<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-18-序列化二叉树-No-JZ37"><a href="#6-1-18-序列化二叉树-No-JZ37" class="headerlink" title="6.1.18 序列化二叉树(No.JZ37)"></a>6.1.18 序列化二叉树(No.JZ37)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Codec</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Encodes a tree to a single string.                :type root: TreeNode        :rtype: str        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'[]'</span>        quene <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> quene<span class="token punctuation">:</span>            node <span class="token operator">=</span> quene<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>                quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'null'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'['</span><span class="token operator">+</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">']'</span>            <span class="token keyword">def</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Decodes your encoded data to tree.                :type data: str        :rtype: TreeNode        """</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">'[]'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        nums <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token number">1</span>        root <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        quene <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        <span class="token keyword">while</span> quene<span class="token punctuation">:</span>            node <span class="token operator">=</span> quene<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'null'</span><span class="token punctuation">:</span>                node<span class="token punctuation">.</span>left <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'null'</span><span class="token punctuation">:</span>                node<span class="token punctuation">.</span>right <span class="token operator">=</span> TreeNode<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-19-二叉树的直径-No-543"><a href="#6-1-19-二叉树的直径-No-543" class="headerlink" title="6.1.19 二叉树的直径(No.543)"></a>6.1.19 二叉树的直径(No.543)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution543</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            left <span class="token operator">=</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>  <span class="token comment"># 左子树高度</span>            right <span class="token operator">=</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>  <span class="token comment"># 右子树高度</span>            self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>res<span class="token punctuation">,</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 更新最大值</span>            <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># 当前节点的高度</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-20-二叉树的右视图-No-199"><a href="#6-1-20-二叉树的右视图-No-199" class="headerlink" title="6.1.20 二叉树的右视图(No.199)"></a>6.1.20 二叉树的右视图(No.199)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution199</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rightSideView</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 层序遍历取最右边</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        quene <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> quene<span class="token punctuation">:</span>            length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>quene<span class="token punctuation">)</span>            temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>                node <span class="token operator">=</span> quene<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                    quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                    quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># return res</span>        <span class="token comment"># DFS 根--》右--》左 </span>        <span class="token comment"># def dfs(root, depth):</span>        <span class="token comment">#     if not root:</span>        <span class="token comment">#         return</span>        <span class="token comment">#     if len(res) == depth:</span>        <span class="token comment">#         res.append(root.val)</span>        <span class="token comment">#     depth += 1</span>        <span class="token comment">#     dfs(root.right, depth)</span>        <span class="token comment">#     dfs(root.left, depth)</span>        <span class="token comment"># res = []</span>        <span class="token comment"># dfs(root,0)</span>        <span class="token comment"># return res</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-2-典型例题"><a href="#6-2-典型例题" class="headerlink" title="6.2 典型例题"></a>6.2 典型例题</h2><h3 id="6-2-1-路径总和-No-112"><a href="#6-2-1-路径总和-No-112" class="headerlink" title="6.2.1 路径总和(No.112)"></a>6.2.1 路径总和(No.112)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution112</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">,</span> targetSum<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token comment"># DFS</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>left <span class="token keyword">and</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                <span class="token keyword">return</span> target <span class="token operator">==</span> root<span class="token punctuation">.</span>val            target <span class="token operator">-=</span> root<span class="token punctuation">.</span>val            left <span class="token operator">=</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span>            right <span class="token operator">=</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span>            <span class="token keyword">return</span> left <span class="token keyword">or</span> right        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-2-路径总和II-No-113"><a href="#6-2-2-路径总和II-No-113" class="headerlink" title="6.2.2 路径总和II(No.113)"></a>6.2.2 路径总和II(No.113)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution113</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">,</span> targetSum<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 回溯</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span>            path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>left <span class="token keyword">and</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>right <span class="token keyword">and</span> target <span class="token operator">==</span> root<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> target<span class="token operator">-</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> target<span class="token operator">-</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        res<span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-3-路径总和III-No-437"><a href="#6-2-3-路径总和III-No-437" class="headerlink" title="6.2.3 路径总和III(No.437)"></a>6.2.3 路径总和III(No.437)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution437</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> targetSum<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># DFS</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> target <span class="token operator">-</span> root<span class="token punctuation">.</span>val <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>res <span class="token operator">+=</span> <span class="token number">1</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>target<span class="token operator">-</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>target<span class="token operator">-</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token comment"># 遍历整个树</span>        <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">,</span>targetSum<span class="token punctuation">)</span>            preorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            preorder<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token comment"># 双递归</span>        self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token number">0</span>        preorder<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-4-求根节点到叶节点数字之和-No-129"><a href="#6-2-4-求根节点到叶节点数字之和-No-129" class="headerlink" title="6.2.4 求根节点到叶节点数字之和(No.129)"></a>6.2.4 求根节点到叶节点数字之和(No.129)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution129</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sumNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 回溯</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span>            path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>left <span class="token keyword">and</span> <span class="token keyword">not</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                temp <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">for</span> num <span class="token keyword">in</span> path<span class="token punctuation">:</span>    temp <span class="token operator">=</span> temp<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> num                self<span class="token punctuation">.</span>res <span class="token operator">+=</span> temp            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>res<span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-5-验证二叉搜索树-No-98"><a href="#6-2-5-验证二叉搜索树-No-98" class="headerlink" title="6.2.5 验证二叉搜索树(No.98)"></a>6.2.5 验证二叉搜索树(No.98)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution98</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token comment"># 中序遍历,判断当前节点是否大于前节点</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            left <span class="token operator">=</span> recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> left<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>pre<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            self<span class="token punctuation">.</span>pre <span class="token operator">=</span> root<span class="token punctuation">.</span>val            <span class="token keyword">return</span> recur<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> recur<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-6-相同的树-No-100"><a href="#6-2-6-相同的树-No-100" class="headerlink" title="6.2.6 相同的树(No.100)"></a>6.2.6 相同的树(No.100)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution100</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> q<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> p <span class="token keyword">and</span> <span class="token keyword">not</span> q<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> p <span class="token keyword">or</span> <span class="token keyword">not</span> q<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>val <span class="token operator">==</span> q<span class="token punctuation">.</span>val<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>isSameTree<span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span>q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>isSameTree<span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span>q<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-7-另一棵树的子树-No-572"><a href="#6-2-7-另一棵树的子树-No-572" class="headerlink" title="6.2.7 另一棵树的子树(No.572)"></a>6.2.7 另一棵树的子树(No.572)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution572</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">,</span> subRoot<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token comment"># 遍历每个节点，判断是否是相同的树</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>is_same_tree<span class="token punctuation">(</span>root<span class="token punctuation">,</span>subRoot<span class="token punctuation">)</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>isSubtree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>subRoot<span class="token punctuation">)</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>isSubtree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>subRoot<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_same_tree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> a <span class="token keyword">and</span> <span class="token keyword">not</span> b<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> a <span class="token keyword">or</span> <span class="token keyword">not</span> b<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> a<span class="token punctuation">.</span>val <span class="token operator">==</span> b<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>is_same_tree<span class="token punctuation">(</span>a<span class="token punctuation">.</span>left<span class="token punctuation">,</span>b<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>is_same_tree<span class="token punctuation">(</span>a<span class="token punctuation">.</span>right<span class="token punctuation">,</span>b<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-DFS-回溯算法"><a href="#7-DFS-回溯算法" class="headerlink" title="7. DFS/回溯算法"></a>7. DFS/回溯算法</h1><h2 id="7-1-典型例题"><a href="#7-1-典型例题" class="headerlink" title="7.1 典型例题"></a>7.1 典型例题</h2><h3 id="7-1-1-字符串的排列-No-JZ38"><a href="#7-1-1-字符串的排列-No-JZ38" class="headerlink" title="7.1.1 字符串的排列(No.JZ38)"></a>7.1.1 字符串的排列(No.JZ38)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ38</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: List[str]        """</span>        c<span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token comment"># 去重</span>            d <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> d<span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                d<span class="token punctuation">.</span>add<span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment"># 换固定点</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                recur<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment"># 回溯</span>                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        recur<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res        <span class="token comment"># res,path = [],[]</span>        <span class="token comment"># char = list(s)</span>        <span class="token comment"># def recur(n,used):</span>        <span class="token comment">#     if len(path)==n:</span>        <span class="token comment">#         res.append(''.join(path))</span>        <span class="token comment">#         return</span>        <span class="token comment">#     d = set()</span>        <span class="token comment">#     for i in range(n):</span>        <span class="token comment">#         if used[i] == 1: continue</span>        <span class="token comment">#         if char[i] in d: continue</span>        <span class="token comment">#         d.add(char[i])</span>        <span class="token comment">#         path.append(char[i])</span>        <span class="token comment">#         used[i] = 1</span>        <span class="token comment">#         recur(n,used)</span>        <span class="token comment">#         path.pop()</span>        <span class="token comment">#         used[i] = 0</span>        <span class="token comment"># used = [0] * len(char)</span>        <span class="token comment"># recur(len(char),used)</span>        <span class="token comment"># return res</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-2-子集-No-78"><a href="#7-1-2-子集-No-78" class="headerlink" title="7.1.2 子集(No.78)"></a>7.1.2 子集(No.78)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution78</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        res<span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> idx<span class="token operator">==</span>n<span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                recur<span class="token punctuation">(</span>n<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        recur<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-3-组合-No-77"><a href="#7-1-3-组合-No-77" class="headerlink" title="7.1.3 组合(No.77)"></a>7.1.3 组合(No.77)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution77</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combine</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 回溯</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token comment"># for i in range(idx,n):</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>n <span class="token operator">-</span> <span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 剪枝</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                recur<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        nums <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        res<span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        recur<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-4-全排列-No-46"><a href="#7-1-4-全排列-No-46" class="headerlink" title="7.1.4 全排列(No.46)"></a>7.1.4 全排列(No.46)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution46</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        res<span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>used<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">==</span>n<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 由于list是可变对象，此处不能直接append</span>                <span class="token keyword">return</span>                        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                recur<span class="token punctuation">(</span>n<span class="token punctuation">,</span>used<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                used <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        recur<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span>used<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-5-全排列II-No-47"><a href="#7-1-5-全排列II-No-47" class="headerlink" title="7.1.5 全排列II(No.47)"></a>7.1.5 全排列II(No.47)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution47</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>             dic <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> dic<span class="token punctuation">:</span> <span class="token keyword">continue</span>  <span class="token comment"># 去重</span>                <span class="token comment"># if i&gt;0 and nums[i] == nums[i-1] and not used[i-1]: continue 需对数组先排序</span>                dic<span class="token punctuation">.</span>add<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                recur<span class="token punctuation">(</span>used<span class="token punctuation">)</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        res<span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        used <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        recur<span class="token punctuation">(</span>used<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-6-单词搜索-No-79"><a href="#7-1-6-单词搜索-No-79" class="headerlink" title="7.1.6 单词搜索(No.79)"></a>7.1.6 单词搜索(No.79)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution79</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">exist</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> word<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>    <span class="token comment"># 回溯</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> idx <span class="token operator">==</span> n<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> i <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span> <span class="token keyword">or</span> j <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> word<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token keyword">or</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            temp <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            res <span class="token operator">=</span> dfs<span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">or</span> dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">or</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">or</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp            <span class="token keyword">return</span> res        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">True</span>                <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-7-排列序列-No-60"><a href="#7-1-7-排列序列-No-60" class="headerlink" title="7.1.7 排列序列(No.60)"></a>7.1.7 排列序列(No.60)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution60</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getPermutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token comment"># DFS + 剪枝</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> idx <span class="token operator">==</span> n<span class="token punctuation">:</span>                <span class="token keyword">return</span>                         cnt <span class="token operator">=</span> jiecheng<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>idx<span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> uesd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>                <span class="token keyword">if</span> cnt <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>                    k <span class="token operator">-=</span> cnt                    <span class="token keyword">continue</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                uesd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                dfs<span class="token punctuation">(</span>k<span class="token punctuation">,</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>   <span class="token comment"># 直接返回即可，后续的不用遍历</span>        nums <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        uesd <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        jiecheng <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            jiecheng<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> jiecheng<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        dfs<span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token comment"># 按位找规律，位上的值确定：num = nums[k // jc] if k % jc else nums[k // jc - 1]</span>        <span class="token comment"># def jiecheng(n):</span>        <span class="token comment">#     res = 1</span>        <span class="token comment">#     while n &gt; 1:</span>        <span class="token comment">#         res *= n</span>        <span class="token comment">#         n = n-1</span>        <span class="token comment">#     return res</span>        <span class="token comment"># def recur(n,k):</span>        <span class="token comment">#     if n == 0:</span>        <span class="token comment">#         return</span>        <span class="token comment">#     jc = (jiecheng(n-1))</span>        <span class="token comment">#     num = nums[k // jc] if k % jc else nums[k // jc - 1]</span>        <span class="token comment">#     nums.remove(num)</span>        <span class="token comment">#     res.append(str(num))</span>        <span class="token comment">#     k = k % jc</span>        <span class="token comment">#     recur(n-1,k)</span>        <span class="token comment"># nums = [i+1 for i in range(n)]</span>        <span class="token comment"># res = []</span>        <span class="token comment"># recur(n,k)</span>        <span class="token comment"># return ''.join(res)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-8-矩阵中的路径-No-JZ12"><a href="#7-1-8-矩阵中的路径-No-JZ12" class="headerlink" title="7.1.8 矩阵中的路径(No.JZ12)"></a>7.1.8 矩阵中的路径(No.JZ12)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ12</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">exist</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> word<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token keyword">or</span> j<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token keyword">or</span> i<span class="token operator">&gt;=</span>m <span class="token keyword">or</span> j<span class="token operator">&gt;=</span>n <span class="token keyword">or</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> word<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            temp <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            res <span class="token operator">=</span> dfs<span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">or</span> dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">or</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">or</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp            <span class="token keyword">return</span> res        m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-9-岛屿数量-No-200"><a href="#7-1-9-岛屿数量-No-200" class="headerlink" title="7.1.9 岛屿数量(No.200)"></a>7.1.9 岛屿数量(No.200)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution200</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numIslands</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type grid: List[List[str]]        :rtype: int        """</span>        <span class="token comment"># DFS</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> i <span class="token operator">==</span> m <span class="token keyword">or</span> j <span class="token operator">==</span> n <span class="token keyword">or</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span>            dfs<span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token comment"># BFS</span>        <span class="token keyword">def</span> <span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>            quene <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">while</span> quene<span class="token punctuation">:</span>                i<span class="token punctuation">,</span>j <span class="token operator">=</span> quene<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> j <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">&lt;</span> m <span class="token keyword">and</span> j <span class="token operator">&lt;</span> n <span class="token keyword">and</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>                    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span>                    quene <span class="token operator">+</span> <span class="token punctuation">[</span>bfs<span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>bfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>bfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        m<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>                    dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>                    res <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res<span class="token operator">&lt;</span>Paste<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-10-岛屿的最大面积-No-695"><a href="#7-1-10-岛屿的最大面积-No-695" class="headerlink" title="7.1.10 岛屿的最大面积(No.695)"></a>7.1.10 岛屿的最大面积(No.695)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution695</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># DFS</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> i <span class="token operator">==</span> m <span class="token keyword">or</span> j <span class="token operator">==</span> n <span class="token keyword">or</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        m<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-11-不同岛屿的数量-No-694"><a href="#7-1-11-不同岛屿的数量-No-694" class="headerlink" title="7.1.11 不同岛屿的数量(No.694)"></a>7.1.11 不同岛屿的数量(No.694)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution694</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numDistinctIslands</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># DFS+路径去重</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>o_i<span class="token punctuation">,</span>o_j<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> i <span class="token operator">==</span> m <span class="token keyword">or</span> j <span class="token operator">==</span> n <span class="token keyword">or</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>                        grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token comment"># 记录相对路径</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">-</span>o_i<span class="token punctuation">)</span><span class="token punctuation">)</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token operator">-</span>o_j<span class="token punctuation">)</span><span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>o_i<span class="token punctuation">,</span>o_j<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>o_i<span class="token punctuation">,</span>o_j<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>o_i<span class="token punctuation">,</span>o_j<span class="token punctuation">)</span>            dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>o_i<span class="token punctuation">,</span>o_j<span class="token punctuation">)</span>            <span class="token keyword">return</span>        m<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                     temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                     dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>                     res<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-12-岛屿的周长-No-463"><a href="#7-1-12-岛屿的周长-No-463" class="headerlink" title="7.1.12 岛屿的周长(No.463)"></a>7.1.12 岛屿的周长(No.463)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution463</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">islandPerimeter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># DFS 碰到水或者越界次数等于周长</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> i <span class="token operator">==</span> m <span class="token keyword">or</span> j <span class="token operator">==</span> n <span class="token keyword">or</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">1</span>            <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>  <span class="token comment"># 走过的路，不能标记为0了</span>                <span class="token keyword">return</span> <span class="token number">0</span>            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>            <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    m<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-13-最大人工岛-No-827"><a href="#7-1-13-最大人工岛-No-827" class="headerlink" title="7.1.13 最大人工岛(No.827)"></a>7.1.13 最大人工岛(No.827)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution827</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">largestIsland</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># DFS</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> i <span class="token operator">==</span> n <span class="token keyword">or</span> j <span class="token operator">==</span> n <span class="token keyword">or</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> idx  <span class="token comment"># 岛屿序号，2,3,4，...</span>            <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>idx<span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>idx<span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>idx<span class="token punctuation">)</span> <span class="token operator">+</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>idx<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">final_area</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>            area<span class="token punctuation">,</span>idxs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            dirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 四个方向</span>            <span class="token keyword">for</span> d <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>                n_i<span class="token punctuation">,</span>n_j <span class="token operator">=</span> i <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> n_i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> n_j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> n_i <span class="token operator">==</span> n <span class="token keyword">or</span> n_j <span class="token operator">==</span> n <span class="token keyword">or</span>  grid<span class="token punctuation">[</span>n_i<span class="token punctuation">]</span><span class="token punctuation">[</span>n_j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                idx <span class="token operator">=</span> grid<span class="token punctuation">[</span>n_i<span class="token punctuation">]</span><span class="token punctuation">[</span>n_j<span class="token punctuation">]</span>                <span class="token keyword">if</span> idx <span class="token keyword">not</span> <span class="token keyword">in</span> idxs<span class="token punctuation">:</span>  <span class="token comment"># 只考虑idx不同的</span>                    idxs<span class="token punctuation">.</span>add<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>                    area <span class="token operator">+=</span> dic<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>            <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> area        n<span class="token punctuation">,</span>idx<span class="token punctuation">,</span>dic<span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token comment"># 遍历陆地，计算岛屿面积并标记序号</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    area <span class="token operator">=</span> dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>idx<span class="token punctuation">)</span>                    dic<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> area  <span class="token comment"># 序号:面积</span>                    idx <span class="token operator">+=</span> <span class="token number">1</span>                    res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> area<span class="token punctuation">)</span>                <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>  <span class="token comment"># 无陆地，造1</span>        <span class="token comment"># 遍历海洋，计算周围岛屿总面积</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> final_area<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-14-组合总和-No-39"><a href="#7-1-14-组合总和-No-39" class="headerlink" title="7.1.14 组合总和(No.39)"></a>7.1.14 组合总和(No.39)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution39</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> candidates<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 动态规划，完全背包求具体方案, dp[j]表示和为j的组合方案</span>        <span class="token comment"># m,n = len(candidates), target+1</span>        <span class="token comment"># dp = {i:[] for i in range(n)}</span>        <span class="token comment"># for i in range(m):</span>        <span class="token comment">#     for j in range(n):</span>        <span class="token comment">#         if j &gt; candidates[i]:</span>        <span class="token comment">#             dp[j].extend([x+[candidates[i]] for x in dp[j-candidates[i]]])</span>        <span class="token comment">#         elif j == candidates[i]:</span>        <span class="token comment">#             dp[j].extend([[candidates[i]]])</span>                            <span class="token comment"># return dp[target]</span>        <span class="token comment"># 回溯+剪枝</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> target <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># 剪枝</span>                <span class="token keyword">if</span> target <span class="token operator">&lt;</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>                target <span class="token operator">-=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>i<span class="token punctuation">,</span>target<span class="token punctuation">)</span>  <span class="token comment"># 每一个元素可以重复利用，因此从i开始</span>                target <span class="token operator">+=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        res<span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        candidates <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span>  <span class="token comment"># 排序是剪枝的前提</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-15-子集II-No-90"><a href="#7-1-15-子集II-No-90" class="headerlink" title="7.1.15 子集II(No.90)"></a>7.1.15 子集II(No.90)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution90</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment"># 回溯</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> idx <span class="token operator">==</span> n<span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">&gt;</span> idx <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>  <span class="token comment"># 同一树层去重</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        res<span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        nums <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>  <span class="token comment"># 去重前需排序</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-2-典型例题"><a href="#7-2-典型例题" class="headerlink" title="7.2 典型例题"></a>7.2 典型例题</h2><h3 id="7-2-1-组合总和II-No-40"><a href="#7-2-1-组合总和II-No-40" class="headerlink" title="7.2.1 组合总和II(No.40)"></a>7.2.1 组合总和II(No.40)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution40</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> candidates<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 回溯</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> target <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">&gt;</span> idx <span class="token keyword">and</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> candidates<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 树层去重</span>                    <span class="token keyword">continue</span>                <span class="token keyword">if</span> target <span class="token operator">&lt;</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 剪枝</span>                    <span class="token keyword">break</span>                target <span class="token operator">-=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>                target <span class="token operator">+=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span>        candidates <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span>        res<span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-2-组合总和III-No-216"><a href="#7-2-2-组合总和III-No-216" class="headerlink" title="7.2.2 组合总和III(No.216)"></a>7.2.2 组合总和III(No.216)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution216</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum3</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 回溯</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token keyword">and</span> target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> target <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">&gt;</span> k<span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment"># 剪枝</span>                    <span class="token keyword">break</span>                target <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span>                target <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        nums <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        res<span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-3-电话号码的字母组合-No-17"><a href="#7-2-3-电话号码的字母组合-No-17" class="headerlink" title="7.2.3 电话号码的字母组合(No.17)"></a>7.2.3 电话号码的字母组合(No.17)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution17</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 回溯</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> idx <span class="token operator">==</span> n<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            num <span class="token operator">=</span> digits<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>            <span class="token comment"># 遍历每个数字对应的字母</span>            <span class="token keyword">for</span> char <span class="token keyword">in</span> dic<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>char<span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>idx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> digits<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'2'</span><span class="token punctuation">:</span><span class="token string">'abc'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">:</span><span class="token string">'def'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">:</span><span class="token string">'ghi'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">:</span><span class="token string">'jkl'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">:</span><span class="token string">'mno'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">:</span><span class="token string">'pqrs'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">:</span><span class="token string">'tuv'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">:</span><span class="token string">'wxyz'</span><span class="token punctuation">}</span>        res<span class="token punctuation">,</span>path<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res        <span class="token comment"># 队列</span>        <span class="token comment"># if not digits: return []</span>        <span class="token comment"># quene = ['']</span>        <span class="token comment"># dic = {'2':'abc','3':'def','4':'ghi','5':'jkl','6':'mno','7':'pqrs','8':'tuv','9':'wxyz'}</span>        <span class="token comment"># for num in digits:</span>        <span class="token comment">#     chars = dic[num]</span>        <span class="token comment">#     size = len(quene)</span>        <span class="token comment">#     for i in range(size):</span>        <span class="token comment">#         temp = quene.pop(0)</span>        <span class="token comment">#         for char in chars:</span>        <span class="token comment">#             quene.append(temp+char)</span>        <span class="token comment"># return quene</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-4-分割回文串-No-131"><a href="#7-2-4-分割回文串-No-131" class="headerlink" title="7.2.4 分割回文串(No.131)"></a>7.2.4 分割回文串(No.131)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution131</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 回溯</span>        <span class="token keyword">def</span> <span class="token function">is_huiwen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> s <span class="token operator">==</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> idx <span class="token operator">==</span> n<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>                        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                head <span class="token operator">=</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token comment"># if not is_huiwen(head):  # 如果前缀不是回文，直接跳过</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> dp<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>head<span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 优化，动态规划求每个子串是否为回文串,dp[i][j]表示s[i:j+1]是否为回文串</span>        res<span class="token punctuation">,</span>path<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">or</span> j<span class="token operator">-</span>i<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-5-复原IP地址-No-93"><a href="#7-2-5-复原IP地址-No-93" class="headerlink" title="7.2.5 复原IP地址(No.93)"></a>7.2.5 复原IP地址(No.93)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution93</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">restoreIpAddresses</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 回溯</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-</span>idx<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>n<span class="token operator">-</span>idx<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 剪枝</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> idx <span class="token operator">==</span> n<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">:</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> idx<span class="token operator">+</span><span class="token number">3</span><span class="token operator">&gt;</span>n<span class="token punctuation">:</span>                right <span class="token operator">=</span> n            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">=</span> idx <span class="token operator">+</span> <span class="token number">3</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> s<span class="token punctuation">[</span>idx<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">255</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token keyword">and</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                     <span class="token keyword">continue</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                                    res<span class="token punctuation">,</span>path<span class="token punctuation">,</span>n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-6-二叉树中的最大路径和-No-124"><a href="#7-2-6-二叉树中的最大路径和-No-124" class="headerlink" title="7.2.6 二叉树中的最大路径和(No.124)"></a>7.2.6 二叉树中的最大路径和(No.124)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution124</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            left <span class="token operator">=</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            right <span class="token operator">=</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            <span class="token comment"># 当前子树的最大路径和</span>            cur_sum <span class="token operator">=</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> left <span class="token operator">+</span> right            self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>res<span class="token punctuation">,</span> cur_sum<span class="token punctuation">)</span>            <span class="token comment"># 作为子树对外的最大路径和</span>            out_sum <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>left<span class="token operator">+</span>root<span class="token punctuation">.</span>val<span class="token punctuation">,</span> right<span class="token operator">+</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">return</span> out_sum <span class="token keyword">if</span> out_sum <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>res <span class="token operator">=</span> <span class="token operator">-</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'inf'</span><span class="token punctuation">)</span>  <span class="token comment"># 考虑负数情况，不能设为0</span>        dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-7-N皇后-No-51"><a href="#7-2-7-N皇后-No-51" class="headerlink" title="7.2.7 N皇后(No.51)"></a>7.2.7 N皇后(No.51)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution51</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 回溯，每行只能放一个皇后</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> row <span class="token operator">==</span> n<span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> grid<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token comment"># 遍历列</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> is_valid<span class="token punctuation">(</span>row<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                    grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Q'</span>                    dfs<span class="token punctuation">(</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span>            <span class="token keyword">return</span>        <span class="token keyword">def</span> <span class="token function">is_valid</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> grid<span class="token punctuation">[</span>row<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>  <span class="token comment"># 上方</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> col<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token keyword">and</span> grid<span class="token punctuation">[</span>row<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>  <span class="token comment"># 左上方</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> col<span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n <span class="token keyword">and</span> grid<span class="token punctuation">[</span>row<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>  <span class="token comment"># 右上方</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>                    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        grid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-8-括号生成-No-22"><a href="#7-2-8-括号生成-No-22" class="headerlink" title="7.2.8 括号生成(No.22)"></a>7.2.8 括号生成(No.22)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution22</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 回溯,left,right分别为左右括号剩余个数</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> left<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> right<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token comment"># 不满足有效括号</span>            <span class="token keyword">if</span> left<span class="token operator">&gt;</span>right<span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> left <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span>                left <span class="token operator">-=</span> <span class="token number">1</span>                dfs<span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span>                left <span class="token operator">+=</span> <span class="token number">1</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> right <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span>                right <span class="token operator">-=</span> <span class="token number">1</span>                dfs<span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span>                right <span class="token operator">+=</span> <span class="token number">1</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        res<span class="token punctuation">,</span>path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        dfs<span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="8-栈、队列、堆"><a href="#8-栈、队列、堆" class="headerlink" title="8. 栈、队列、堆"></a>8. 栈、队列、堆</h1><h2 id="8-1-典型例题"><a href="#8-1-典型例题" class="headerlink" title="8.1 典型例题"></a>8.1 典型例题</h2><h3 id="8-1-1-用两个栈实现队列-No-JZ9"><a href="#8-1-1-用两个栈实现队列-No-JZ9" class="headerlink" title="8.1.1 用两个栈实现队列(No.JZ9)"></a>8.1.1 用两个栈实现队列(No.JZ9)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CQueue</span><span class="token punctuation">(</span>jobject<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>s1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>s2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">appendTail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type value: int        :rtype: None        """</span>        self<span class="token punctuation">.</span>s1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: int        """</span>        <span class="token comment"># 将s1中的元素依次出栈到s2中</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>s2<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>s2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>s1<span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>s2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>s1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>s2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-2-滑动窗口的最大值-No-JZ59I"><a href="#8-1-2-滑动窗口的最大值-No-JZ59I" class="headerlink" title="8.1.2 滑动窗口的最大值(No.JZ59I)"></a>8.1.2 滑动窗口的最大值(No.JZ59I)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ59I</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type k: int        :rtype: List[int]        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> nums<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 动态规划</span>        <span class="token comment"># dp = [0] * (len(nums)-k+1)</span>        <span class="token comment"># dp[0] = max(nums[:k])</span>        <span class="token comment"># for i in range(1, len(dp)):</span>        <span class="token comment">#     if nums[i-1] != dp[i-1]:</span>        <span class="token comment">#         dp[i] = max(dp[i-1], nums[i + k - 1])</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         dp[i] = max(nums[i:i+k])</span>        <span class="token comment"># return dp</span>        <span class="token comment"># 单调队列</span>        res<span class="token punctuation">,</span> quene <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>k<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> quene<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                quene<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> quene <span class="token keyword">and</span> quene<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                quene<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            quene<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>quene<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-3-包含min函数的栈-No-JZ30"><a href="#8-1-3-包含min函数的栈-No-JZ30" class="headerlink" title="8.1.3 包含min函数的栈(No.JZ30)"></a>8.1.3 包含min函数的栈(No.JZ30)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MinStack</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        initialize your data structure here.        """</span>        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 辅助栈,单调减</span>        self<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>m <span class="token keyword">or</span> x <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>m<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> self<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>m<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">min</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>m<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-4-队列的最大值-No-JZ59II"><a href="#8-1-4-队列的最大值-No-JZ59II" class="headerlink" title="8.1.4 队列的最大值(No.JZ59II)"></a>8.1.4 队列的最大值(No.JZ59II)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MaxQueue</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">max_value</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>b<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">push_back</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token comment"># 维护一个双端队列，删除队列中所有小于新入队的元素，保持单调减</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>b <span class="token keyword">and</span> self<span class="token punctuation">.</span>b<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>b<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>b<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">pop_front</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>a<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        num <span class="token operator">=</span> self<span class="token punctuation">.</span>a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> num <span class="token operator">==</span> self<span class="token punctuation">.</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>b<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-5-数据流中的中位数-No-JZ41"><a href="#8-1-5-数据流中的中位数-No-JZ41" class="headerlink" title="8.1.5 数据流中的中位数(No.JZ41)"></a>8.1.5 数据流中的中位数(No.JZ41)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MedianFinder</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        initialize your data structure here.        """</span>        <span class="token comment"># self.quene = []</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 小顶堆，存较大的一半数</span>        self<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 大顶堆，存较小的一半数</span>    <span class="token keyword">def</span> <span class="token function">addNum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token comment"># 队列，保持数组有序</span>        <span class="token comment"># if not self.quene:</span>        <span class="token comment">#     self.quene.append(num)</span>        <span class="token comment">#     return</span>        <span class="token comment"># l,r = 0,len(self.quene)-1</span>        <span class="token comment"># while l&lt;=r:</span>        <span class="token comment">#     mid = (l+r)//2</span>        <span class="token comment">#     if self.quene[mid] &gt; num:</span>        <span class="token comment">#         r = mid - 1</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         l = mid + 1</span>        <span class="token comment"># self.quene.insert(l,num)</span>        <span class="token comment"># 堆</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span> <span class="token operator">-</span>num<span class="token punctuation">)</span>            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token operator">-</span>heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> num<span class="token punctuation">)</span>            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>self<span class="token punctuation">.</span>b<span class="token punctuation">,</span> <span class="token operator">-</span>heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">findMedian</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>        <span class="token comment"># m = (len(self.quene)-1) // 2</span>        <span class="token comment"># if len(self.quene) % 2 == 1:</span>        <span class="token comment">#     return self.quene</span>        <span class="token comment"># else:</span>        <span class="token comment">#     return (self.quene[m] + self.quene[m+1])/2</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-6-栈的压入、弹出序列-No-JZ31"><a href="#8-1-6-栈的压入、弹出序列-No-JZ31" class="headerlink" title="8.1.6 栈的压入、弹出序列(No.JZ31)"></a>8.1.6 栈的压入、弹出序列(No.JZ31)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ31</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">validateStackSequences</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pushed<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> popped<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token comment"># 辅助栈，模拟过程</span>        stack<span class="token punctuation">,</span>i <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> pushed<span class="token punctuation">:</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            <span class="token keyword">while</span> stack <span class="token keyword">and</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>popped<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token keyword">not</span> stack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-7-有效的括号-No-20"><a href="#8-1-7-有效的括号-No-20" class="headerlink" title="8.1.7 有效的括号(No.20)"></a>8.1.7 有效的括号(No.20)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution20</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        <span class="token comment"># 辅助栈</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> stack<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">')'</span> <span class="token keyword">or</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'{'</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'}'</span> <span class="token keyword">or</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'['</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token keyword">if</span> stack <span class="token keyword">else</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-8-字符串解码-No-394"><a href="#8-1-8-字符串解码-No-394" class="headerlink" title="8.1.8 字符串解码(No.394)"></a>8.1.8 字符串解码(No.394)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution394</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decodeString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token comment"># 辅助栈，涉及括号匹配问题适合用栈来解决</span>        stack<span class="token punctuation">,</span>res<span class="token punctuation">,</span>num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> char <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">'0'</span> <span class="token operator">&lt;=</span> char <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">:</span>                num <span class="token operator">=</span> num<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>  <span class="token comment"># 转数字，考虑多位数字情况</span>            <span class="token keyword">elif</span> char <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>                res<span class="token punctuation">,</span>num <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token number">0</span>            <span class="token keyword">elif</span> char <span class="token operator">==</span> <span class="token string">']'</span><span class="token punctuation">:</span>                last_res<span class="token punctuation">,</span> last_num <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> last_res <span class="token operator">+</span> last_num <span class="token operator">*</span> res            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> char        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-9-每日温度-No-739"><a href="#8-1-9-每日温度-No-739" class="headerlink" title="8.1.9 每日温度(No.739)"></a>8.1.9 每日温度(No.739)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution739</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temperatures<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 单调栈，栈中记录元素下标即可</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temperatures<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> stack <span class="token keyword">and</span> temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temperatures<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                idx <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                res<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> idx                        stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-10-基本计算器-No-224-No-227-No-772"><a href="#8-1-10-基本计算器-No-224-No-227-No-772" class="headerlink" title="8.1.10 基本计算器(No.224,No.227,No.772)"></a>8.1.10 基本计算器(No.224,No.227,No.772)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution224</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">calculate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 双栈处理，通用模板</span>        <span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>num_stack<span class="token punctuation">,</span>op_stack<span class="token punctuation">)</span><span class="token punctuation">:</span>            y<span class="token punctuation">,</span>x <span class="token operator">=</span> num_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>num_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            op <span class="token operator">=</span> op_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>                ans <span class="token operator">=</span> x <span class="token operator">+</span> y            <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>                ans <span class="token operator">=</span> x <span class="token operator">-</span> y            <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                ans <span class="token operator">=</span> x <span class="token operator">*</span> y            <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">:</span>                ans <span class="token operator">=</span> x <span class="token operator">//</span> y            num_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ans<span class="token punctuation">)</span>        priority <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'+'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>        <span class="token comment"># 预处理字符串，处理空格，首位补零</span>        s <span class="token operator">=</span> <span class="token string">'('</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'(-'</span><span class="token punctuation">,</span><span class="token string">'(0-'</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">')'</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        num_stack<span class="token punctuation">,</span>op_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 分别存数字和运算符，防止为负数num需添0</span>        i<span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>            c <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> c<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 数字</span>                num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>                <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n <span class="token keyword">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    i <span class="token operator">+=</span> <span class="token number">1</span>                num_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            <span class="token keyword">elif</span> c <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">:</span>                op_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>            <span class="token keyword">elif</span> c<span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">:</span>                 <span class="token comment"># 计算直至遇到'('</span>                <span class="token keyword">while</span> op_stack <span class="token keyword">and</span> op_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">:</span>                    calc<span class="token punctuation">(</span>num_stack<span class="token punctuation">,</span> op_stack<span class="token punctuation">)</span>                op_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> op_stack <span class="token keyword">and</span> op_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">:</span>                    prev_op <span class="token operator">=</span> op_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                    <span class="token comment"># 只有「栈内运算符」比「当前运算符」优先级高/同等，才进行运算</span>                    <span class="token keyword">if</span> priority<span class="token punctuation">[</span>prev_op<span class="token punctuation">]</span> <span class="token operator">&lt;</span> priority<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">:</span>                           <span class="token keyword">break</span>                    calc<span class="token punctuation">(</span>num_stack<span class="token punctuation">,</span> op_stack<span class="token punctuation">)</span>                op_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>                    <span class="token keyword">return</span> num_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-1-11-柱状图中最大的矩形-No-84"><a href="#8-1-11-柱状图中最大的矩形-No-84" class="headerlink" title="8.1.11 柱状图中最大的矩形(No.84)"></a>8.1.11 柱状图中最大的矩形(No.84)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution84</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>heights<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 先放入哨兵结点，在循环中就不用做非空判断</span>        heights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> heights <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        n <span class="token operator">+=</span> <span class="token number">2</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                cur_height <span class="token operator">=</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                cur_width <span class="token operator">=</span> i <span class="token operator">-</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span>                res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cur_height <span class="token operator">*</span> cur_width<span class="token punctuation">)</span>            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-排序"><a href="#9-排序" class="headerlink" title="9. 排序"></a>9. 排序</h1><h2 id="9-1-典型例题"><a href="#9-1-典型例题" class="headerlink" title="9.1 典型例题"></a>9.1 典型例题</h2><h3 id="9-1-1-数组中的逆序对-No-JZ51"><a href="#9-1-1-数组中的逆序对-No-JZ51" class="headerlink" title="9.1.1 数组中的逆序对(No.JZ51)"></a>9.1.1 数组中的逆序对(No.JZ51)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ51</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reversePairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token comment"># 暴力解法超时</span>        <span class="token comment"># res = 0</span>        <span class="token comment"># for i in range(len(nums)):</span>        <span class="token comment">#     for j in range(i+1,len(nums)):</span>        <span class="token comment">#         if nums[i] &gt; nums[j]:</span>        <span class="token comment">#             res += 1</span>                <span class="token comment"># return res</span>        <span class="token comment"># 归并排序</span>        <span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l <span class="token operator">&gt;=</span> r<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            res <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span> <span class="token operator">+</span> merge_sort<span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>            <span class="token comment"># merge</span>            i<span class="token punctuation">,</span> j <span class="token operator">=</span> l<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span>            temp<span class="token punctuation">[</span>l<span class="token punctuation">:</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">:</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> j <span class="token operator">==</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">or</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    i <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                    res <span class="token operator">+=</span> mid <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">return</span> res        temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        res <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-1-2-最小的k个数-No-JZ40"><a href="#9-1-2-最小的k个数-No-JZ40" class="headerlink" title="9.1.2 最小的k个数(No.JZ40)"></a>9.1.2 最小的k个数(No.JZ40)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ40</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getLeastNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type arr: List[int]        :type k: int        :rtype: List[int]        """</span>        <span class="token comment"># return sorted(arr)[:k]</span>        <span class="token comment"># 快排</span>        <span class="token comment"># def sort(l,r):</span>        <span class="token comment">#     if l &gt;= r:</span>        <span class="token comment">#         return</span>        <span class="token comment">#     i,j = l,r</span>        <span class="token comment">#     while i &lt; j:</span>        <span class="token comment">#         while i &lt; j and arr[j]&gt;=arr[l]: j -= 1</span>        <span class="token comment">#         while i &lt; j and arr[i]&lt;=arr[l]: i += 1</span>        <span class="token comment">#         arr[i], arr[j] = arr[j], arr[i]</span>        <span class="token comment">#     arr[l],arr[i] = arr[i], arr[l]</span>        <span class="token comment">#     sort(l,i-1)</span>        <span class="token comment">#     sort(i+1,r)</span>        <span class="token comment"># sort(0,len(arr)-1)</span>        <span class="token comment"># return arr[:k]</span>        <span class="token comment"># 快排优化</span>        <span class="token keyword">def</span> <span class="token function">sort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l <span class="token operator">&gt;=</span> r<span class="token punctuation">:</span>                <span class="token keyword">return</span>            i<span class="token punctuation">,</span>j <span class="token operator">=</span> l<span class="token punctuation">,</span>r            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j <span class="token keyword">and</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;=</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">:</span> j <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j <span class="token keyword">and</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">:</span> i <span class="token operator">+=</span> <span class="token number">1</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span>            <span class="token keyword">if</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> k<span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">elif</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> k<span class="token punctuation">:</span>                 sort<span class="token punctuation">(</span>l<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                sort<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>        sort<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-1-3-把数组排成最小的数-No-JZ45"><a href="#9-1-3-把数组排成最小的数-No-JZ45" class="headerlink" title="9.1.3 把数组排成最小的数(No.JZ45)"></a>9.1.3 把数组排成最小的数(No.JZ45)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ45</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: str        """</span>        <span class="token comment"># 自定义排序规则+快速排序</span>        <span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l <span class="token operator">&gt;=</span> r<span class="token punctuation">:</span> <span class="token keyword">return</span>            i<span class="token punctuation">,</span>j <span class="token operator">=</span> l<span class="token punctuation">,</span>r            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j <span class="token keyword">and</span> <span class="token builtin">int</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> j <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j <span class="token keyword">and</span> <span class="token builtin">int</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> i <span class="token operator">+=</span> <span class="token number">1</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span>            quick_sort<span class="token punctuation">(</span>l<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            quick_sort<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>        nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">]</span>        quick_sort<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-1-4-数组中的第K个最大元素-No-215"><a href="#9-1-4-数组中的第K个最大元素-No-215" class="headerlink" title="9.1.4 数组中的第K个最大元素(No.215)"></a>9.1.4 数组中的第K个最大元素(No.215)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution215</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> l <span class="token operator">&gt;=</span> r<span class="token punctuation">:</span>                <span class="token keyword">return</span>            i<span class="token punctuation">,</span>j <span class="token operator">=</span> l<span class="token punctuation">,</span>r            base <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            nums<span class="token punctuation">[</span>base<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>base<span class="token punctuation">]</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j <span class="token keyword">and</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">:</span> j <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">:</span> i <span class="token operator">+=</span> <span class="token number">1</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">elif</span> i <span class="token operator">&gt;</span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                quick_sort<span class="token punctuation">(</span>l<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                quick_sort<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span>        <span class="token comment"># 快排</span>        <span class="token comment"># n = len(nums) - 1</span>        <span class="token comment"># quick_sort(0,n)</span>        <span class="token comment"># return nums[k-1]</span>        <span class="token comment"># 堆排</span>        heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span> <span class="token operator">&gt;</span> k<span class="token punctuation">:</span>                heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>        <span class="token keyword">return</span> heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="10-位运算"><a href="#10-位运算" class="headerlink" title="10. 位运算"></a>10. 位运算</h1><h2 id="10-1-典型例题"><a href="#10-1-典型例题" class="headerlink" title="10.1 典型例题"></a>10.1 典型例题</h2><h3 id="10-1-1-数组中数字出现的次数-No-JZ56I"><a href="#10-1-1-数组中数字出现的次数-No-JZ56I" class="headerlink" title="10.1.1 数组中数字出现的次数(No.JZ56I)"></a>10.1.1 数组中数字出现的次数(No.JZ56I)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ56I</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">singleNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 异或^可以剔除出现2次的数字</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            ans <span class="token operator">^</span><span class="token operator">=</span> i                <span class="token comment"># ans = a ^ b,a、b即为只出现一次的数字</span>                m <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> m <span class="token operator">&amp;</span> ans <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            m <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>                a<span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&amp;</span> m<span class="token punctuation">:</span> a <span class="token operator">^</span><span class="token operator">=</span> i            <span class="token keyword">else</span><span class="token punctuation">:</span> b <span class="token operator">^</span><span class="token operator">=</span> i        <span class="token keyword">return</span> a<span class="token punctuation">,</span>b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-1-2-二进制中1的个数-No-JZ15"><a href="#10-1-2-二进制中1的个数-No-JZ15" class="headerlink" title="10.1.2 二进制中1的个数(No.JZ15)"></a>10.1.2 二进制中1的个数(No.JZ15)</h3><ul><li><code>n-1</code>可将<code>n</code>最右边的1变为0，此1右边的0都变为1</li><li><code>n&amp;(n-1)</code>可将<code>n</code>最右边的1变成0，其余不变<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ15</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 位运算</span>        res<span class="token punctuation">,</span>point <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> n <span class="token operator">&amp;</span> point<span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">1</span>            point <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res        <span class="token comment"># 利用n&amp;(n-1)</span>        <span class="token comment"># res = 0</span>        <span class="token comment"># while n:</span>        <span class="token comment">#     n &amp;= n-1</span>        <span class="token comment">#     res += 1</span>        <span class="token comment"># return res</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="10-1-3-数组中数字出现的次数II-No-JZ56II"><a href="#10-1-3-数组中数字出现的次数II-No-JZ56II" class="headerlink" title="10.1.3 数组中数字出现的次数II(No.JZ56II)"></a>10.1.3 数组中数字出现的次数II(No.JZ56II)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ56II</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 哈希表</span>        <span class="token comment"># dic = {}</span>        <span class="token comment"># for num in nums:</span>        <span class="token comment">#     if num not in dic:</span>        <span class="token comment">#         dic[num] = 0</span>        <span class="token comment">#     dic[num] += 1</span>        <span class="token comment"># for i in dic:</span>        <span class="token comment">#     if dic[i] == 1:</span>        <span class="token comment">#         return i</span>        <span class="token comment"># 位运算，统计各位上1的个数，再对3取余，剩下的就是结果</span>        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">32</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">1</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">=</span> <span class="token number">1</span>        res<span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>            res <span class="token operator">|</span><span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">31</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">3</span>                    <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-1-4-不用加减乘除做加法-No-JZ65"><a href="#10-1-4-不用加减乘除做加法-No-JZ65" class="headerlink" title="10.1.4 不用加减乘除做加法(No.JZ65)"></a>10.1.4 不用加减乘除做加法(No.JZ65)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ65</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># Python，Java 等语言中的数字都是以补码形式存储的。但Python没有int,long等不同长度变量，即在编程时无变量位数的概念</span>        x <span class="token operator">=</span> <span class="token number">0xffffffff</span>        a<span class="token punctuation">,</span>b <span class="token operator">=</span> a <span class="token operator">&amp;</span> x<span class="token punctuation">,</span>b <span class="token operator">&amp;</span> x  <span class="token comment"># 可理解为舍去此数字32位以上的数字（将32位以上都变为0），从无限长度变为一个32位整数</span>        <span class="token keyword">while</span> b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span>b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">,</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&amp;</span> x  <span class="token comment"># a存储无进位和，b存储进位</span>        <span class="token keyword">return</span> a <span class="token keyword">if</span> a <span class="token operator">&lt;=</span> <span class="token number">0x7fffffff</span> <span class="token keyword">else</span> <span class="token operator">~</span><span class="token punctuation">(</span>a <span class="token operator">^</span> x<span class="token punctuation">)</span>  <span class="token comment"># 还原python存储格式，若为负数，需要将大于32的所有位置1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="x-其他"><a href="#x-其他" class="headerlink" title="x. 其他"></a>x. 其他</h1><h2 id="x-1-其他例题"><a href="#x-1-其他例题" class="headerlink" title="x.1 其他例题"></a>x.1 其他例题</h2><h3 id="x-1-1-x的平方根-No-69"><a href="#x-1-1-x的平方根-No-69" class="headerlink" title="x.1.1 x的平方根(No.69)"></a>x.1.1 x的平方根(No.69)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution69</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type x: int        :rtype: int        """</span>        <span class="token comment"># 二分法</span>        <span class="token comment"># if  x &lt;= 1:</span>        <span class="token comment">#     return x</span>        <span class="token comment"># left = 1</span>        <span class="token comment"># right = x // 2 + 1</span>        <span class="token comment"># while right - left &gt; 1:</span>        <span class="token comment">#     mid = (left+right)//2</span>        <span class="token comment">#     if mid**2 == x:</span>        <span class="token comment">#         return mid</span>        <span class="token comment">#     elif mid**2 &lt; x:</span>        <span class="token comment">#         left = mid</span>        <span class="token comment">#     else:</span>        <span class="token comment">#         right = mid</span>        <span class="token comment"># return left</span>        <span class="token comment"># 牛顿迭代法</span>        <span class="token keyword">if</span>  x <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> x        x0<span class="token punctuation">,</span> C <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            xi <span class="token operator">=</span> C<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x0<span class="token punctuation">)</span> <span class="token operator">+</span> x0<span class="token operator">/</span><span class="token number">2</span>            <span class="token keyword">if</span> x0 <span class="token operator">-</span> xi <span class="token operator">&lt;</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            x0 <span class="token operator">=</span> xi        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>xi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x-1-2-1～n-整数中-1-出现的次数-No-JZ43"><a href="#x-1-2-1～n-整数中-1-出现的次数-No-JZ43" class="headerlink" title="x.1.2 1～n 整数中 1 出现的次数(No.JZ43)"></a>x.1.2 1～n 整数中 1 出现的次数(No.JZ43)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ43</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countDigitOne</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :rtype: int        """</span>        <span class="token comment"># 直接暴力内存炸了，需要从位数的角度分析</span>        high <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">10</span>        cur <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span>        low <span class="token operator">=</span> <span class="token number">0</span>        digit <span class="token operator">=</span> <span class="token number">1</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> cur<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> high<span class="token operator">*</span>digit            <span class="token keyword">elif</span> cur<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> high<span class="token operator">*</span>digit <span class="token operator">+</span> low <span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token punctuation">(</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>digit            low <span class="token operator">+=</span> cur<span class="token operator">*</span>digit            cur <span class="token operator">=</span> high <span class="token operator">%</span> <span class="token number">10</span>            high <span class="token operator">//=</span> <span class="token number">10</span>            digit <span class="token operator">*=</span> <span class="token number">10</span>        <span class="token keyword">return</span> res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x-1-3-Pow-x-n-No-50"><a href="#x-1-3-Pow-x-n-No-50" class="headerlink" title="x.1.3 Pow(x, n)(No.50)"></a>x.1.3 Pow(x, n)(No.50)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution50</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">myPow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>        <span class="token comment"># 递归</span>        <span class="token keyword">def</span> <span class="token function">recur</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">1.0</span>            ans <span class="token operator">=</span> recur<span class="token punctuation">(</span>n <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> ans <span class="token operator">*</span> ans <span class="token operator">*</span> x            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> ans <span class="token operator">*</span> ans        <span class="token keyword">return</span> recur<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">if</span> n<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">1.0</span><span class="token operator">/</span>recur<span class="token punctuation">(</span><span class="token operator">-</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x-1-4-数字序列中某一位的数字-No-JZ44"><a href="#x-1-4-数字序列中某一位的数字-No-JZ44" class="headerlink" title="x.1.4 数字序列中某一位的数字(No.JZ44)"></a>x.1.4 数字序列中某一位的数字(No.JZ44)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SolutionJZ44</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findNthDigit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment"># 找规律，先确定数位，再确定哪个数，最后确定在数的第几位</span>        digit<span class="token punctuation">,</span> start<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span>        <span class="token keyword">while</span> n <span class="token operator">&gt;</span> count<span class="token punctuation">:</span>            n <span class="token operator">-=</span> count            digit <span class="token operator">+=</span> <span class="token number">1</span>            start <span class="token operator">*=</span> <span class="token number">10</span>            count <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">*</span> start <span class="token operator">*</span> digit        num <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span>digit         k <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> digit        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x-1-5-用Rand7-实现Rand10-No-470"><a href="#x-1-5-用Rand7-实现Rand10-No-470" class="headerlink" title="x.1.5 用Rand7()实现Rand10()(No.470)"></a>x.1.5 用Rand7()实现Rand10()(No.470)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution470</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rand10</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: int        """</span>        <span class="token comment"># 关键：(randx() - 1) * y + randy() 能够构造randx*y()</span>        num <span class="token operator">=</span> <span class="token punctuation">(</span>rand7<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> rand7<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 构造rand49()</span>        <span class="token comment"># while num &gt; 10:</span>        <span class="token comment">#     num = (rand7() - 1) * 7 + rand7()</span>        <span class="token comment"># return num</span>        <span class="token keyword">while</span> num <span class="token operator">&gt;</span> <span class="token number">40</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> <span class="token punctuation">(</span>rand7<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> rand7<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> num <span class="token operator">%</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x-1-6-整数反转-No-7"><a href="#x-1-6-整数反转-No-7" class="headerlink" title="x.1.6 整数反转(No.7)"></a>x.1.6 整数反转(No.7)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution7</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>        sign <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            sign <span class="token operator">=</span> <span class="token number">0</span>            x <span class="token operator">=</span> <span class="token operator">-</span>x        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            digit <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span>            <span class="token comment"># 判断是否溢出</span>            <span class="token keyword">if</span> res <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">10</span> <span class="token keyword">or</span> res <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">31</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">10</span> <span class="token keyword">and</span> digit<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token number">0</span>            x <span class="token operator">=</span> x <span class="token operator">//</span> <span class="token number">10</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> digit        <span class="token keyword">return</span> res <span class="token keyword">if</span> sign <span class="token keyword">else</span> <span class="token operator">-</span>res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="X-References"><a href="#X-References" class="headerlink" title="X. References"></a>X. References</h1><ul><li><a href="https://github.com/youngyangyang04/leetcode-master">leetcode-master</a></li><li><a href="https://stackoverflom/questions/15079057/arrays-vs-vectors-introductory-similarities-and-differences">vector和array区别</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 刷题 </tag>
            
            <tag> python </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oh My Zsh + Tmux + vim配置安装</title>
      <link href="2021/04/09/oh-my-zsh/"/>
      <url>2021/04/09/oh-my-zsh/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>2021-04-09</code>作为人与计算机的“接口”，<code>shell</code>无疑是程序员最离不开的工具之一。一个配置得当的<code>shell</code>能够让工作效率大大提升（<span class="github-emoji"><span>👴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f474.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>直接<span class="github-emoji"><span>✈</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2708.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）并且还能保持美滋滋的心情（<span class="github-emoji"><span>😇</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f607.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）。本文详细介绍了较为流行的<code>Oh my zsh + tmux</code>组合的配置安装过程，供大家参考<span class="github-emoji"><span>💤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。</p></blockquote><h1 id="1-Oh-My-Zsh"><a href="#1-Oh-My-Zsh" class="headerlink" title="1. Oh My Zsh"></a>1. Oh My Zsh</h1><h2 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h2><h3 id="1-1-1-什么是zsh？"><a href="#1-1-1-什么是zsh？" class="headerlink" title="1.1.1 什么是zsh？"></a>1.1.1 什么是zsh？</h3><ul><li><code>zsh</code>全名<code>z shell</code>，顾名思义，它是<code>shell</code>的一种，而且是很powerful的那种。那<code>shell</code>又是什么？通俗地讲，<code>shell</code>就是能够接受用户输入指令的操作界面，像我们常说的“命令行”、“终端”等指的都是<code>shell</code>。<code>shell</code>的种类繁多，但大多数Linux发行版（如Ubuntu）默认使用的均为<code>bash shell</code>。相比于<code>bash</code>，<code>zsh</code>为程序员提供了更多、更好、更灵活的选择，无论是外观（e.g. 丰富的主题）还是实用的插件（插件是灵魂=。=），因此其深受广大码农的青睐。</li><li>这里给出<a href="https://www.zsh.org/">Zsh主页</a>的官方定义：<code>Zsh is a shell designed for interactive use, although it is also a powerful scripting language.</code></li></ul><h3 id="1-1-2-什么是oh-my-zsh"><a href="#1-1-2-什么是oh-my-zsh" class="headerlink" title="1.1.2 什么是oh my zsh?"></a>1.1.2 什么是oh my zsh?</h3><ul><li><code>zsh</code>的强大功能往往伴随着复杂的插件配置过程（发量<code>-n</code><span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）。为了使<code>zsh</code>用起来更方便快捷，<code>oh my zsh</code>应运而生。<code>oh my zsh</code>主要的功能就是对<code>zsh</code>的插件配置进行统一管理，因此你可以形象地称它为<code>zsh</code>的“配置管家”。</li><li>这里给出<a href="https://ohmyz.sh/">Oh My Zsh主页</a>的官方定义: <code>Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration.</code></li></ul><h3 id="1-1-3-为什么要使用zsh-or-oh-my-zsh"><a href="#1-1-3-为什么要使用zsh-or-oh-my-zsh" class="headerlink" title="1.1.3 为什么要使用zsh or oh my zsh?"></a>1.1.3 为什么要使用zsh or oh my zsh?</h3><ul><li>效率：让你的指令操作如德芙般丝滑。</li><li>灵活：插件库深似海，总有一款适合你。</li><li>成为实验室中最靓的仔：懂的都懂<span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li></ul><h2 id="1-2-oh-my-zsh-安装（step-by-step）"><a href="#1-2-oh-my-zsh-安装（step-by-step）" class="headerlink" title="1.2 oh my zsh 安装（step by step）"></a>1.2 oh my zsh 安装（step by step）</h2><ul><li>注：以下安装过程均基于Ubuntu 16.04（Windows系统下的安装可直接参考官方链接<a href="https://github.com/ohmyzsh/ohmyzsh">oh my zsh github</a>，<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH">Install zsh</a>）</li></ul><h3 id="1-2-1-安装-zsh"><a href="#1-2-1-安装-zsh" class="headerlink" title="1.2.1 安装 zsh"></a>1.2.1 安装 zsh</h3><ul><li>查看正在使用的shell：<code>echo $SHELL</code><br><img src="/2021/04/09/oh-my-zsh/fig1-1.png"></li><li>查看所有shell：<code>cat /etc/shells</code><br><img src="/2021/04/09/oh-my-zsh/fig1-2.png"></li><li>安装zsh：<code>sudo apt install zsh</code></li><li>再次查看所有shell：<code>cat /etc/shells</code><br><img src="/2021/04/09/oh-my-zsh/fig1-3.png"></li><li>查看zsh版本：<code>zsh --version # 版本最好大于5.0</code><br><img src="/2021/04/09/oh-my-zsh/fig1-4.png"></li><li>将zsh设置为默认shell：<code>chsh -s $(which zsh)</code></li><li>仅对当前用户设置（适合在服务器上配置时使用）：先输入<code>chsh</code>回车, 再输入新的shell路径：<code>/usr/bin/zsh</code><br><img src="/2021/04/09/oh-my-zsh/fig1-5.png"></li><li>重新启动shell（本地需要重启），输入：<code>echo $SHELL  # 进行验证</code><br><img src="/2021/04/09/oh-my-zsh/fig1-6.png"></li><li>可能遇到的问题：<code>Ignore insecure directories and continue [y] or abort compinit [n]?</code> 输入y，再参考<a href="https://github.com/zsh-users/zsh-completions/issues/433">issue_1</a>解决<ul><li><strong>讨论</strong>: <code>Basically, ZSH expects system files to be owned and modifiable (w) by either you (the one running the shell) or root</code></li><li>因此若是普通用户，需联系具有root权限的用户将<code>compaudit</code>命令显示的目录的所有者改为root，即运行<code>sudo chown -R root:root target_directory</code>命令。</li></ul></li></ul><h3 id="1-2-2-安装-oh-my-zsh"><a href="#1-2-2-安装-oh-my-zsh" class="headerlink" title="1.2.2 安装 oh my zsh"></a>1.2.2 安装 oh my zsh</h3><ul><li>需预先安装：<code>curl</code>或<code>wget</code>，以及<code>git</code></li><li>在命令行中输入以下命令之一：<pre class="line-numbers language-none"><code class="language-none">sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"sh -c "$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>若上述命令执行出错，可直接点击网址进行下载（点击网址后在新弹出的网页右键另存为即可下载<code>install.sh</code>文件），再执行<code>sh install.sh</code>命令进行安装。</li><li>安装成功后显示：<br><img src="/2021/04/09/oh-my-zsh/fig1-7.png"> </li></ul><h2 id="1-3-oh-my-zsh使用"><a href="#1-3-oh-my-zsh使用" class="headerlink" title="1.3 oh my zsh使用"></a>1.3 oh my zsh使用</h2><ul><li><strong>配置文件</strong>：完成安装后，会自动在主目录下生成一个隐藏文件<code>~/.zshrc</code>，此即为配置文件，也是最重要的文件。</li><li><strong>主题</strong>：<code>oh my zsh</code>提供了海量的主题，具体可参考<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">themes</a>。找到自己心仪的主题后，只需在配置文件中将ZSH_THEME=”robbyrussell”引号中主题名字替换，保存文件后重启shell（或直接在命令行中输入<code>source ~/.zshrc</code>使配置生效）即可。</li><li><strong>插件</strong>：丰富的插件是zsh的灵魂。可用的插件列表见链接<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins">plugins</a>，每个插件文件夹下都有其对应的README文档供参考。若要使用某插件，只需在配置文件中将插件名字加入到<code>plugins=()</code>字段中的括号中即可。注意需以空格或换行来分隔多个插件名，而不能用逗号。修改后保存文件重启shell（或直接在命令行中输入<code>source ~/.zshrc</code>使配置生效）即可。</li></ul><h2 id="1-4-推荐插件（updating）"><a href="#1-4-推荐插件（updating）" class="headerlink" title="1.4 推荐插件（updating）"></a>1.4 推荐插件（updating）</h2><h3 id="1-4-1-extract"><a href="#1-4-1-extract" class="headerlink" title="1.4.1 extract"></a>1.4.1 extract</h3><ul><li>功能：一键解压所有格式文件，<code>x file_name or extract file_name</code></li><li>只需在配置文件中加入该插件名<code>extract</code>后重启shell（或直接在命令行中输入<code>source ~/.zshrc</code>使配置生效）即可使用。</li></ul><h3 id="1-4-2-autojump"><a href="#1-4-2-autojump" class="headerlink" title="1.4.2 autojump"></a>1.4.2 autojump</h3><ul><li>功能：自动跳转，具体用法见<a href="https://github.com/wting/autojump">autojump</a></li><li>安装：在命令行中依次执行：<pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/wting/autojump.gitcd autojump./install.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>在配置文件中加入该插件名<code>autojump</code>后重启shell（或直接在命令行中输入<code>source ~/.zshrc</code>使配置生效）即可使用。</li></ul><h3 id="1-4-3-zsh-autosuggestions（强烈推荐）"><a href="#1-4-3-zsh-autosuggestions（强烈推荐）" class="headerlink" title="1.4.3 zsh-autosuggestions（强烈推荐）"></a>1.4.3 zsh-autosuggestions（强烈推荐）</h3><ul><li>功能：自动补全，具体用法见<a href="https://github.com/zsh-users/zsh-autosuggestions#usage">zsh-autosuggestions</a></li><li>安装：在命令行中执行：<pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>在配置文件中加入该插件名<code>zsh-autosuggestions</code>后重启shell（或直接在命令行中输入<code>source ~/.zshrc</code>使配置生效）即可使用。</li><li><strong>改键</strong>（由于默认的快捷键较为不方便，因此可按自己习惯进行改键）<ul><li>打开配置文件，找到<code>source $ZSH/oh-my-zsh.sh</code>，在该行下面新增一句：<pre class="line-numbers language-none"><code class="language-none">bindkey '^F' autosuggest-accept<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>‘^F’代表组合键<code>Ctrl+F</code>，可按自己习惯进行更改。更改后保存文件，重启shell（或直接在命令行中输入<code>source ~/.zshrc</code>使配置生效）。<br><img src="/2021/04/09/oh-my-zsh/fig1-8.png"></li><li>部分补全功能：组合键<code>Alt+F</code>或<code>Esc+F</code>，这是自带的，但大部分博客中都没有提及。</li><li>完成上述改建操作后，可以很方便地使用<code>Ctrl+F</code>进行全补全，<code>Alt+F</code>进行部分补全。</li></ul></li></ul><h3 id="1-4-4-zsh-syntax-highlighting（官方主页：zsh-syntax-highlighting）"><a href="#1-4-4-zsh-syntax-highlighting（官方主页：zsh-syntax-highlighting）" class="headerlink" title="1.4.4 zsh-syntax-highlighting（官方主页：zsh-syntax-highlighting）"></a>1.4.4 zsh-syntax-highlighting（官方主页：<a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a>）</h3><ul><li>功能：语法高亮。</li><li>安装：在命令行中执行：<pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>在配置文件中加入该插件名<code>zsh-syntax-highlighting</code>后重启shell（或直接在命令行中输入<code>source ~/.zshrc</code>使配置生效）即可使用。</li></ul><h3 id="1-4-5-sudo"><a href="#1-4-5-sudo" class="headerlink" title="1.4.5 sudo"></a>1.4.5 sudo</h3><ul><li>功能: 连按两次<code>Esc</code>即可在当前命令开头加上<code>sudo</code>。</li><li>只需在配置文件中加入该插件名<code>sudo</code>后重启shell（或直接在命令行中输入<code>source ~/.zshrc</code>使配置生效）即可使用。</li></ul><h1 id="2-Tmux"><a href="#2-Tmux" class="headerlink" title="2. Tmux"></a>2. Tmux</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><ul><li><code>Tmux</code>是一个终端复用神器，能够在单个屏幕中同时创建并操控多个终端。最重要的是，它可以随时从当前屏幕中分离（detach）出去，然后在后台继续运行，并且能够重连（attach）。因此其非常适合在服务器上使用。</li><li><a href="https://github.com/tmux/tmux">tmux github</a>上给出的定义为： <code>tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed, and controlled from a single screen. tmux may be detached from a screen and continue running in the background, then later reattached.</code></li></ul><h2 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h2><ul><li>Ubuntu系统, 在命令行中运行:<br><code>sudo apt install tmux</code></li><li>其他系统的安装可参考官方安装教程<a href="https://github.com/tmux/tmux/wiki/Installing">tmux install</a></li></ul><h2 id="2-3-配置"><a href="#2-3-配置" class="headerlink" title="2.3 配置"></a>2.3 配置</h2><ul><li>推荐<a href="https://github.com/gpakosz/.tmux">oh my tmux</a>配置，可在该配置的基础上进行个性化适配。</li><li>上述配置安装: <pre class="line-numbers language-none"><code class="language-none">cd ~git clone https://github.com/gpakosz/.tmux.gitln -s -f .tmux/.tmux.confcp .tmux/.tmux.conf.local .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-4-基本用法"><a href="#2-4-基本用法" class="headerlink" title="2.4 基本用法"></a>2.4 基本用法</h2><ul><li><code>tmux</code>: 创建一个新的会话（session），并自动命名为0</li><li><code>tmux new -s name</code>: 创建一个名字为name的会话</li><li><code>tmux ls</code>: 列出当前所有的会话</li><li><code>tmux at -t name</code>: 恢复（attach）名字为name的会话</li><li><code>tmux -V</code>: 查看tmux版本</li><li><strong>快捷键绑定</strong><ul><li><code>Ctrl b</code>: 前置键, 记为<code>&lt;prefix&gt;</code></li><li><code>&lt;prefix&gt; e</code>: 打开<code>~/.tmux.conf.local</code>文件，此文件即为配置文件，可修改以适配自己的习惯。</li><li><code>Ctrl l</code>: 清屏</li><li><code>&lt;prefix&gt; Ctrl c</code>: 创建新的会话</li><li><code>&lt;prefix&gt; Ctrl -</code>: 水平分割窗口</li><li><code>&lt;prefix&gt; Ctrl _</code>: 垂直分割窗口</li><li><code>&lt;prefix&gt; t</code>: 显示时间</li><li><code>&lt;prefix&gt; z</code>: 将当前窗口最大化（返回原状也是该快捷键）</li><li><code>&lt;prefix&gt; m</code>: 开启鼠标模式</li><li><code>&lt;prefix&gt; 0-9</code>: 选择0-9窗口</li><li><code>&lt;prefix&gt; ，</code>: 重命名窗口<ul><li>要固定窗口名称，则需在.zshrc中加<code>DISABLE_AUTO_TITLE=true</code></li></ul></li></ul></li></ul><h1 id="3-vim"><a href="#3-vim" class="headerlink" title="3. vim"></a>3. vim</h1><h2 id="3-1-vim-简介"><a href="#3-1-vim-简介" class="headerlink" title="3.1 vim 简介"></a>3.1 vim 简介</h2><ul><li>官方给出的定义：<code>Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient.</code></li><li>vim作为老牌的文本编辑器，因其高效、灵活、插件丰富、可扩展性强等特点在程序员中被广泛使用。</li><li>Neovim是Vim的重构版本，但对于普通用户而言，二者的区别不大。</li><li>vim的强大功能主要来源于其丰富的配置及插件库，谨以此文记录自己的vim/nvim配置。</li></ul><h2 id="3-2-vim基础配置"><a href="#3-2-vim基础配置" class="headerlink" title="3.2 vim基础配置"></a>3.2 vim基础配置</h2><ul><li>vim的配置文件为用户主目录下的<code>~/.vimrc</code>文件，nvim的配置文件则为<code>~/.config/nvim/init.vim</code>若没有则可以自行创建。</li><li><code>syntax on</code>  开启语法高亮</li><li><code>set number</code>  设置行号</li><li><code>set autoread</code>  文件在外部被改变时自动重新载入</li><li><code>set nobackup</code>  覆盖文件时不保留备份</li><li><code>set encoding=utf-8</code>  设置vim内部字符编码</li><li><code>set ruler</code>  在右下角显示当前行号、列号及相对位置</li><li><code>set backspace=2</code>  使得删除键生效</li><li><code>set hlsearch</code>  高亮搜索结果</li><li><code>set tabstop=4</code>  缩进空格数</li><li><code>au BufReadPost * if line("'\"") &gt; 1 &amp;&amp; line("'\"") &lt;= line("$") | exe "normal! g'\"" | endif</code>  自动跳到上次打开的光标位置</li><li><code>hi comment ctermfg=6</code>  改变注释颜色为淡蓝色</li><li>键位映射</li><li><code>let mapleader = ";"</code>  设置前缀键</li><li><code>nnoremap &lt;C-a&gt; &lt;Home&gt;</code></li><li><code>inoremap &lt;C-a&gt; &lt;Home&gt;</code></li><li><code>nnoremap &lt;C-e&gt; &lt;End&gt;</code></li><li><code>inoremap &lt;C-e&gt; &lt;End&gt;</code></li><li><code>nnoremap &lt;leader&gt;s :so ~/.vimrc&lt;CR&gt;</code></li><li>使光标一直处于屏幕中间</li><li><code>nnoremap j gjzz</code></li><li><code>nnoremap k gkzz</code></li><li><code>nnoremap &lt;ESC&gt; :noh&lt;CR&gt;zz</code></li></ul><h2 id="3-3-插件管理"><a href="#3-3-插件管理" class="headerlink" title="3.3 插件管理"></a>3.3 插件管理</h2><ul><li>丰富的插件是vim的灵魂，但同时繁杂的插件会带来许多烦恼，因此插件管理器是十分有必要的。</li><li><code>vim-plug</code>是一款简单易用的插件管理器，适用于vim和nvim。在<a href="https://github.com/junegunn/vim-plug">官方项目</a>下载<code>plug.vim</code>文件，并将其放在<code>autoload</code>文件夹下。</li><li>对vim放置路径可为<code>~/.vim/autoload/</code>，对nvim可为<code>~/.config/nvim/autoload/</code></li><li>在配置文件中管理插件：<pre class="line-numbers language-none"><code class="language-none">call plug#begin('~/.vim/plugged')Plug 'path/of-plugin'...call plug#end()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>配置完成后，在命令模式下输入<code>:PlugInstall</code>即可自动安装所有插件。</li></ul><h2 id="3-4-推荐插件"><a href="#3-4-推荐插件" class="headerlink" title="3.4 推荐插件"></a>3.4 推荐插件</h2><ul><li><a href="https://github.com/plasticboy/vim-markdown">Vim-markdown</a><ul><li>提供针对markdown的语法高亮、段落折叠、查看目录、断间跳转等功能。</li><li>在配置文件中加入<code>Plug 'godlygeek/tabular'</code>和<code>Plug 'plasticboy/vim-markdown'</code></li><li>输入<code>:help vim-markdown</code>可查看其用法</li><li>若要高亮数学公式，则在配置文件中加入<code>let g:vim_markdown_math = 1</code></li></ul></li></ul><h2 id="3-5-其他"><a href="#3-5-其他" class="headerlink" title="3.5 其他"></a>3.5 其他</h2><ul><li>若同时使用tmux，则C-A快捷键会冲突，需把tmux中C-A禁用。<ul><li>解除tmux配置文件<code>~/.tmux.conf.local</code>340-345行的注释，将344,345行中的a改为b</li></ul></li><li>若用nvim，可以将vim映射至nvim，每次用vim启动即可。<ul><li>在用户配置文件<code>~/.bashrc</code>或<code>~/.zshrc</code>中加入<code>alias vim=nvim</code></li></ul></li></ul><h1 id="4-使用心得"><a href="#4-使用心得" class="headerlink" title="4. 使用心得"></a>4. 使用心得</h1><blockquote><p>到目前（2021.04）为止，已使用<code>oh my zsh + tmux</code>有大半年了，感觉良好<span class="github-emoji"><span>😎</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。插件方面（<a href="#toc-heading-13">自动补全</a>永远<span class="github-emoji"><span>💧</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a7.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>神）目前感觉够用，没有其他特别的需求，大家有比较好的插件也可以分享一下<span class="github-emoji"><span>👏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。值得一提的是，如果突然在一台没这些配置的主机上工作，会出现强烈的不适感<span class="github-emoji"><span>😵</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。<code>tmux</code>最好的一点就是如果连接远程服务器的终端卡死或者意外断开连接，能够轻松地<code>attach</code>并且之前的程序不会终止。我一般会把第一个窗口用来监测服务器的使用情况，其他的则是各个项目。<br><img src="/2021/04/09/oh-my-zsh/fig3-1.png"></p></blockquote><h1 id="5-References"><a href="#5-References" class="headerlink" title="5. References"></a>5. References</h1><ul><li><a href="https://www.zsh.org/">Zsh主页</a></li><li><a href="https://ohmyz.sh/">Oh My Zsh主页</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH">Install zsh</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh">oh my zsh github</a></li><li><a href="https://github.com/zsh-users/zsh-autosuggestions#usage">zsh-autosuggestions</a></li><li><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a></li><li><a href="https://github.com/wting/autojump">autojump</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins">plugins</a></li><li><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">themes</a></li><li><a href="https://github.com/zsh-users/zsh-completions/issues/433">issue_1</a></li><li><a href="https://github.com/tmux/tmux">tmux github</a></li><li><a href="https://github.com/tmux/tmux/wiki/Installing">tmux install</a></li><li><a href="https://github.com/gpakosz/.tmux">oh my tmux</a></li><li><a href="www.vim.org">Vim主页</a></li><li><a href="https://vimjc.com/">Vim教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/84773275">Vim+markdown配置</a></li><li><a href="https://github.com/junegunn/vim-plug">vim-plug</a></li><li><a href="https://github.com/plasticboy/vim-markdown">Vim-markdown</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 部署安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> oh my zsh </tag>
            
            <tag> zsh </tag>
            
            <tag> tmux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github博客搭建</title>
      <link href="2021/04/06/build-my-blog/"/>
      <url>2021/04/06/build-my-blog/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>2021-04-06</code>最近想搭建一个博客网站，来规范地记录自己的学习内容。目前Hexo+Github是比较主流的一种搭建方法，本文也是基于该方法，详细记录其搭建步骤及搭建过程中所遇到的问题，以供大家参考<span class="github-emoji"><span>💤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a4.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。</p></blockquote><h1 id="1-Hexo简介"><a href="#1-Hexo简介" class="headerlink" title="1. Hexo简介"></a>1. Hexo简介</h1><p>之前没有接触过Hexo，因此仔细地把<a href="#toc-heading-15">Hexo官方文档</a>看了一遍，本文大部分内容也是基于此文档。Hexo的<a href="https://hexo.io/zh-cn/docs/">官方定义</a>为: Hexo是一个快速、简洁且高效的博客框架。它使用Markdown（或其他渲染引擎）解析文章，在几秒内即可利用靓丽的主题生成静态网页。</p><h1 id="2-Hexo安装"><a href="#2-Hexo安装" class="headerlink" title="2. Hexo安装"></a>2. Hexo安装</h1><p>在安装Hexo之前需要先安装Git和Node.js。若已安装上述程序，则可直接进行<a href="#toc-heading-5">Hexo安装</a>。</p><h2 id="2-1-Git安装"><a href="#2-1-Git安装" class="headerlink" title="2.1 Git安装"></a>2.1 Git安装</h2><ul><li><strong>Windows</strong>: <a href="https://git-scm.com/download/win">官网</a>下载并安装。</li><li><strong>Linux(Ubuntu)</strong>: <code>sudo apt install git</code></li><li><strong>查看git版本</strong>: <code>git --version</code></li></ul><h2 id="2-2-Node-js安装"><a href="#2-2-Node-js安装" class="headerlink" title="2.2 Node.js安装"></a>2.2 Node.js安装</h2><ul><li><strong>Windows</strong>: 在<a href="https://nodejs.org/en/download/">官网</a>下载安装包，按指示安装即可。</li><li><strong>Linux(Ubuntu)</strong>:  <pre class="line-numbers language-none"><code class="language-none">curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -sudo apt-get install -y nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>lts</code>为最新的长期支持版本，若需要特定版本，将其替换为<code>xx</code>，如<code>12</code>即为V12版本。</li></ul></li><li><strong>查看Node.js版本</strong>: <code>node -v</code></li><li>建议使用<strong>12.0</strong>及以上版本。</li></ul><h2 id="2-3-Hexo安装"><a href="#2-3-Hexo安装" class="headerlink" title="2.3 Hexo安装"></a>2.3 Hexo安装</h2><ul><li><p><strong>全局安装</strong>: <code>sudo npm install -g hexo-cli</code></p></li><li><p><strong>局部安装</strong>: <code>npm install hexo</code> 进阶用户可局部安装，本文采用全局安装。</p></li><li><p><strong>查看Hexo版本信息</strong>: <code>hexo -v</code><br><img src="/2021/04/06/build-my-blog/fig2-1.png"></p></li><li><p>至此，安装工作全部结束。</p></li></ul><h1 id="3-Hexo基本操作"><a href="#3-Hexo基本操作" class="headerlink" title="3. Hexo基本操作"></a>3. Hexo基本操作</h1><h2 id="3-1-初始化网页"><a href="#3-1-初始化网页" class="headerlink" title="3.1 初始化网页"></a>3.1 初始化网页</h2><ul><li>新建一个文件夹，以存放Blog相关文件: <code>mkdir path/to/MyBlog</code></li><li>进入该文件夹: <code>cd path/to/MyBlog</code></li><li>初始化:   <pre class="line-numbers language-none"><code class="language-none">hexo init # 速度会比较慢npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>初始化后会在主目录下生成若干文件和文件夹: <ul><li><code>_config.yml</code>: 网页的配置信息</li><li><code>package.json</code>: 安装包信息</li><li><code>scaffolds</code>: 模板文件夹</li><li><code>source</code>: 资源文件夹，存放Blog文章等</li><li><code>themes</code>: 主题文件夹，决定静态页面的主题</li></ul></li></ul><h2 id="3-2-新建文章"><a href="#3-2-新建文章" class="headerlink" title="3.2 新建文章"></a>3.2 新建文章</h2><ul><li><p><code>hexo new [layout] &lt;title&gt;   e.g. hexo new post "First-Blog"</code></p></li><li><p>layout默认为post，此时会在<code>source/_posts/</code>下生成<code>First-Blog.md</code>文件</p></li><li><p>将<code>_config.yml</code>文件中的<code>post_asset_folder:false</code>改为<code>true</code>，则每次新建文章时会自动新建一个同名的文件夹用来存放图片等资源。</p></li><li><p>可以自定义layout，自带的layout有:<br><img src="/2021/04/06/build-my-blog/fig3-1.png"></p></li><li><p>插入图片: <code>sudo npm install hexo-renderer-marked</code>，并更改配置文件:<br><img src="/2021/04/06/build-my-blog/fig3-2.png"></p></li><li><p>即可使用Markdown相对路径插入图片: <code>![](xxx.png)</code></p></li><li><p>生成静态文件: <code>hexo generate or hexo g # 生成的文件在public文件夹中</code></p></li><li><p>本地预览: <code>hexo s</code>，然后浏览器打开<code>localhost:4000</code>即可，<code>ctrl+c</code>关闭本地服务器。</p></li></ul><h2 id="3-3-新建草稿"><a href="#3-3-新建草稿" class="headerlink" title="3.3 新建草稿"></a>3.3 新建草稿</h2><ul><li>若有未编辑完的文章或者不想公开的文章，可以将其存为草稿。</li><li>使用<code>hexo new draft &lt;title&gt;</code>命令新建草稿，此时运行<code>hexo g</code>不会生成<code>_drafts</code>文件夹下文章的静态文件。</li><li>若想本地预览草稿，则需使用<code>hexo s --draft</code>命令。</li><li>将草稿发布为正式文章，使用<code>hexo p &lt;title&gt;</code>命令，实际上就是把<code>_drafts</code>文件夹下的文章移动到<code>_posts</code>文件夹下。</li><li>同理，若想将正式文件转为草稿，则只需将相应的文件移动到<code>_drafts</code>文件夹下。</li><li>一个小问题：草稿中插入图片需将图片放置于<code>/source/images</code>目录下，插入命令也需改为<code>![](/images/xxx.png)</code></li></ul><h1 id="4-Github部署"><a href="#4-Github部署" class="headerlink" title="4. Github部署"></a>4. Github部署</h1><ul><li><p>安装hexo-deployer-git: <code>npm install hexo-deployer-git</code></p></li><li><p>打开github，新建一个项目，项目名字设为: <code>username.github.io # username为github用户名</code></p></li><li><p>进入所建项目，点击<code>Settings</code>, 往下拉直到<code>GitHub Pages</code></p></li><li><p>选择一个主题，等一会刷新一下直到网址栏变绿:<br><img src="/2021/04/06/build-my-blog/fig4-1.png"></p></li><li><p>点击链接即可看到自己的初始网页。</p></li><li><p>本地生成ssh秘钥: <code>ssh-keygen -t rsa # 不用设密码，一路回车即可</code></p></li><li><p>进入github主页，点击<code>头像--&gt;Settings--&gt;SSH and GPG keys--&gt;New SSH key</code></p></li><li><p>将生成的公钥内容复制进去，命名随意，确定保存。公钥路径默认为<code>~/.ssh/id_rsa.pub</code></p></li><li><p>验证: <code>ssh -T git@github.com</code><br><img src="/2021/04/06/build-my-blog/fig4-2.png"></p></li><li><p>修改部署配置: 打开<code>_config.yml</code>文件，修改位于文件最后的<code>deploy</code>字段:<br><img src="/2021/04/06/build-my-blog/fig4-3.png"></p></li><li><p><code>repository</code>为github项目地址，用ssh链接更快。</p></li><li><p>部署到github: <code>hexo d</code></p></li><li><p>打开github.io主页即可看到发布的文章。</p></li><li><p>删除文章: 删除对应的md文件，再执行<code>hexo clean</code></p></li></ul><h1 id="5-个性化设置"><a href="#5-个性化设置" class="headerlink" title="5. 个性化设置"></a>5. 个性化设置</h1><h2 id="5-1-绑定域名"><a href="#5-1-绑定域名" class="headerlink" title="5.1 绑定域名"></a>5.1 绑定域名</h2><p><code>To Do</code>，目前感觉github.io还行*-*</p><h2 id="5-2-备份Blog源文件"><a href="#5-2-备份Blog源文件" class="headerlink" title="5.2 备份Blog源文件"></a>5.2 备份Blog源文件</h2><ul><li><p>部署之后，上述新建的<code>username.github.io</code>项目会被<code>public</code>文件夹覆盖。</p></li><li><p>为了能够在不同的电脑写博客，可以建立一个新的分支来存放整个源文件。</p></li><li><p>点击分支，输入要创建的新分支名，如<code>source</code><br><img src="/2021/04/06/build-my-blog/fig5-1.png"></p></li><li><p>然后将其克隆到本地: <code>git clone git@github.com:wwwei1997/wwwei1997.github.io.git</code></p></li><li><p>进入项目主目录: <code>cd wwwei1997.github.io.git</code></p></li><li><p>切换到<code>source</code>分支: <code>git checkout source</code></p></li><li><p>将<code>.git</code>复制到博客根目录下: <code>cp .git path/to/MyBlog/</code></p></li><li><p>删除项目: <code>rm -rf wwwei1997.github.io.git</code></p></li><li><p>进入博客主目录: <code>cd path/to/MyBlog</code></p></li><li><p>三连: <code>git add .</code> &amp; <code>git commit -m "message"</code> &amp; <code>git push origin source</code></p></li><li><p>此时打开github切换到<code>source</code>分支即可看到上传的源文件。</p></li><li><p><strong>注意</strong>: 上传时需要降<code>themes</code>下的<code>.gitkeep</code>删除，否则主题传不上去。</p></li></ul><h2 id="5-3-Front-matter"><a href="#5-3-Front-matter" class="headerlink" title="5.3 Front-matter"></a>5.3 Front-matter</h2><ul><li><p>Front-matter是Markdown文件最上方以<code>---</code>分隔的区域，用于指定特定文件的变量。</p></li><li><p>修改<code>/scaffolds/post.md</code>:<br><img src="/2021/04/06/build-my-blog/fig5-2.png"></p></li><li><p>每次新建文章时会自动填充这些变量。</p></li><li><p>Hexo中tag和category区别: </p><ul><li>category具有顺序性和层次性，而tag没有，如:<pre class="line-numbers language-none"><code class="language-none">categories:  -Animal  -Dog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>这意味着<code>Dog</code>是<code>Animal</code>的子类。</li></ul></li></ul><h2 id="5-4-主题"><a href="#5-4-主题" class="headerlink" title="5.4 主题"></a>5.4 主题</h2><p>Hexo社区提供了<a href="https://hexo.io/themes/">300+主题</a>供大家选择，我选择的是<a href="http://blinkfox.com/">matery</a>主题，初步使用参考<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">官方中文文档</a>，可根据自己的偏好进一步修改。我自己所修改的内容主要有: </p><ul><li><p>在“关于”页面增加简历card</p><ul><li><p>编辑<code>/themes/hexo-theme-matery/layout/about.ejs</code>，在<code>&lt;div class="card"&gt;</code>对应的<code>&lt;/div&gt;</code>下面新增一个card: </p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="card"&gt;&lt;div class="card-content"&gt;&lt;div class="card-content article-card-content"&gt;&lt;div class="title center-align" data-aos="zoom-in-up"&gt;&lt;i class="fa fa-address-book"&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&lt;%- __('myCV') %&gt;&lt;/div&gt;&lt;div id="articleContent" data-aos="fade-up"&gt;&lt;%- page.content %&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后即可在<code>/source/about/index.md</code>中写简历内容。</p></li></ul></li><li><p>增加建站时间</p><ul><li>编辑<code>/themes/hexo-theme-matery/_config.yml</code>，将<code>time.enable</code>改为<code>true</code><br><img src="/2021/04/06/build-my-blog/fig5-3.png"></li></ul></li><li><p>更改导航栏、页尾背景色: </p><ul><li>编辑主题文件的<code>/source/css/matery.css</code>，自行修改<code>.bg-color</code>字段:<br><img src="/2021/04/06/build-my-blog/fig5-4.png"></li></ul></li><li><p>取消动态切换背景色:</p><ul><li>编辑主题文件的<code>/source/css/matery.css</code>，注释<code>keyframes rainbow</code>和<code>webkit-keyframes rainbow</code>字段:<pre class="line-numbers language-none"><code class="language-none">/*@-webkit-keyframes rainbow {...}@keyframes rainbow {...}*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h1 id="6-References"><a href="#6-References" class="headerlink" title="6. References"></a>6. References</h1><ul><li><a href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a> </li><li><a href="https://nodejs.org/en/download/">Node.js Download</a> </li><li><a href="https://zhuanlan.zhihu.com/p/35668237">超详细Hexo+Github博客搭建小白教程</a> </li><li><a href="https://cloud.tencent.com/developer/article/1736563">hexo博客中如何插入图片</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 部署安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
